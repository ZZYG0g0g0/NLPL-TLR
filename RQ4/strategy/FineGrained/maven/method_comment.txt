



Invoked after all MavenProject instances have been created. This callback is intended to allow extensions to manipulate MavenProjects before they are sorted and actual build execution starts. Invoked after all projects were built. This callback is intended to allow extensions to perform cleanup of any allocated external resources after the build. It is invoked on best-effort basis and may be missed due to an Error or RuntimeException in Maven core code. Invoked after MavenSession instance has been created. This callback is intended to allow extensions to inject execution properties, activate profiles and perform similar tasks that affect MavenProject instance construction. TODO This is too early for build extensions, so maybe just remove it?


<p> Returns the logger that has been injected into this mojo. If no logger has been setup yet, a <code>SystemStreamLog</code> logger will be created and returned. </p> <strong>Note:</strong> The logger returned by this method must not be cached in an instance field during the construction of the mojo. This would cause the mojo to use a wrongly configured default logger when being run by Maven. The proper logger gets injected by the Plexus container <em>after</em> the mojo has been constructed. Therefore, simply call this method directly whenever you need the logger, it is fast enough and needs no caching.





-----------/ - Methods -/ -----------/ Method clone. -- Activation clone() Get specifies that this profile will be activated based on existence of a file. -- ActivationFile getFile() Get specifies that this profile will be activated when a matching JDK is detected. -- String getJdk() Get specifies that this profile will be activated when matching OS attributes are detected. -- ActivationOS getOs() Get specifies that this profile will be activated when this System property is specified. -- ActivationProperty getProperty() Get flag specifying whether this profile is active as a default. -- boolean isActiveByDefault() Set flag specifying whether this profile is active as a default. -- void setActiveByDefault( boolean ) Set specifies that this profile will be activated based on existence of a file. -- void setFile( ActivationFile ) Set specifies that this profile will be activated when a matching JDK is detected. -- void setJdk( String ) Set specifies that this profile will be activated when matching OS attributes are detected. -- void setOs( ActivationOS ) Set specifies that this profile will be activated when this System property is specified. -- void setProperty( ActivationProperty )
-----------/ - Methods -/ -----------/ Method clone. -- ActivationFile clone() Get the name of the file that should exist to activate a profile. -- String getExists() Get the name of the file that should be missing to activate a profile. -- String getMissing() Set the name of the file that should exist to activate a profile. -- void setExists( String ) Set the name of the file that should be missing to activate a profile. -- void setMissing( String )
-----------/ - Methods -/ -----------/ Method clone. -- ActivationOS clone() Get the architecture of the OS to be used to activate a profile. -- String getArch() Get the general family of the OS to be used to activate a profile (e.g. 'windows'). -- String getFamily() Get the name of the OS to be used to activate a profile. -- String getName() Get the version of the OS to be used to activate a profile. -- String getVersion() Set the architecture of the OS to be used to activate a profile. -- void setArch( String ) Set the general family of the OS to be used to activate a profile (e.g. 'windows'). -- void setFamily( String ) Set the name of the OS to be used to activate a profile. -- void setName( String ) Set the version of the OS to be used to activate a profile. -- void setVersion( String )
-----------/ - Methods -/ -----------/ Method clone. -- ActivationProperty clone() Get the name of the property to be used to activate a profile. -- String getName() Get the value of the property to be used to activate a profile. -- String getValue() Set the name of the property to be used to activate a profile. -- void setName( String ) Set the value of the property to be used to activate a profile. -- void setValue( String )
{@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc } {@inheritDoc }





Deploy an artifact from a particular file. Deploy an artifact from a particular directory. The artifact handler is used to determine the filename of the source file.






Exclude an extension artifact (doesn't affect getArtifactFilter's result, only getExtensionArtifactFilter). Returns a filter for core + extension artifacts. Returns a filter for only the core artifacts.





Install an artifact from a particular file. Install an artifact from a particular directory. The artifact handler is used to determine the filename of the source file.




New interface methods for the repository system.   Finds the versions of the specified artifact that are available in this repository.    Indicates whether this repository is backed by actual projects. For instance, the build reactor or IDE workspace are examples of such repositories.






Gets the artifact filter that controls traversal of the dependency graph. Gets the artifact filter that controls downloading of artifact files. This filter operates on those artifacts that have been included by the {@link #getCollectionFilter()}.  Used by Tycho and will break users and force them to upgrade to Maven 3.1 so we should really leave this here, possibly indefinitely.
TODO this needs to accept a {@link OverConstrainedVersionException} as returned by {@link #getVersionRangeViolation(int)} but it's not used like that in DefaultLegacyArtifactCollector ------------------------------------------------------------------------ Repositories ------------------------------------------------------------------------ ------------------------------------------------------------------------ Circular Dependency Exceptions ------------------------------------------------------------------------ ------------------------------------------------------------------------ ErrorArtifactExceptions: ArtifactResolutionExceptions ------------------------------------------------------------------------ ------------------------------------------------------------------------ Exceptions ------------------------------------------------------------------------ ------------------------------------------------------------------------ Metadata Resolution Exceptions: ArtifactResolutionExceptions ------------------------------------------------------------------------ ------------------------------------------------------------------------ Version Range Violations ------------------------------------------------------------------------  Internal
USED BY REMOTE RESOURCES PLUGIN, DEPENDENCY PLUGIN, SHADE PLUGIN USED BY REMOTE RESOURCES PLUGIN USED BY DEPENDENCY PLUGIN, ARCHETYPE DOWNLOADER USED BY INVOKER PLUGIN USED BY MAVEN ASSEMBLY PLUGIN USED BY MAVEN ASSEMBLY PLUGIN USED BY SUREFIRE, DEPENDENCY PLUGIN
Helper method to simplify null processing scope relationship function. Used by the graph conflict resolution policies

Returns the request type.   Sets the request type


The size of the artifact in bytes. The path of the artifact relative to the repository's base URL. The base URL of the repository, e.g. "http://repo1.maven.org/maven2/". Unless the URL is unknown, it will be terminated by a trailing slash. Gets the timestamp when the transfer of this artifact was started. Gets the full URL of the artifact.
Take in a artifact and return the transformed artifact for distributing to remote repository. If no transformation has occurred the original artifact is returned. Take in a artifact and return the transformed artifact for locating in the local repository. If no transformation has occurred the original artifact is returned. Take in a artifact and return the transformed artifact for locating in the remote repository. If no transformation has occurred the original artifact is returned. Take in a artifact and return the transformed artifact for locating in the remote repository. If no transformation has occurred the original artifact is returned.
Take in a artifact and return the transformed artifact for distributing to a remote repository. If no transformation has occurred the original artifact is returned. Take in a artifact and return the transformed artifact for locating in the local repository. If no transformation has occurred the original artifact is returned. Take in a artifact and return the transformed artifact for locating in the remote repository. If no transformation has occurred the original artifact is returned. Take in a artifact and return the transformed artifact for locating in the remote repository. If no transformation has occurred the original artifact is returned.
Returns <code>to</code> collection



Get the passphrase of the private key file. The passphrase is used only when host/protocol supports authentication via exchange of private/public keys and private key was used for authentication. Get the user's password which is used when connecting to the repository. Get the absolute path to the private key file. Get the username used to access the repository. Set the passphrase of the private key file. Set the user's password which is used when connecting to the repository. Set the absolute path to private key file. Set username used to access the repository.




Translates the specified path.
Gets the bean to configure. Eventually, a valid request must have a bean set. Gets the class loader from which to load any types referenced by the configuration. If unset, the class loader of the bean class will be used. Gets the configuration to unmarshal into the bean. Returns configuration element name or {@code null}. Gets the optional path translator for configuration values unmarshalled to files. Gets the optional preprocessor for configuration values. Sets the bean to configure. Eventually, a valid request must have a bean set. Sets the class loader from which to load any types referenced by the configuration. If unset, the class loader of the bean class will be used. Sets the configuration to unmarshal into the bean. The configuration should be taken from {@link org.apache.maven.model.ConfigurationContainer#getConfiguration()} or a similar source. Fully equivalent to {@code setConfiguration(configuration, null)}. Sets the configuration to unmarshal into the bean. The configuration should be taken from {@link org.apache.maven.model.ConfigurationContainer#getConfiguration()} or a similar source. If {@code element} is not {@code null}, child configuration element with the specified name will be unmarshaled. Sets the optional path translator for configuration values unmarshalled to files. Sets the optional preprocessor for configuration values.
Preprocesses the specified bean configuration value. The optional type provided to this method is a hint (not a requirement) for the preprocessor to resolve the value to a compatible value or a (string) value than can be unmarshalled into that type. The preprocessor is not required to perform any type conversion but should rather filter out incompatible values from its result.
Performs the specified bean configuration.

-----------/ - Methods -/ -----------/ Method addExtension. -- void addExtension( Extension ) Method clone. -- Build clone() Method getExtensions. -- java.util.List<Extension> getExtensions() Get the directory where compiled application classes are placed. The default value is <code>target/classes</code>. -- String getOutputDirectory() Get this element specifies a directory containing the script sources of the project. This directory is meant to be different from the sourceDirectory, in that its contents will be copied to the output directory in most cases (since scripts are interpreted rather than compiled). The default value is <code>src/main/scripts</code>. -- String getScriptSourceDirectory() Get this element specifies a directory containing the source of the project. The generated build system will compile the sources from this directory when the project is built. The path given is relative to the project descriptor. The default value is <code>src/main/java</code>. -- String getSourceDirectory() Get the directory where compiled test classes are placed. The default value is <code>target/test-classes</code>. -- String getTestOutputDirectory() Get this element specifies a directory containing the unit test source of the project. The generated build system will compile these directories when the project is being tested. The path given is relative to the project descriptor. The default value is <code>src/test/java</code>. -- String getTestSourceDirectory() Method removeExtension. -- void removeExtension( Extension ) Set a set of build extensions to use from this project. -- void setExtensions( java.util.List ) Set the directory where compiled application classes are placed. The default value is <code>target/classes</code>. -- void setOutputDirectory( String ) Set this element specifies a directory containing the script sources of the project. This directory is meant to be different from the sourceDirectory, in that its contents will be copied to the output directory in most cases (since scripts are interpreted rather than compiled). The default value is <code>src/main/scripts</code>. -- void setScriptSourceDirectory( String ) Set this element specifies a directory containing the source of the project. The generated build system will compile the sources from this directory when the project is built. The path given is relative to the project descriptor. The default value is <code>src/main/java</code>. -- void setSourceDirectory( String ) Set the directory where compiled test classes are placed. The default value is <code>target/test-classes</code>. -- void setTestOutputDirectory( String ) Set this element specifies a directory containing the unit test source of the project. The generated build system will compile these directories when the project is being tested. The path given is relative to the project descriptor. The default value is <code>src/test/java</code>. -- void setTestSourceDirectory( String )

-----------/ - Methods -/ -----------/ Method addFilter. -- void addFilter( String ) Method addResource. -- void addResource( Resource ) Method addTestResource. -- void addTestResource( Resource ) Method clone. -- BuildBase clone() Get the default goal (or phase in Maven 2) to execute when none is specified for the project. Note that in case of a multi-module build, only the default goal of the top-level project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3, multiple goals/phases can be separated by whitespace. -- String getDefaultGoal() Get the directory where all files generated by the build are placed. The default value is <code>target</code>. -- String getDirectory() Method getFilters. -- java.util.List<String> getFilters() Get the filename (excluding the extension, and with no path information) that the produced artifact will be called. The default value is <code>${artifactId}-${version}</code>. -- String getFinalName() Method getResources. -- java.util.List<Resource> getResources() Method getTestResources. -- java.util.List<Resource> getTestResources() Method removeFilter. -- void removeFilter( String ) Method removeResource. -- void removeResource( Resource ) Method removeTestResource. -- void removeTestResource( Resource ) Set the default goal (or phase in Maven 2) to execute when none is specified for the project. Note that in case of a multi-module build, only the default goal of the top-level project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3, multiple goals/phases can be separated by whitespace. -- void setDefaultGoal( String ) Set the directory where all files generated by the build are placed. The default value is <code>target</code>. -- void setDirectory( String ) Set the list of filter properties files that are used when filtering is enabled. -- void setFilters( java.util.List ) Set the filename (excluding the extension, and with no path information) that the produced artifact will be called. The default value is <code>${artifactId}-${version}</code>. -- void setFinalName( String ) Set this element describes all of the classpath resources such as properties files associated with a project. These resources are often included in the final package. The default value is <code>src/main/resources</code>. -- void setResources( java.util.List ) Set this element describes all of the classpath resources such as properties files associated with a project's unit tests. The default value is <code>src/test/resources</code>. -- void setTestResources( java.util.List )
Gets the cause of the build failure.


igorf: Way too many declared exceptions! igorf: Way too many declared exceptions!


Gets the project being summarized. Gets the build time of the project in milliseconds.


Be nice to whittle this down to Session, maybe add task segments to the session. The session really is the the place to store reactor related information.
TODO I'm really wondering where this method belongs; smells like it should be on MavenProject, but for some reason it isn't ? This localization is kind-of a code smell.


Create a human readable string containing the Maven version, buildnumber, and time of build


-----------/ - Methods -/ -----------/ Method addNotifier. -- void addNotifier( Notifier ) Method clone. -- CiManagement clone()  -- InputLocation getLocation( Object ) Method getNotifiers. -- java.util.List<Notifier> getNotifiers() Get the name of the continuous integration system, e.g. <code>continuum</code>. -- String getSystem() Get uRL for the continuous integration system used by the project if it has a web interface. -- String getUrl() Method removeNotifier. -- void removeNotifier( Notifier )  -- void setLocation( Object, InputLocation ) Set configuration for notifying developers/users when a build is unsuccessful, including user information and notification mode. -- void setNotifiers( java.util.List ) Set the name of the continuous integration system, e.g. <code>continuum</code>. -- void setSystem( String ) Set uRL for the continuous integration system used by the project if it has a web interface. -- void setUrl( String )
Gets the artifact id of the constituent's artifact. Gets the classifier of the constituent's artifact. Gets the file of the constituent's artifact. Gets the group id of the constituent's artifact. Gets the type of the constituent's artifact. Gets the version of the constituent's artifact.
Creates a new class realm for the specified build extension. Creates a new class realm for the specified plugin. Creates a new class realm for the specified project and its build extensions. Gets the class realm hosting the Maven core. Gets the class realm exposing the Maven API. This is basically a restricted view on the Maven core realm.

Gets the constituents for the class realm. Gets the packages/types to import from foreign realms.  Gets the parent class realm (if any). Gets the packages/types to import from the parent realm. Gets the type of the class realm.

------------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------------- -------------------------------------------------------------------------------------------
Transform Graph into a Collection of metadata objects that could serve as a classpath for a particular scope


CHECKSTYLE_OFF: LineLength Main to test version parsing and comparison. <p> To check how "1.2.7" compares to "1.2-SNAPSHOT", for example, you can issue <pre>java -jar ${maven.repo.local}/org/apache/maven/maven-artifact/${maven.version}/maven-artifact-${maven.version}.jar "1.2.7" "1.2-SNAPSHOT"</pre> command to command line. Result of given command will be something like this: <pre> Display parameters as parsed by Maven (in canonical form) and comparison result: 1. 1.2.7 == 1.2.7 1.2.7 &gt; 1.2-SNAPSHOT 2. 1.2-SNAPSHOT == 1.2-snapshot </pre> CHECKSTYLE_ON: LineLength





For the given {@link MavenProject} {@code p} return {@code p}'s uncompleted dependencies. For the given {@link MavenProject} {@code p}, return all of {@code p}'s dependencies.  Gets all the builds that have no reactor-dependencies  Marks the provided project as finished. Returns a list of
-----------/ - Methods -/ -----------/ Method clone. -- ConfigurationContainer clone() Get <p>The configuration as DOM object.</p> <p>By default, every element content is trimmed, but starting with Maven 3.1.0, you can add <code>xml:space="preserve"</code> to elements you want to preserve whitespace.</p> <p>You can control how child POMs inherit configuration from parent POMs by adding <code>combine.children</code> or <code>combine.self</code> attributes to the children of the configuration element:</p> <ul> <li><code>combine.children</code>: available values are <code>merge</code> (default) and <code>append</code>,</li> <li><code>combine.self</code>: available values are <code>merge</code> (default) and <code>override</code>.</li> </ul> <p>See <a href="https://maven.apache.org/pom.html#Plugins">POM Reference documentation</a> and <a href="https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html">Xpp3DomUtils</a> for more information.</p> -- Object getConfiguration() Get whether any configuration should be propagated to child POMs. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>true</code>. -- String getInherited()  -- InputLocation getLocation( Object ) Set <p>The configuration as DOM object.</p> <p>By default, every element content is trimmed, but starting with Maven 3.1.0, you can add <code>xml:space="preserve"</code> to elements you want to preserve whitespace.</p> <p>You can control how child POMs inherit configuration from parent POMs by adding <code>combine.children</code> or <code>combine.self</code> attributes to the children of the configuration element:</p> <ul> <li><code>combine.children</code>: available values are <code>merge</code> (default) and <code>append</code>,</li> <li><code>combine.self</code>: available values are <code>merge</code> (default) and <code>override</code>.</li> </ul> <p>See <a href="https://maven.apache.org/pom.html#Plugins">POM Reference documentation</a> and <a href="https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html">Xpp3DomUtils</a> for more information.</p> -- void setConfiguration( Object ) Set whether any configuration should be propagated to child POMs. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>true</code>. -- void setInherited( String )  -- void setLocation( Object, InputLocation )

Determines which of the specified versions of an artifact to use when there are conflicting declarations.
methods ---------------------------------------------------------------- Gets a conflict resolver of the specified type.




Set a new shared context <code>Map</code> to a mojo before executing it.
-----------/ - Methods -/ -----------/ Method addProperty. -- void addProperty( String, String ) Method addRole. -- void addRole( String ) Method clone. -- Contributor clone() Get the email address of the contributor. -- String getEmail()  -- InputLocation getLocation( Object ) Get the full name of the contributor. -- String getName() Get the organization to which the contributor belongs. -- String getOrganization() Get the URL of the organization. -- String getOrganizationUrl() Method getProperties. -- java.util.Properties getProperties() Method getRoles. -- java.util.List<String> getRoles() Get the timezone the contributor is in. Typically, this is a number in the range <a href="http://en.wikipedia.org/wiki/UTC%E2%88%9212:00">-12</a> to <a href="http://en.wikipedia.org/wiki/UTC%2B14:00">+14</a> or a valid time zone id like "America/Montreal" (UTC-05:00) or "Europe/Paris" (UTC+01:00). -- String getTimezone() Get the URL for the homepage of the contributor. -- String getUrl() Method removeRole. -- void removeRole( String ) Set the email address of the contributor. -- void setEmail( String )  -- void setLocation( Object, InputLocation ) Set the full name of the contributor. -- void setName( String ) Set the organization to which the contributor belongs. -- void setOrganization( String ) Set the URL of the organization. -- void setOrganizationUrl( String ) Set properties about the contributor, such as an instant messenger handle. -- void setProperties( java.util.Properties ) Set the roles the contributor plays in the project. Each role is described by a <code>role</code> element, the body of which is a role name. This can also be used to describe the contribution. -- void setRoles( java.util.List ) Set the timezone the contributor is in. Typically, this is a number in the range <a href="http://en.wikipedia.org/wiki/UTC%E2%88%9212:00">-12</a> to <a href="http://en.wikipedia.org/wiki/UTC%2B14:00">+14</a> or a valid time zone id like "America/Montreal" (UTC-05:00) or "Europe/Paris" (UTC+01:00). -- void setTimezone( String ) Set the URL for the homepage of the contributor. -- void setUrl( String )
Returns artifacts exported by Maven core and core extensions. Artifacts are identified by their groupId:artifactId string key. Returns packages exported by Maven core and core extensions.

-----------/ - Methods -/ -----------/ Get the artifact ID of the extension. -- String getArtifactId() Get the group ID of the extension's artifact. -- String getGroupId() Get the version of the extension. -- String getVersion() Set the artifact ID of the extension. -- void setArtifactId( String ) Set the group ID of the extension's artifact. -- void setGroupId( String ) Set the version of the extension. -- void setVersion( String )
Returns ClassLoader used to load extension classes. Returns artifacts exported by the extension, identified by groupId:artifactId string key. Returns classpath elements exported by the extension.
-----------/ - Methods -/ -----------/ Method addExtension. -- void addExtension( CoreExtension ) Method getExtensions. -- java.util.List<CoreExtension> getExtensions() Get the modelEncoding field. -- String getModelEncoding() Method removeExtension. -- void removeExtension( CoreExtension ) Set a set of build extensions to use from this project. -- void setExtensions( java.util.List ) Set the modelEncoding field. -- void setModelEncoding( String )
-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseCoreExtension. -- CoreExtension parseCoreExtension( XmlPullParser, boolean ) Method parseCoreExtensions. -- CoreExtensions parseCoreExtensions( XmlPullParser, boolean ) Method read. -- CoreExtensions read( InputStream ) Method read. -- CoreExtensions read( InputStream, boolean )  -- CoreExtensions read( Reader )  -- CoreExtensions read( Reader, boolean ) Method read. -- CoreExtensions read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, CoreExtensions ) Method write. -- void write( Writer, CoreExtensions ) Method writeCoreExtension. -- void writeCoreExtension( CoreExtension, String, XmlSerializer ) Method writeCoreExtensions. -- void writeCoreExtensions( CoreExtensions, String, XmlSerializer )



Creates a human-friendly string representation of the specified object.
The logic used here used to be a copy of the logic used in the DefaultArtifactCollector, and this method was called right before the actual version/artifactScope changes were done. However, a different set of conditionals (and more information) is needed to be able to determine when and if the version and/or artifactScope changes. See the two added methods, manageArtifactVersion and manageArtifactScope.
----------------------------------------------------------------------  ---------------------------------------------------------------------- ---------------------------------------------------------------------- Object overrides ----------------------------------------------------------------------




Returns the artifact filter for the core + extension artifacts. Returns the artifact filter for the standard core artifacts.





------------------------------------------------------------------------  ------------------------------------------------------------------------


Sets the configuration to the configuration taken from the specified build plugin in the POM. First, the build plugins will be searched for the specified plugin, if that fails, the plugin management section will be searched.

---------------------------------------------------------------------- Mojo execution ---------------------------------------------------------------------- TODO pluginDescriptor classRealm and artifacts are set as a side effect of this call, which is not nice.
Creates a new class realm with the specified parent and imports.

----------------------------------------------------------------------------------------------------

Contextualizable methods ----------------------------------------------- @see org.codehaus.plexus.personality.plexus.lifecycle.phase.Contextualizable#contextualize(org.codehaus.plexus.context.Context) ConflictResolverFactory methods ---------------------------------------- @see org.apache.maven.artifact.resolver.conflict.ConflictResolverFactory#getConflictResolver(java.lang.String)









////////////////////////////////////////////////////////////////////////////////////////////////////////////////  Project collection  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------- -------------------------------------------------------------------------------------
Calculates the relative path from the base directory of the parent to the parent directory of the base directory of the child. The general idea is to adjust inherited URLs to match the project layout (in SCM). <p>This calculation is only a heuristic based on our conventions. In detail, the algo relies on the following assumptions: <ul> <li>The parent uses aggregation and refers to the child via the modules section</li> <li>The module path to the child is considered to point at the POM rather than its base directory if the path ends with ".xml" (ignoring case)</li> <li>The name of the child's base directory matches the artifact id of the child.</li> </ul> Note that for the sake of independence from the user environment, the filesystem is intentionally not used for the calculation.</p>

Check if the artifactScope needs to be updated. <a href="http://docs.codehaus.org/x/IGU#DependencyMediationandConflictResolution-Scoperesolution">More info</a>. Get the map of managed versions, removing the originating artifact if it is also in managed versions


org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process TODO take repo mans into account as one may be aggregating prefixes of many TODO collect at the root of the repository, read the one at the root, and fetch remote if something is missing or the user forces the issue Post-processes the effective configuration for the specified mojo execution. This step discards all parameters from the configuration that are not applicable to the mojo and injects the default values for any missing parameters.
Used by m2eclipse Site 3.x Site 3.x NOTE: Backward-compat with maven-help-plugin:2.1 USED BY MAVEN HELP PLUGIN These methods deal with construction intact Plugin object that look like they come from a standard <plugin/> block in a Maven POM. We have to do some wiggling to pull the sources of information together and this really shows the problem of constructing a sensible default configuration but it's all encapsulated here so it appears normalized to the POM builder. We are going to take the project packaging and find all plugin in the default lifecycle and create fully populated Plugin objects, including executions with goals and default configuration taken from the plugin.xml inside a plugin.  TODO This whole method could probably removed by injecting lifeCyclePluginAnalyzer straight into client site. TODO But for some reason the whole plexus appcontext refuses to start when I try this.
Populates the lifecycle map from the injected list of lifecycle mappings (if not already done).

These methods deal with construction intact Plugin object that look like they come from a standard <plugin/> block in a Maven POM. We have to do some wiggling to pull the sources of information together and this really shows the problem of constructing a sensible default configuration but it's all encapsulated here so it appears normalized to the POM builder. We are going to take the project packaging and find all plugins in the default lifecycle and create fully populated Plugin objects, including executions with goals and default configuration taken from the plugin.xml inside a plugin.

We use this to map all phases to the lifecycle that contains it. This is used so that a user can specify the phase they want to execute and we can easily determine what lifecycle we need to run.


1) Setup initial properties.  2) Validate local repository directory is accessible.  3) Create RepositorySystemSession.  4) Create MavenSession.  5) Execute AbstractLifecycleParticipant.afterSessionStart(session)  6) Get reactor projects looking for general POM errors  7) Create ProjectDependencyGraph using trimming which takes into account --projects and reactor mode. This ensures that the projects passed into the ReactorReader are only those specified.  8) Create ReactorReader with the getProjectMap( projects ). NOTE that getProjectMap(projects) is the code that checks for duplicate projects definitions in the build. Ideally this type of duplicate checking should be part of getting the reactor projects in 6). The duplicate checking is conflated with getProjectMap(projects).  9) Execute AbstractLifecycleParticipant.afterProjectsRead(session)  10) Create ProjectDependencyGraph without trimming (as trimming was done in 7). A new topological sort is required after the execution of 9) as the AbstractLifecycleParticipants are free to mutate the MavenProject instances, which may change dependencies which can, in turn, affect the build order.  11) Execute LifecycleStarter.start()  5 January 2014
TODO this does not belong here. ---------------------------------------------------------------------------- Settings equivalents ---------------------------------------------------------------------------- Settings files ----------------------------------------------------------------------  ----------------------------------------------------------------------
------------------------------------------------------------------------ Artifact Transfer Mechanism ------------------------------------------------------------------------    if_not[MAVEN4]




This is used by the SITE plugin. This is used for pom-less execution like running archetype:generate. I am taking out the profile handling and the interpolation of the base directory until we spec this out properly. ---------------------------------------------------------------------- MavenProjectBuilder Implementation ----------------------------------------------------------------------
Add an attached artifact or replace the file for an existing artifact.




Checks the URL to see if this repository refers to an external repository This method checks if the pattern matches the originalRepository. Valid patterns: * = everything external:* = everything not on the localhost and not file based. repo,repo1 = repo or repo1 *,!repo1 = everything except repo1 Checks whether the layouts configured for a mirror match with the layout of the repository.

Creates a new model builder instance.

Gets the project whose model is being built.



TODO This should eventually be migrated to DefaultPathTranslator. TODO Remove this! TODO Remove this! TODO Remove this! TODO Move this to plexus-utils' PathTool.









---------------------------------------------------------------------- Field validation ---------------------------------------------------------------------- Asserts: <p/> <ul> <li><code>string != null</code> </ul> Asserts: <p/> <ul> <li><code>string != null</code> <li><code>string.length > 0</code> </ul>


















Sets the identifiers of those profiles that should be activated by explicit demand. Sets the identifiers of those profiles that should be deactivated by explicit demand. Sets the base directory of the current project. Sets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Sets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Sets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Sets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line.

(non-Javadoc) @see org.apache.maven.profiles.ProfileManager#addProfile(org.apache.maven.model.Profile) (non-Javadoc) @see org.apache.maven.profiles.ProfileManager#addProfiles(java.util.List) (non-Javadoc) @see org.apache.maven.profiles.ProfileManager#explicitlyActivate(java.lang.String) (non-Javadoc) @see org.apache.maven.profiles.ProfileManager#explicitlyActivate(java.util.List) (non-Javadoc) @see org.apache.maven.profiles.ProfileManager#explicitlyDeactivate(java.lang.String) (non-Javadoc) @see org.apache.maven.profiles.ProfileManager#explicitlyDeactivate(java.util.List) (non-Javadoc) @see org.apache.maven.profiles.ProfileManager#getActiveProfiles()



---------------------------------------------------------------------- MavenProjectBuilder Implementation ----------------------------------------------------------------------










Ensures the last updated timestamp of the specified metadata does not refer to the future and fixes the local metadata if necessary to allow proper merging/updating of metadata during deployment. TODO share with DefaultPluginMappingManager.





Creates a new settings builder instance.








Asserts: <p/> <ul> <li><code>string != null</code> </ul> ---------------------------------------------------------------------- Field validation ---------------------------------------------------------------------- Asserts: <p/> <ul> <li><code>string.length != null</code> <li><code>string.length > 0</code> </ul>

















-----------/ - Methods -/ -----------/ Method addExclusion. -- void addExclusion( Exclusion ) Method clone. -- Dependency clone() Get the unique id for an artifact produced by the project group, e.g. <code>maven-artifact</code>. -- String getArtifactId() Get the classifier of the dependency. It is appended to the filename after the version. This allows: <ul> <li>referring to attached artifact, for example <code>sources</code> and <code>javadoc</code>: see <a href="../maven-core/artifact-handlers.html">default artifact handlers</a> for a list,</li> <li>distinguishing two artifacts that belong to the same POM but were built differently. For example, <code>jdk14</code> and <code>jdk15</code>.</li> </ul> -- String getClassifier() Method getExclusions. -- java.util.List<Exclusion> getExclusions() Get the project group that produced the dependency, e.g. <code>org.apache.maven</code>. -- String getGroupId()  -- InputLocation getLocation( Object )  Get indicates the dependency is optional for use of this library. While the version of the dependency will be taken into account for dependency calculation if the library is used elsewhere, it will not be passed on transitively. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>false</code>. -- String getOptional() Get the scope of the dependency - <code>compile</code>, <code>runtime</code>, <code>test</code>, <code>system</code>, and <code>provided</code>. Used to calculate the various classpaths used for compilation, testing, and so on. It also assists in determining which artifacts to include in a distribution of this project. For more information, see <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the dependency mechanism</a>. The default scope is <code>compile</code>. -- String getScope() Get fOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b> and may be replaced in later versions. This specifies the path on the filesystem for this dependency. Requires an absolute path for the value, not relative. Use a property that gives the machine specific absolute path, e.g. <code>${java.home}</code>. -- String getSystemPath() Get the type of dependency. While it usually represents the extension on the filename of the dependency, that is not always the case. A type can be mapped to a different extension and a classifier. The type often corresponds to the packaging used, though this is also not always the case. Some examples are <code>jar</code>, <code>war</code>, <code>ejb-client</code> and <code>test-jar</code>: see <a href="../maven-core/artifact-handlers.html">default artifact handlers</a> for a list. New types can be defined by plugins that set <code>extensions</code> to <code>true</code>, so this is not a complete list. -- String getType() Get the version of the dependency, e.g. <code>3.2.1</code>. In Maven 2, this can also be specified as a range of versions. -- String getVersion() Method removeExclusion. -- void removeExclusion( Exclusion ) Set the unique id for an artifact produced by the project group, e.g. <code>maven-artifact</code>. -- void setArtifactId( String ) Set the classifier of the dependency. It is appended to the filename after the version. This allows: <ul> <li>referring to attached artifact, for example <code>sources</code> and <code>javadoc</code>: see <a href="../maven-core/artifact-handlers.html">default artifact handlers</a> for a list,</li> <li>distinguishing two artifacts that belong to the same POM but were built differently. For example, <code>jdk14</code> and <code>jdk15</code>.</li> </ul> -- void setClassifier( String ) Set lists a set of artifacts that should be excluded from this dependency's artifact list when it comes to calculating transitive dependencies. -- void setExclusions( java.util.List ) Set the project group that produced the dependency, e.g. <code>org.apache.maven</code>. -- void setGroupId( String )  -- void setLocation( Object, InputLocation ) Set indicates the dependency is optional for use of this library. While the version of the dependency will be taken into account for dependency calculation if the library is used elsewhere, it will not be passed on transitively. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>false</code>. -- void setOptional( String ) Set the scope of the dependency - <code>compile</code>, <code>runtime</code>, <code>test</code>, <code>system</code>, and <code>provided</code>. Used to calculate the various classpaths used for compilation, testing, and so on. It also assists in determining which artifacts to include in a distribution of this project. For more information, see <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the dependency mechanism</a>. The default scope is <code>compile</code>. -- void setScope( String ) Set fOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b> and may be replaced in later versions. This specifies the path on the filesystem for this dependency. Requires an absolute path for the value, not relative. Use a property that gives the machine specific absolute path, e.g. <code>${java.home}</code>. -- void setSystemPath( String ) Set the type of dependency. While it usually represents the extension on the filename of the dependency, that is not always the case. A type can be mapped to a different extension and a classifier. The type often corresponds to the packaging used, though this is also not always the case. Some examples are <code>jar</code>, <code>war</code>, <code>ejb-client</code> and <code>test-jar</code>: see <a href="../maven-core/artifact-handlers.html">default artifact handlers</a> for a list. New types can be defined by plugins that set <code>extensions</code> to <code>true</code>, so this is not a complete list. -- void setType( String ) Set the version of the dependency, e.g. <code>3.2.1</code>. In Maven 2, this can also be specified as a range of versions. -- void setVersion( String )

-----------/ - Methods -/ -----------/ Method addDependency. -- void addDependency( Dependency ) Method clone. -- DependencyManagement clone() Method getDependencies. -- java.util.List<Dependency> getDependencies()  -- InputLocation getLocation( Object ) Method removeDependency. -- void removeDependency( Dependency ) Set the dependencies specified here are not used until they are referenced in a POM within the group. This allows the specification of a "standard" version for a particular dependency. -- void setDependencies( java.util.List )  -- void setLocation( Object, InputLocation )
Imports the specified dependency management sections into the given target model.
Merges default values from the dependency management section of the given model into itself.

Gets the project to resolve dependencies for. Gets the session to use for repository access. Gets the filter used to exclude some dependencies from resolution. Sets the project to resolve dependencies for. Sets the session to use for repository access. Sets the filter used to exclude some dependencies from resolution. Note that this filter only controls the resolution/download of dependency artifacts, not the inclusion of dependency nodes in the resolved dependency graph.

Gets the errors that occurred while building the dependency graph. Gets the transitive dependencies of the project that were not excluded by {@link DependencyResolutionRequest#getResolutionFilter()}. This list is a union of the results from {@link #getResolvedDependencies()} and {@link #getUnresolvedDependencies()}. Gets the dependency graph of the project. Gets the errors that occurred while resolving the specified dependency. Gets the dependencies that were successfully resolved. Gets the dependencies that could not be resolved.
-----------/ - Methods -/ -----------/ Method clone. -- DeploymentRepository clone() Get whether to assign snapshots a unique version comprised of the timestamp and build number, or to use the same version each time. -- boolean isUniqueVersion() Set whether to assign snapshots a unique version comprised of the timestamp and build number, or to use the same version each time. -- void setUniqueVersion( boolean )

-----------/ - Methods -/ -----------/ Method clone. -- Developer clone() Get the unique ID of the developer in the SCM. -- String getId() Set the unique ID of the developer in the SCM. -- void setId( String )
-----------/ - Methods -/ -----------/ Method clone. -- DistributionManagement clone() Get the URL of the project's download page. If not given users will be referred to the homepage given by <code>url</code>. This is given to assist in locating artifacts that are not in the repository due to licensing restrictions. -- String getDownloadUrl()  -- InputLocation getLocation( Object ) Get relocation information of the artifact if it has been moved to a new group ID and/or artifact ID. -- Relocation getRelocation() Get information needed to deploy the artifacts generated by the project to a remote repository. -- DeploymentRepository getRepository() Get information needed for deploying the web site of the project. -- Site getSite() Get where to deploy snapshots of artifacts to. If not given, it defaults to the <code>repository</code> element. -- DeploymentRepository getSnapshotRepository() Get gives the status of this artifact in the remote repository. This must not be set in your local project, as it is updated by tools placing it in the reposiory. Valid values are: <code>none</code> (default), <code>converted</code> (repository manager converted this from an Maven 1 POM), <code>partner</code> (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2 instance), <code>verified</code> (has been hand verified as correct and final). -- String getStatus() Set the URL of the project's download page. If not given users will be referred to the homepage given by <code>url</code>. This is given to assist in locating artifacts that are not in the repository due to licensing restrictions. -- void setDownloadUrl( String )  -- void setLocation( Object, InputLocation ) Set relocation information of the artifact if it has been moved to a new group ID and/or artifact ID. -- void setRelocation( Relocation ) Set information needed to deploy the artifacts generated by the project to a remote repository. -- void setRepository( DeploymentRepository ) Set information needed for deploying the web site of the project. -- void setSite( Site ) Set where to deploy snapshots of artifacts to. If not given, it defaults to the <code>repository</code> element. -- void setSnapshotRepository( DeploymentRepository ) Set gives the status of this artifact in the remote repository. This must not be set in your local project, as it is updated by tools placing it in the reposiory. Valid values are: <code>none</code> (default), <code>converted</code> (repository manager converted this from an Maven 1 POM), <code>partner</code> (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2 instance), <code>verified</code> (has been hand verified as correct and final). -- void setStatus( String )



Gets the POM files of the projects that collided.



Adds the environment variables in the form of properties whose keys are prefixed with {@code env.}, e.g. {@code env.PATH}. Unlike native environment variables, properties are always case-sensitive. For the sake of determinism, the environment variable names will be normalized to upper case on platforms with case-insensitive variable lookup.


Notifies the spy of Maven's termination, allowing it to free any resources allocated by it. Initializes the spy. Notifies the spy of some build event/operation.






-----------/ - Methods -/ -----------/ Method clone. -- Exclusion clone() Get the artifact ID of the project to exclude. -- String getArtifactId() Get the group ID of the project to exclude. -- String getGroupId()  -- InputLocation getLocation( Object ) Set the artifact ID of the project to exclude. -- void setArtifactId( String ) Set the group ID of the project to exclude. -- void setGroupId( String )  -- void setLocation( Object, InputLocation )

-----------/ - Methods -/ -----------/ Method addGoal. -- void addGoal( String ) Get configuration to pass to the goals. -- Object getConfiguration() Method getGoals. -- java.util.List<String> getGoals() Method removeGoal. -- void removeGoal( String ) Set configuration to pass to the goals. -- void setConfiguration( Object ) Set the goals to execute. -- void setGoals( java.util.List )
Gets the exception that caused the event (if any). Gets the current mojo execution (if any). Gets the current project (if any). Gets the session from which this event originates. Gets the type of the event.


CHECKSTYLE_OFF: LineLength <pre>&gt;&gt;&gt; mojo-artifactId:version:goal (mojo-executionId) &gt; :forked-goal @ project-artifactId &gt;&gt;&gt;</pre> <pre>&gt;&gt;&gt; mojo-artifactId:version:goal (mojo-executionId) &gt; [lifecycle]phase @ project-artifactId &gt;&gt;&gt;</pre> CHECKSTYLE_ON: LineLength CHECKSTYLE_OFF: LineLength <pre>&lt;&lt;&lt; mojo-artifactId:version:goal (mojo-executionId) &lt; :forked-goal @ project-artifactId &lt;&lt;&lt;</pre> <pre>&lt;&lt;&lt; mojo-artifactId:version:goal (mojo-executionId) &lt; [lifecycle]phase @ project-artifactId &lt;&lt;&lt;</pre> CHECKSTYLE_ON: LineLength <pre>--- mojo-artifactId:version:goal (mojo-executionId) @ project-artifactId ---</pre>


-----------/ - Methods -/ -----------/ Method addApiMethod. -- void addApiMethod( String, String ) Method addCliOption. -- void addCliOption( String, String ) Method getApiMethods. -- java.util.Properties getApiMethods() Get a preferred alternative to this expression, in the case where it's banned from use. -- String getBan() Method getCliOptions. -- java.util.Properties getCliOptions() Get the place and syntax used to change the value of this expression. -- String getConfiguration() Get a preferred alternative to this expression, in the case where it's deprecated. -- String getDeprecation() Get the description of what this expression references, and what it's generally used for. -- String getDescription() Get the syntax of the expression. -- String getSyntax() Get whether the value of this expression can be changed. -- boolean isEditable() Set the programmatic methods used to change the value of this expression. -- void setApiMethods( java.util.Properties ) Set a preferred alternative to this expression, in the case where it's banned from use. -- void setBan( String ) Set the command-line switches used to change the value of this expression. -- void setCliOptions( java.util.Properties ) Set the place and syntax used to change the value of this expression. -- void setConfiguration( String ) Set a preferred alternative to this expression, in the case where it's deprecated. -- void setDeprecation( String ) Set the description of what this expression references, and what it's generally used for. -- void setDescription( String ) Set whether the value of this expression can be changed. -- void setEditable( boolean ) Set the syntax of the expression. -- void setSyntax( String )
-----------/ - Methods -/ -----------/ Method addExpression. -- void addExpression( Expression ) Method getExpressions. -- java.util.List<Expression> getExpressions() Get the modelEncoding field. -- String getModelEncoding() Method removeExpression. -- void removeExpression( Expression ) Set the list of plugin parameter expressions described by this document. -- void setExpressions( java.util.List ) Set the modelEncoding field. -- void setModelEncoding( String )

<expressions> <expression> <syntax>project.distributionManagementArtifactRepository</syntax> <origin><![CDATA[ <distributionManagement> <repository> <id>some-repo</id> <url>scp://host/path</url> </repository> <snapshotRepository> <id>some-snap-repo</id> <url>scp://host/snapshot-path</url> </snapshotRepository> </distributionManagement> ]]></origin> <usage><![CDATA[ The repositories onto which artifacts should be deployed. One is for releases, the other for snapshots. ]]></usage> </expression> <expressions>
-----------/ - Methods -/ -----------/ Method clone. -- Extension clone()  Get the artifact ID of the extension. -- String getArtifactId() Get the group ID of the extension's artifact. -- String getGroupId()  -- InputLocation getLocation( Object ) Get the version of the extension. -- String getVersion()  Set the artifact ID of the extension. -- void setArtifactId( String ) Set the group ID of the extension's artifact. -- void setGroupId( String )  -- void setLocation( Object, InputLocation ) Set the version of the extension. -- void setVersion( String )

Extracts the extension descriptor (if any) from the specified JAR file.
Registers the specified cache record for usage with the given project. Integrators can use the information collected from this method in combination with a custom cache implementation to dispose unused records from the cache.
ConflictResolver methods ----------------------------------------------- @see org.apache.maven.artifact.resolver.conflict.ConflictResolver#resolveConflict(org.apache.maven.artifact.resolver.ResolutionNode, org.apache.maven.artifact.resolver.ResolutionNode)


-----------/ - Methods -/ -----------/ Method clone. -- FileSet clone() Get describe the directory where the resources are stored. The path is relative to the POM. -- String getDirectory() Set describe the directory where the resources are stored. The path is relative to the POM. -- void setDirectory( String )
Gets the settings file of this model source.
Gets the file of this source.







Cleanses the supplied graph by leaving only one directed versioned edge\ between any two nodes, if multiple exists. Uses scope relationships, defined in <code>ArtifactScopeEnum</code>

-----------/ - Methods -/ -----------/ Method clone. -- IdentifiableBase clone() Get the id field. -- String getId() Set the id field. -- void setId( String )

Merges values from the specified parent model into the given child model. Implementations are expected to keep parent and child completely decoupled by injecting deep copies of objects into the child rather than the original objects from the parent.
-----------/ - Methods -/ -----------/ Method clone. -- InputLocation clone() Get the one-based column number. The value will be non-positive if unknown. -- int getColumnNumber() Get the one-based line number. The value will be non-positive if unknown. -- int getLineNumber()  -- InputLocation getLocation( Object )  -- java.util.Map<Object, InputLocation> getLocations() Get the source field. -- InputSource getSource() Method merge. -- InputLocation merge( InputLocation, InputLocation, boolean ) Method merge. -- InputLocation merge( InputLocation, InputLocation, java.util.Collection )  -- void setLocation( Object, InputLocation )  -- void setLocations( java.util.Map )
-----------/ - Methods -/ -----------/ Gets the location of the specified field in the input source. Sets the location of the specified field.
-----------/ - Methods -/ -----------/ Method clone. -- InputSource clone() Get the path/URL of the POM or {@code null} if unknown. -- String getLocation() Get the identifier of the POM in the format {@code <groupId>:<artifactId>:<version>}. -- String getModelId() Set the path/URL of the POM or {@code null} if unknown. -- void setLocation( String ) Set the identifier of the POM in the format {@code <groupId>:<artifactId>:<version>}. -- void setModelId( String )











-----------/ - Methods -/ -----------/ Method clone. -- IssueManagement clone()  -- InputLocation getLocation( Object ) Get the name of the issue management system, e.g. Bugzilla. -- String getSystem() Get uRL for the issue management system used by the project. -- String getUrl()  -- void setLocation( Object, InputLocation ) Set the name of the issue management system, e.g. Bugzilla. -- void setSystem( String ) Set uRL for the issue management system used by the project. -- void setUrl( String )






used by maven-dependency-tree and maven-dependency-plugin


Artifact Repository Creation  public void addProxy( String protocol, String host, int port, String username, String password, String nonProxyHosts ) { ProxyInfo proxyInfo = new ProxyInfo(); proxyInfo.setHost( host ); proxyInfo.setType( protocol ); proxyInfo.setPort( port ); proxyInfo.setNonProxyHosts( nonProxyHosts ); proxyInfo.setUserName( username ); proxyInfo.setPassword( password );  proxies.put( protocol, proxyInfo );  wagonManager.addProxy( protocol, host, port, username, password, nonProxyHosts ); }
Gets the currently active repository session. Gets the currently active session. Sets the currently active session. Some legacy components are basically stateful and their API is missing parameters that would be required to delegate to a stateless component. Saving the session (in a thread-local variable) is our best effort to record any state that is required to enable proper delegation.
-----------/ - Methods -/ -----------/ Method clone. -- License clone() Get addendum information pertaining to this license. -- String getComments() Get the primary method by which this project may be distributed. <dl> <dt>repo</dt> <dd>may be downloaded from the Maven repository</dd> <dt>manual</dt> <dd>user must manually download and install the dependency.</dd> </dl> -- String getDistribution()  -- InputLocation getLocation( Object ) Get the full legal name of the license. -- String getName() Get the official url for the license text. -- String getUrl() Set addendum information pertaining to this license. -- void setComments( String ) Set the primary method by which this project may be distributed. <dl> <dt>repo</dt> <dd>may be downloaded from the Maven repository</dd> <dt>manual</dt> <dd>user must manually download and install the dependency.</dd> </dl> -- void setDistribution( String )  -- void setLocation( Object, InputLocation ) Set the full legal name of the license. -- void setName( String ) Set the official url for the license text. -- void setUrl( String )



Injects plugin executions induced by lifecycle bindings into the specified model. The model has already undergone injection of plugin management so any plugins that are injected by lifecycle bindings and are not already present in the model's plugin section need to be subjected to the model's plugin management.
-----------/ - Methods -/ -----------/ Method addLifecycle. -- void addLifecycle( Lifecycle ) Method getLifecycles. -- java.util.List<Lifecycle> getLifecycles() Get the modelEncoding field. -- String getModelEncoding() Method removeLifecycle. -- void removeLifecycle( Lifecycle ) Set the lifecycles field. -- void setLifecycles( java.util.List ) Set the modelEncoding field. -- void setModelEncoding( String )





used by the site plugin 3.x used by the site plugin 3.x For a given project packaging find all the plugins that are bound to any registered lifecycles. The project builder needs to now what default plugin information needs to be merged into POM being built. Once the POM builder has this plugin information, versions can be assigned by the POM builder because they will have to be defined in plugin management. Once this is setComplete then it can be passed back so that the default configuration information can be populated.  We need to know the specific version so that we can lookup the right version of the plugin descriptor which tells us what the default configuration is.


-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseExecution. -- Execution parseExecution( XmlPullParser, boolean ) Method parseLifecycle. -- Lifecycle parseLifecycle( XmlPullParser, boolean ) Method parseLifecycleConfiguration. -- LifecycleConfiguration parseLifecycleConfiguration( XmlPullParser, boolean ) Method parsePhase. -- Phase parsePhase( XmlPullParser, boolean ) Method read. -- LifecycleConfiguration read( InputStream ) Method read. -- LifecycleConfiguration read( InputStream, boolean )  -- LifecycleConfiguration read( Reader )  -- LifecycleConfiguration read( Reader, boolean ) Method read. -- LifecycleConfiguration read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, LifecycleConfiguration ) Method write. -- void write( Writer, LifecycleConfiguration ) Method writeExecution. -- void writeExecution( Execution, String, XmlSerializer ) Method writeLifecycle. -- void writeLifecycle( Lifecycle, String, XmlSerializer ) Method writeLifecycleConfiguration. -- void writeLifecycleConfiguration( LifecycleConfiguration, String, XmlSerializer ) Method writePhase. -- void writePhase( Phase, String, XmlSerializer )


Gets the identifier of the lifecycle that was not found.

Gets the lifecycle phase that was not found.









Send a message to the user in the <b>debug</b> error level. Send a message (and accompanying exception) to the user in the <b>debug</b> error level.<br> The error's stacktrace will be output when this error level is enabled. Send an exception to the user in the <b>debug</b> error level.<br> The stack trace for this exception will be output when this error level is enabled. Send a message to the user in the <b>error</b> error level. Send a message (and accompanying exception) to the user in the <b>error</b> error level.<br> The error's stacktrace will be output when this error level is enabled. Send an exception to the user in the <b>error</b> error level.<br> The stack trace for this exception will be output when this error level is enabled. Send a message to the user in the <b>info</b> error level. Send a message (and accompanying exception) to the user in the <b>info</b> error level.<br> The error's stacktrace will be output when this error level is enabled. Send an exception to the user in the <b>info</b> error level.<br> The stack trace for this exception will be output when this error level is enabled.     Send a message to the user in the <b>warn</b> error level. Send a message (and accompanying exception) to the user in the <b>warn</b> error level.<br> The error's stacktrace will be output when this error level is enabled. Send an exception to the user in the <b>warn</b> error level.<br> The stack trace for this exception will be output when this error level is enabled.




-----------/ - Methods -/ -----------/ Method addOtherArchive. -- void addOtherArchive( String ) Method clone. -- MailingList clone() Get the link to a URL where you can browse the mailing list archive. -- String getArchive()  -- InputLocation getLocation( Object ) Get the name of the mailing list. -- String getName() Method getOtherArchives. -- java.util.List<String> getOtherArchives() Get the email address or link that can be used to post to the mailing list.  If this is an email address, a <code>mailto:</code> link will automatically be created when the documentation is created. -- String getPost() Get the email address or link that can be used to subscribe to the mailing list.  If this is an email address, a <code>mailto:</code> link will automatically be created when the documentation is created. -- String getSubscribe() Get the email address or link that can be used to unsubscribe to the mailing list.  If this is an email address, a <code>mailto:</code> link will automatically be created when the documentation is created. -- String getUnsubscribe() Method removeOtherArchive. -- void removeOtherArchive( String ) Set the link to a URL where you can browse the mailing list archive. -- void setArchive( String )  -- void setLocation( Object, InputLocation ) Set the name of the mailing list. -- void setName( String ) Set the link to alternate URLs where you can browse the list archive. -- void setOtherArchives( java.util.List ) Set the email address or link that can be used to post to the mailing list.  If this is an email address, a <code>mailto:</code> link will automatically be created when the documentation is created. -- void setPost( String ) Set the email address or link that can be used to subscribe to the mailing list.  If this is an email address, a <code>mailto:</code> link will automatically be created when the documentation is created. -- void setSubscribe( String ) Set the email address or link that can be used to unsubscribe to the mailing list.  If this is an email address, a <code>mailto:</code> link will automatically be created when the documentation is created. -- void setUnsubscribe( String )





Derive the path portion of the given URL. Decodes the specified (portion of a) URL. <strong>Note:</strong> This decoder assumes that ISO-8859-1 is used to convert URL-encoded bytes to characters. Path Utils Return the protocol name. <br/> E.g: for input <code>http://www.codehaus.org</code> this method will return <code>http</code>

This supports painless invocation by the Verifier during embedded execution of the core ITs. See <a href="http://maven.apache.org/shared/maven-verifier/xref/org/apache/maven/it/Embedded3xLauncher.html"> <code>Embedded3xLauncher</code> in <code>maven-verifier</code></a> TODO need to externalize CliRequest TODO need to externalize CliRequest  This should probably be a separate tool and not be baked into Maven.   Customizations available via the CLI  configure logging ---------------------------------------------------------------------- System properties handling ---------------------------------------------------------------------- Needed to make this method package visible to make writing a unit test possible Maybe it's better to move some of those methods to separate class (SoC).

Returns the last ExecutionPlanItem in the supplied phase. If no items are in the specified phase, the closest executionPlanItem from an earlier phase item will be returned. Used by m2e but will be removed, really. Get set of mojos used but not marked @threadSafe Get set of plugins having a goal/mojo used but not marked @threadSafe
Controls the {@link org.apache.maven.lifecycle.internal.builder.Builder} used by Maven by specification of the builders id.      Mirrors  Plugin groups Profiles Proxies Servers Gets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables.  Gets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line.  ----------------------------------------------------------------------  ---------------------------------------------------------------------- Base directory Controls the {@link org.apache.maven.lifecycle.internal.builder.Builder} used by Maven by specification of the builder's id. Set's the parallel degree of concurrency used by the build.   Checksum policy  Goals Interactive Local repository Logging  Offline Reactor Recursive (really to just process the top-level POM) Set a new list of remote repositories to use the execution request. This is necessary if you perform transformations on the remote repositories being used. For example if you replace existing repositories with mirrors then it's easier to just replace the whole list with a new list of transformed repositories. Errors Timing (remove this) Properties Sets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables.  Transfer listeners Update snapshots  Sets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line.

Injects default values like plugin groups or repositories into the specified execution request. if_not[MAVEN4] Copies the values from the given settings into the specified execution request. This method will replace any existing values in the execution request that are controlled by the settings. Hence, it is expected that this method is called on a new/empty execution request before the caller mutates it to fit its needs. Copies the values from the given toolchains into the specified execution request. This method will replace any existing values in the execution request that are controlled by the toolchains. Hence, it is expected that this method is called on a new/empty execution request before the caller mutates it to fit its needs.
Add the specified build summary. Gets the build summary for the specified project. for each exception - knowing what artifacts are missing - project building exception - invalid project model exception: list of markers - xmlpull parser exception


USED BY MAVEN ASSEMBLY PLUGIN
TODO Whether duplicates should be removed looks like an option for the generated merger. TODO The order of the merged list could be controlled by an attribute in the model association: target-first, source-first, dominant-first, recessive-first TODO Whether the merge continues recursively into an existing node or not could be an option for the generated merger
Verifies the specified plugin is compatible with the current Maven runtime. Looks up the mojo for the specified mojo execution and populates its parameters from the configuration given by the mojo execution. The mojo/plugin descriptor associated with the mojo execution provides the class realm to lookup the mojo from. <strong>Warning:</strong> The returned mojo instance must be released via {@link #releaseMojo(Object, MojoExecution)} when the mojo is no longer needed to free any resources allocated for it. Retrieves the descriptor for the specified plugin goal from the plugin's main artifact. Retrieves the descriptor for the specified plugin from its main artifact. Releases the specified mojo back to the container. Sets up class realm for the specified build extensions plugin. Sets up the class realm for the specified plugin. Both the class realm and the plugin artifacts that constitute it will be stored in the plugin descriptor.


Add or replace an artifact. This method is now deprecated. Use the @{MavenProjectHelper} to attach artifacts to a project. In spite of the 'throws' declaration on this API, this method has never thrown an exception since Maven 3.0.x. Historically, it logged and ignored a second addition of the same g/a/v/c/t. Now it replaces the file for the artifact, so that plugins (e.g. shade) can change the pathname of the file for a particular set of coordinates. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. ---------------------------------------------------------------------- Test and compile sourceroots. ----------------------------------------------------------------------   ---------------------------------------------------------------------- Accessors ---------------------------------------------------------------------- All dependencies that this project has, including transitive ones. Contents are lazily populated, so depending on what phases have run dependencies in some scopes won't be included. eg. if only compile phase has run, dependencies with scope test won't be included. ---------------------------------------------------------------------- Plugins ---------------------------------------------------------------------- Gets the project's class realm. This class realm hosts the build extensions of the project. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. Returns context value of this project associated with the given key or null if this project has no such value. Direct dependencies that this project has. Gets the dependency filter used to exclude shared extension artifacts from plugin realms. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. Gets the identifiers of all profiles that contributed to this project's effective model. This includes active profiles from the project's POM and all its parent POMs as well as from external sources like the {@code settings.xml}. The profile identifiers are grouped by the identifier of their source, e.g. {@code <groupId>:<artifactId>:<version>} for a POM profile or {@code external} for profiles from the {@code settings.xml}. TODO I would like to get rid of this. jvz. This appears only to be used in test code Returns the project corresponding to a declared parent.  Gets the project building request from which this project instance was created. <strong>Warning:</strong> This is an utility method that is meant to assist integrators of Maven, it must not be used by Maven plugins. used by the Maven ITs TODO this checking for file == null happens because the resolver has been confused about the root artifact or not. things like the stupid dummy artifact coming from surefire. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. Sets the scope filter to select the artifacts being exposed to the currently executed mojo. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. Sets the project's class realm. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. Sets the value of the context value of this project identified by the given key. If the supplied value is <code>null</code>, the context value is removed from this project. Context values are intended to allow core extensions to associate derived state with project instances. Sets the artifact filter used to exclude shared extension artifacts from plugin realms. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. ---------------------------------------------------------------------- Delegate to the model ---------------------------------------------------------------------- Sets project {@code file} without changing project {@code basedir}. Sets the project building request from which this project instance was created. <strong>Warning:</strong> This is an utility method that is meant to assist integrators of Maven, it must not be used by Maven plugins. used by maven-dependency-tree Sets the transitive dependency artifacts that have been resolved/collected for this project. <strong>Warning:</strong> This is an internal utility method that is only public for technical reasons, it is not part of the public API. In particular, this method can be changed or deleted without prior notice and must not be used by plugins. Default toString
TODO maven-site-plugin -- not used by the plugin directly, but used by Doxia Integration Tool & MPIR see DOXIASITETOOLS-167 & MPIR-349 TODO remote-resources-plugin TODO remote-resources-plugin TODO this is only to provide a project for plugins that don't need a project to execute but need some of the values from a MavenProject. Ideally this should be something internal and nothing outside Maven would ever need this so it should not be exposed in a public API
Add a resource directory to the project. Add a test resource directory to the project. See {@link #attachArtifact(MavenProject, String, String, java.io.File)}, but with type set to null. * See {@link #attachArtifact(MavenProject, String, String, java.io.File)}, but with classifier set to null. Add or replace an artifact to the current project.

ArtifactFactory DefaultProjectBuilder  Code taken from LegacyRepositorySystem  DefaultProjectBuilder DefaultProjectBuilder DefaultProjectBuilder DefaultProjectBuilder DefaultProjectBuilder  Taken from LegacyRepositorySystem  Checks the URL to see if this repository refers to an external repository This method checks if the pattern matches the originalRepository. Valid patterns: * = everything external:* = everything not on the localhost and not file based. repo,repo1 = repo or repo1 *,!repo1 = everything except repo1 Checks whether the layouts configured for a mirror match with the layout of the repository.
Creates a new service locator that already knows about all service implementations included in this library. To acquire a complete repository system, clients need to add some repository connectors for remote transfers. Creates a new Maven-like repository system session by initializing the session with values typical for Maven-based resolution. In more detail, this method configures settings relevant for the processing of dependency graphs, most other settings remain at their generic default value. Use the various setters to further configure the session with authentication, mirror, proxy and other information required for your environment.

This is a provisional method and may be removed  Backward compat   Used by Tycho and will break users and force them to upgrade to Maven 3.1 so we should really leave this here, possibly indefinitely.  Gets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Gets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. This is a provisional method and may be removed



Return an appropriate {@link MavenSimpleLogger} instance by name.
Reset Slf4j internal state.



-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parsePersistedToolchains. -- PersistedToolchains parsePersistedToolchains( XmlPullParser, boolean ) Method parseToolchainModel. -- ToolchainModel parseToolchainModel( XmlPullParser, boolean ) Method parseTrackableBase. -- TrackableBase parseTrackableBase( XmlPullParser, boolean ) Method read. -- PersistedToolchains read( InputStream ) Method read. -- PersistedToolchains read( InputStream, boolean )  -- PersistedToolchains read( Reader )  -- PersistedToolchains read( Reader, boolean ) Method read. -- PersistedToolchains read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, PersistedToolchains ) Method write. -- void write( Writer, PersistedToolchains ) Method writePersistedToolchains. -- void writePersistedToolchains( PersistedToolchains, String, XmlSerializer ) Method writeToolchainModel. -- void writeToolchainModel( ToolchainModel, String, XmlSerializer ) Method writeTrackableBase. -- void writeTrackableBase( TrackableBase, String, XmlSerializer )

-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseActivation. -- Activation parseActivation( XmlPullParser, boolean ) Method parseActivationFile. -- ActivationFile parseActivationFile( XmlPullParser, boolean ) Method parseActivationOS. -- ActivationOS parseActivationOS( XmlPullParser, boolean ) Method parseActivationProperty. -- ActivationProperty parseActivationProperty( XmlPullParser, boolean ) Method parseBuild. -- Build parseBuild( XmlPullParser, boolean ) Method parseBuildBase. -- BuildBase parseBuildBase( XmlPullParser, boolean ) Method parseCiManagement. -- CiManagement parseCiManagement( XmlPullParser, boolean ) Method parseConfigurationContainer. -- ConfigurationContainer parseConfigurationContainer( XmlPullParser, boolean ) Method parseContributor. -- Contributor parseContributor( XmlPullParser, boolean ) Method parseDependency. -- Dependency parseDependency( XmlPullParser, boolean ) Method parseDependencyManagement. -- DependencyManagement parseDependencyManagement( XmlPullParser, boolean ) Method parseDeploymentRepository. -- DeploymentRepository parseDeploymentRepository( XmlPullParser, boolean ) Method parseDeveloper. -- Developer parseDeveloper( XmlPullParser, boolean ) Method parseDistributionManagement. -- DistributionManagement parseDistributionManagement( XmlPullParser, boolean ) Method parseExclusion. -- Exclusion parseExclusion( XmlPullParser, boolean ) Method parseExtension. -- Extension parseExtension( XmlPullParser, boolean ) Method parseFileSet. -- FileSet parseFileSet( XmlPullParser, boolean ) Method parseIssueManagement. -- IssueManagement parseIssueManagement( XmlPullParser, boolean ) Method parseLicense. -- License parseLicense( XmlPullParser, boolean ) Method parseMailingList. -- MailingList parseMailingList( XmlPullParser, boolean ) Method parseModel. -- Model parseModel( XmlPullParser, boolean ) Method parseModelBase. -- ModelBase parseModelBase( XmlPullParser, boolean ) Method parseNotifier. -- Notifier parseNotifier( XmlPullParser, boolean ) Method parseOrganization. -- Organization parseOrganization( XmlPullParser, boolean ) Method parseParent. -- Parent parseParent( XmlPullParser, boolean ) Method parsePatternSet. -- PatternSet parsePatternSet( XmlPullParser, boolean ) Method parsePlugin. -- Plugin parsePlugin( XmlPullParser, boolean ) Method parsePluginConfiguration. -- PluginConfiguration parsePluginConfiguration( XmlPullParser, boolean ) Method parsePluginContainer. -- PluginContainer parsePluginContainer( XmlPullParser, boolean ) Method parsePluginExecution. -- PluginExecution parsePluginExecution( XmlPullParser, boolean ) Method parsePluginManagement. -- PluginManagement parsePluginManagement( XmlPullParser, boolean ) Method parsePrerequisites. -- Prerequisites parsePrerequisites( XmlPullParser, boolean ) Method parseProfile. -- Profile parseProfile( XmlPullParser, boolean ) Method parseRelocation. -- Relocation parseRelocation( XmlPullParser, boolean ) Method parseReportPlugin. -- ReportPlugin parseReportPlugin( XmlPullParser, boolean ) Method parseReportSet. -- ReportSet parseReportSet( XmlPullParser, boolean ) Method parseReporting. -- Reporting parseReporting( XmlPullParser, boolean ) Method parseRepository. -- Repository parseRepository( XmlPullParser, boolean ) Method parseRepositoryBase. -- RepositoryBase parseRepositoryBase( XmlPullParser, boolean ) Method parseRepositoryPolicy. -- RepositoryPolicy parseRepositoryPolicy( XmlPullParser, boolean ) Method parseResource. -- Resource parseResource( XmlPullParser, boolean ) Method parseScm. -- Scm parseScm( XmlPullParser, boolean ) Method parseSite. -- Site parseSite( XmlPullParser, boolean ) Method read. -- Model read( InputStream ) Method read. -- Model read( InputStream, boolean )  -- Model read( Reader )  -- Model read( Reader, boolean ) Method read. -- Model read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseActivation. -- Activation parseActivation( XmlPullParser, boolean, InputSource ) Method parseActivationFile. -- ActivationFile parseActivationFile( XmlPullParser, boolean, InputSource ) Method parseActivationOS. -- ActivationOS parseActivationOS( XmlPullParser, boolean, InputSource ) Method parseActivationProperty. -- ActivationProperty parseActivationProperty( XmlPullParser, boolean, InputSource ) Method parseBuild. -- Build parseBuild( XmlPullParser, boolean, InputSource ) Method parseBuildBase. -- BuildBase parseBuildBase( XmlPullParser, boolean, InputSource ) Method parseCiManagement. -- CiManagement parseCiManagement( XmlPullParser, boolean, InputSource ) Method parseConfigurationContainer. -- ConfigurationContainer parseConfigurationContainer( XmlPullParser, boolean, InputSource ) Method parseContributor. -- Contributor parseContributor( XmlPullParser, boolean, InputSource ) Method parseDependency. -- Dependency parseDependency( XmlPullParser, boolean, InputSource ) Method parseDependencyManagement. -- DependencyManagement parseDependencyManagement( XmlPullParser, boolean, InputSource ) Method parseDeploymentRepository. -- DeploymentRepository parseDeploymentRepository( XmlPullParser, boolean, InputSource ) Method parseDeveloper. -- Developer parseDeveloper( XmlPullParser, boolean, InputSource ) Method parseDistributionManagement. -- DistributionManagement parseDistributionManagement( XmlPullParser, boolean, InputSource ) Method parseExclusion. -- Exclusion parseExclusion( XmlPullParser, boolean, InputSource ) Method parseExtension. -- Extension parseExtension( XmlPullParser, boolean, InputSource ) Method parseFileSet. -- FileSet parseFileSet( XmlPullParser, boolean, InputSource ) Method parseIssueManagement. -- IssueManagement parseIssueManagement( XmlPullParser, boolean, InputSource ) Method parseLicense. -- License parseLicense( XmlPullParser, boolean, InputSource ) Method parseMailingList. -- MailingList parseMailingList( XmlPullParser, boolean, InputSource ) Method parseModel. -- Model parseModel( XmlPullParser, boolean, InputSource ) Method parseModelBase. -- ModelBase parseModelBase( XmlPullParser, boolean, InputSource ) Method parseNotifier. -- Notifier parseNotifier( XmlPullParser, boolean, InputSource ) Method parseOrganization. -- Organization parseOrganization( XmlPullParser, boolean, InputSource ) Method parseParent. -- Parent parseParent( XmlPullParser, boolean, InputSource ) Method parsePatternSet. -- PatternSet parsePatternSet( XmlPullParser, boolean, InputSource ) Method parsePlugin. -- Plugin parsePlugin( XmlPullParser, boolean, InputSource ) Method parsePluginConfiguration. -- PluginConfiguration parsePluginConfiguration( XmlPullParser, boolean, InputSource ) Method parsePluginContainer. -- PluginContainer parsePluginContainer( XmlPullParser, boolean, InputSource ) Method parsePluginExecution. -- PluginExecution parsePluginExecution( XmlPullParser, boolean, InputSource ) Method parsePluginManagement. -- PluginManagement parsePluginManagement( XmlPullParser, boolean, InputSource ) Method parsePrerequisites. -- Prerequisites parsePrerequisites( XmlPullParser, boolean, InputSource ) Method parseProfile. -- Profile parseProfile( XmlPullParser, boolean, InputSource ) Method parseRelocation. -- Relocation parseRelocation( XmlPullParser, boolean, InputSource ) Method parseReportPlugin. -- ReportPlugin parseReportPlugin( XmlPullParser, boolean, InputSource ) Method parseReportSet. -- ReportSet parseReportSet( XmlPullParser, boolean, InputSource ) Method parseReporting. -- Reporting parseReporting( XmlPullParser, boolean, InputSource ) Method parseRepository. -- Repository parseRepository( XmlPullParser, boolean, InputSource ) Method parseRepositoryBase. -- RepositoryBase parseRepositoryBase( XmlPullParser, boolean, InputSource ) Method parseRepositoryPolicy. -- RepositoryPolicy parseRepositoryPolicy( XmlPullParser, boolean, InputSource ) Method parseResource. -- Resource parseResource( XmlPullParser, boolean, InputSource ) Method parseScm. -- Scm parseScm( XmlPullParser, boolean, InputSource ) Method parseSite. -- Site parseSite( XmlPullParser, boolean, InputSource ) Method read. -- Model read( InputStream, boolean, InputSource )  -- Model read( Reader, boolean, InputSource ) Method read. -- Model read( XmlPullParser, boolean, InputSource ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, Model ) Method write. -- void write( Writer, Model ) Method writeActivation. -- void writeActivation( Activation, String, XmlSerializer ) Method writeActivationFile. -- void writeActivationFile( ActivationFile, String, XmlSerializer ) Method writeActivationOS. -- void writeActivationOS( ActivationOS, String, XmlSerializer ) Method writeActivationProperty. -- void writeActivationProperty( ActivationProperty, String, XmlSerializer ) Method writeBuild. -- void writeBuild( Build, String, XmlSerializer ) Method writeBuildBase. -- void writeBuildBase( BuildBase, String, XmlSerializer ) Method writeCiManagement. -- void writeCiManagement( CiManagement, String, XmlSerializer ) Method writeConfigurationContainer. -- void writeConfigurationContainer( ConfigurationContainer, String, XmlSerializer ) Method writeContributor. -- void writeContributor( Contributor, String, XmlSerializer ) Method writeDependency. -- void writeDependency( Dependency, String, XmlSerializer ) Method writeDependencyManagement. -- void writeDependencyManagement( DependencyManagement, String, XmlSerializer ) Method writeDeploymentRepository. -- void writeDeploymentRepository( DeploymentRepository, String, XmlSerializer ) Method writeDeveloper. -- void writeDeveloper( Developer, String, XmlSerializer ) Method writeDistributionManagement. -- void writeDistributionManagement( DistributionManagement, String, XmlSerializer ) Method writeExclusion. -- void writeExclusion( Exclusion, String, XmlSerializer ) Method writeExtension. -- void writeExtension( Extension, String, XmlSerializer ) Method writeFileSet. -- void writeFileSet( FileSet, String, XmlSerializer ) Method writeIssueManagement. -- void writeIssueManagement( IssueManagement, String, XmlSerializer ) Method writeLicense. -- void writeLicense( License, String, XmlSerializer ) Method writeMailingList. -- void writeMailingList( MailingList, String, XmlSerializer ) Method writeModel. -- void writeModel( Model, String, XmlSerializer ) Method writeModelBase. -- void writeModelBase( ModelBase, String, XmlSerializer ) Method writeNotifier. -- void writeNotifier( Notifier, String, XmlSerializer ) Method writeOrganization. -- void writeOrganization( Organization, String, XmlSerializer ) Method writeParent. -- void writeParent( Parent, String, XmlSerializer ) Method writePatternSet. -- void writePatternSet( PatternSet, String, XmlSerializer ) Method writePlugin. -- void writePlugin( Plugin, String, XmlSerializer ) Method writePluginConfiguration. -- void writePluginConfiguration( PluginConfiguration, String, XmlSerializer ) Method writePluginContainer. -- void writePluginContainer( PluginContainer, String, XmlSerializer ) Method writePluginExecution. -- void writePluginExecution( PluginExecution, String, XmlSerializer ) Method writePluginManagement. -- void writePluginManagement( PluginManagement, String, XmlSerializer ) Method writePrerequisites. -- void writePrerequisites( Prerequisites, String, XmlSerializer ) Method writeProfile. -- void writeProfile( Profile, String, XmlSerializer ) Method writeRelocation. -- void writeRelocation( Relocation, String, XmlSerializer ) Method writeReportPlugin. -- void writeReportPlugin( ReportPlugin, String, XmlSerializer ) Method writeReportSet. -- void writeReportSet( ReportSet, String, XmlSerializer ) Method writeReporting. -- void writeReporting( Reporting, String, XmlSerializer ) Method writeRepository. -- void writeRepository( Repository, String, XmlSerializer ) Method writeRepositoryBase. -- void writeRepositoryBase( RepositoryBase, String, XmlSerializer ) Method writeRepositoryPolicy. -- void writeRepositoryPolicy( RepositoryPolicy, String, XmlSerializer ) Method writeResource. -- void writeResource( Resource, String, XmlSerializer ) Method writeScm. -- void writeScm( Scm, String, XmlSerializer ) Method writeSite. -- void writeSite( Site, String, XmlSerializer )
-----------/ - Methods -/ -----------/ Method addPlugin. -- void addPlugin( Plugin ) Method clone. -- Metadata clone() Get the artifactId that this directory represents, if any. -- String getArtifactId() Get the groupId that this directory represents, if any. -- String getGroupId() Get the modelEncoding field. -- String getModelEncoding() Get the version of the underlying metadata model. -- String getModelVersion() Method getPlugins. -- java.util.List<Plugin> getPlugins() Get the version that this directory represents, if any. It is used for artifact snapshots only. -- String getVersion() Get versioning information for the artifact. -- Versioning getVersioning() Method removePlugin. -- void removePlugin( Plugin ) Set the artifactId that this directory represents, if any. -- void setArtifactId( String ) Set the groupId that this directory represents, if any. -- void setGroupId( String ) Set the modelEncoding field. -- void setModelEncoding( String ) Set the version of the underlying metadata model. -- void setModelVersion( String ) Set the set of plugin mappings for the group represented by this directory. -- void setPlugins( java.util.List ) Set the version that this directory represents, if any. It is used for artifact snapshots only. -- void setVersion( String ) Set versioning information for the artifact. -- void setVersioning( Versioning )

init graph ------------------------------------------------------------------------ ------------------------------------------------------------------------ ------------------------------------------------------------------------ ------------------------------------------------------------------------ ------------------------------------------------------------------------
---------------------------------------------------------------------------- used to eliminate exact duplicates in the edge list ---------------------------------------------------------------------------- ---------------------------------------------------------------------------- helper for equals


--------------------------------------------------------------------- --------------------------------------------------------------------- --------------------------------------------------------------------- --------------------------------------------------------------------- --------------------------------------------------------------------- ---------------------------------------------------------------------
Gets the one-based index of the column containing the error. Gets the one-based index of the line containing the error.
Reads the metadata from the specified file. Reads the metadata from the specified byte stream. The stream will be automatically closed before the method returns. Reads the metadata from the specified character reader. The reader will be automatically closed before the method returns.
------------------------------------------------------------------- -------------------------------------------------------------------

Gets the artifact to resolve metadata for. Gets the local repository to use for the resolution. Gets the remote repositories to use for the resolution. Indicates whether network access to remote repositories has been disabled. Determines whether the managed version information should be retrieved. Sets the artifact for which to resolve metadata. Sets the local repository to use for the resolution. Enables/disables network access to remote repositories. Sets the remote repositories to use for the resolution. Enables/disables resolution of the dependency management information.




------------------------------------------------------------------------ ------------------------------------------------------------------------ ------------------------------------------------------------------ ------------------------------------------------------------------------ ------------------------------------------------------------------

-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseMetadata. -- Metadata parseMetadata( XmlPullParser, boolean ) Method parsePlugin. -- Plugin parsePlugin( XmlPullParser, boolean ) Method parseSnapshot. -- Snapshot parseSnapshot( XmlPullParser, boolean ) Method parseSnapshotVersion. -- SnapshotVersion parseSnapshotVersion( XmlPullParser, boolean ) Method parseVersioning. -- Versioning parseVersioning( XmlPullParser, boolean ) Method read. -- Metadata read( InputStream ) Method read. -- Metadata read( InputStream, boolean )  -- Metadata read( Reader )  -- Metadata read( Reader, boolean ) Method read. -- Metadata read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, Metadata ) Method write. -- void write( Writer, Metadata ) Method writeMetadata. -- void writeMetadata( Metadata, String, XmlSerializer ) Method writePlugin. -- void writePlugin( Plugin, String, XmlSerializer ) Method writeSnapshot. -- void writeSnapshot( Snapshot, String, XmlSerializer ) Method writeSnapshotVersion. -- void writeSnapshotVersion( SnapshotVersion, String, XmlSerializer ) Method writeVersioning. -- void writeVersioning( Versioning, String, XmlSerializer )
-----------/ - Methods -/ -----------/ Method clone. -- Mirror clone() Get the layout of the mirror repository. Since Maven 3. -- String getLayout() Get the server ID of the repository being mirrored, e.g., "central". This MUST NOT match the mirror id. -- String getMirrorOf() Get the layouts of repositories being mirrored. This value can be used to restrict the usage of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3. -- String getMirrorOfLayouts() Get the optional name that describes the mirror. -- String getName() Get the URL of the mirror repository. -- String getUrl() Set the layout of the mirror repository. Since Maven 3. -- void setLayout( String ) Set the server ID of the repository being mirrored, e.g., "central". This MUST NOT match the mirror id. -- void setMirrorOf( String ) Set the layouts of repositories being mirrored. This value can be used to restrict the usage of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3. -- void setMirrorOfLayouts( String ) Set the optional name that describes the mirror. -- void setName( String ) Set the URL of the mirror repository. -- void setUrl( String )
Determines the mirror for the specified repository.




-----------/ - Methods -/ -----------/ Method addContributor. -- void addContributor( Contributor ) Method addDeveloper. -- void addDeveloper( Developer ) Method addLicense. -- void addLicense( License ) Method addMailingList. -- void addMailingList( MailingList ) Method addProfile. -- void addProfile( Profile ) Method clone. -- Model clone() Get the identifier for this artifact that is unique within the group given by the group ID. An artifact is something that is either produced or used by a project. Examples of artifacts produced by Maven for a project include: JARs, source and binary distributions, and WARs. -- String getArtifactId() Get information required to build the project. -- Build getBuild() Get the project's continuous integration information. -- CiManagement getCiManagement() Method getContributors. -- java.util.List<Contributor> getContributors() Get a detailed description of the project, used by Maven whenever it needs to describe the project, such as on the web site. While this element can be specified as CDATA to enable the use of HTML tags within the description, it is discouraged to allow plain text representation. If you need to modify the index page of the generated web site, you are able to specify your own instead of adjusting this text. -- String getDescription() Method getDevelopers. -- java.util.List<Developer> getDevelopers() Get a universally unique identifier for a project. It is normal to use a fully-qualified package name to distinguish it from other projects with a similar name (eg. <code>org.apache.maven</code>). -- String getGroupId()  Get the year of the project's inception, specified with 4 digits. This value is used when generating copyright notices as well as being informational. -- String getInceptionYear() Get the project's issue management system information. -- IssueManagement getIssueManagement() Method getLicenses. -- java.util.List<License> getLicenses() Method getMailingLists. -- java.util.List<MailingList> getMailingLists() Get the modelEncoding field. -- String getModelEncoding() Get declares to which version of project descriptor this POM conforms. -- String getModelVersion() Get the full name of the project. -- String getName() Get this element describes various attributes of the organization to which the project belongs. These attributes are utilized when documentation is created (for copyright notices and links). -- Organization getOrganization() Get the type of artifact this project produces, for example <code>jar</code> <code>war</code> <code>ear</code> <code>pom</code>. Plugins can create their own packaging, and therefore their own packaging types, so this list does not contain all possible types. -- String getPackaging() Get the location of the parent project, if one exists. Values from the parent project will be the default for this project if they are left unspecified. The location is given as a group ID, artifact ID and version. -- Parent getParent() Gets the POM file for the corresponding project (if any). Get describes the prerequisites in the build environment for this project. -- Prerequisites getPrerequisites() Method getProfiles. -- java.util.List<Profile> getProfiles() Gets the base directory for the corresponding project (if any). Get specification for the SCM used by the project, such as CVS, Subversion, etc. -- Scm getScm() Get the URL to the project's homepage. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- String getUrl() Get the current version of the artifact produced by this project. -- String getVersion() Method removeContributor. -- void removeContributor( Contributor ) Method removeDeveloper. -- void removeDeveloper( Developer ) Method removeLicense. -- void removeLicense( License ) Method removeMailingList. -- void removeMailingList( MailingList ) Method removeProfile. -- void removeProfile( Profile ) Set the identifier for this artifact that is unique within the group given by the group ID. An artifact is something that is either produced or used by a project. Examples of artifacts produced by Maven for a project include: JARs, source and binary distributions, and WARs. -- void setArtifactId( String ) Set information required to build the project. -- void setBuild( Build ) Set the project's continuous integration information. -- void setCiManagement( CiManagement ) Set describes the contributors to a project that are not yet committers. -- void setContributors( java.util.List ) Set a detailed description of the project, used by Maven whenever it needs to describe the project, such as on the web site. While this element can be specified as CDATA to enable the use of HTML tags within the description, it is discouraged to allow plain text representation. If you need to modify the index page of the generated web site, you are able to specify your own instead of adjusting this text. -- void setDescription( String ) Set describes the committers of a project. -- void setDevelopers( java.util.List ) Set a universally unique identifier for a project. It is normal to use a fully-qualified package name to distinguish it from other projects with a similar name (eg. <code>org.apache.maven</code>). -- void setGroupId( String ) Set the year of the project's inception, specified with 4 digits. This value is used when generating copyright notices as well as being informational. -- void setInceptionYear( String ) Set the project's issue management system information. -- void setIssueManagement( IssueManagement ) Set this element describes all of the licenses for this project. Each license is described by a <code>license</code> element, which is then described by additional elements. Projects should only list the license(s) that applies to the project and not the licenses that apply to dependencies. If multiple licenses are listed, it is assumed that the user can select any of them, not that they must accept all. -- void setLicenses( java.util.List ) Set contains information about a project's mailing lists. -- void setMailingLists( java.util.List ) Set the modelEncoding field. -- void setModelEncoding( String ) Set declares to which version of project descriptor this POM conforms. -- void setModelVersion( String ) Set the full name of the project. -- void setName( String ) Set this element describes various attributes of the organization to which the project belongs. These attributes are utilized when documentation is created (for copyright notices and links). -- void setOrganization( Organization ) Set the type of artifact this project produces, for example <code>jar</code> <code>war</code> <code>ear</code> <code>pom</code>. Plugins can create their own packaging, and therefore their own packaging types, so this list does not contain all possible types. -- void setPackaging( String ) Set the location of the parent project, if one exists. Values from the parent project will be the default for this project if they are left unspecified. The location is given as a group ID, artifact ID and version. -- void setParent( Parent ) Set describes the prerequisites in the build environment for this project. -- void setPrerequisites( Prerequisites ) Set a listing of project-local build profiles which will modify the build process when activated. -- void setProfiles( java.util.List ) Set specification for the SCM used by the project, such as CVS, Subversion, etc. -- void setScm( Scm ) Set the URL to the project's homepage. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- void setUrl( String ) Set the current version of the artifact produced by this project. -- void setVersion( String )
-----------/ - Methods -/ -----------/ Method addDependency. -- void addDependency( Dependency ) Method addModule. -- void addModule( String ) Method addPluginRepository. -- void addPluginRepository( Repository ) Method addProperty. -- void addProperty( String, String ) Method addRepository. -- void addRepository( Repository ) Method clone. -- ModelBase clone() Method getDependencies. -- java.util.List<Dependency> getDependencies() Get default dependency information for projects that inherit from this one. The dependencies in this section are not immediately resolved. Instead, when a POM derived from this one declares a dependency described by a matching groupId and artifactId, the version and other values from this section are used for that dependency if they were not already specified. -- DependencyManagement getDependencyManagement() Get distribution information for a project that enables deployment of the site and artifacts to remote web servers and repositories respectively. -- DistributionManagement getDistributionManagement()  -- InputLocation getLocation( Object ) Method getModules. -- java.util.List<String> getModules() Method getPluginRepositories. -- java.util.List<Repository> getPluginRepositories() Method getProperties. -- java.util.Properties getProperties() Get this element includes the specification of report plugins to use to generate the reports on the Maven-generated site. These reports will be run when a user executes <code>mvn site</code>. All of the reports will be included in the navigation bar for browsing. -- Reporting getReporting() Get <b>Deprecated</b>. Now ignored by Maven. -- Object getReports() Method getRepositories. -- java.util.List<Repository> getRepositories() Method removeDependency. -- void removeDependency( Dependency ) Method removeModule. -- void removeModule( String ) Method removePluginRepository. -- void removePluginRepository( Repository ) Method removeRepository. -- void removeRepository( Repository ) Set this element describes all of the dependencies associated with a project. These dependencies are used to construct a classpath for your project during the build process. They are automatically downloaded from the repositories defined in this project. See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the dependency mechanism</a> for more information. -- void setDependencies( java.util.List ) Set default dependency information for projects that inherit from this one. The dependencies in this section are not immediately resolved. Instead, when a POM derived from this one declares a dependency described by a matching groupId and artifactId, the version and other values from this section are used for that dependency if they were not already specified. -- void setDependencyManagement( DependencyManagement ) Set distribution information for a project that enables deployment of the site and artifacts to remote web servers and repositories respectively. -- void setDistributionManagement( DistributionManagement )  -- void setLocation( Object, InputLocation ) Set the modules (sometimes called subprojects) to build as a part of this project. Each module listed is a relative path to the directory containing the module. To be consistent with the way default urls are calculated from parent, it is recommended to have module names match artifact ids. -- void setModules( java.util.List ) Set the lists of the remote repositories for discovering plugins for builds and reports. -- void setPluginRepositories( java.util.List ) Set properties that can be used throughout the POM as a substitution, and are used as filters in resources if enabled. The format is <code>&lt;name&gt;value&lt;/name&gt;</code>. -- void setProperties( java.util.Properties ) Set this element includes the specification of report plugins to use to generate the reports on the Maven-generated site. These reports will be run when a user executes <code>mvn site</code>. All of the reports will be included in the navigation bar for browsing. -- void setReporting( Reporting ) Set <b>Deprecated</b>. Now ignored by Maven. -- void setReports( Object ) Set the lists of the remote repositories for discovering dependencies and extensions. -- void setRepositories( java.util.List )
Builds the effective model of the specified POM. Builds the effective model by completing the specified interim result which was produced by a previous call to {@link #build(ModelBuildingRequest)} with {@link ModelBuildingRequest#isTwoPhaseBuilding()} being {@code true}. The model building request passed to this method must be the same as the one used for the first phase of the model building. Performs only the part of {@link ModelBuilder#build(ModelBuildingRequest)} that loads the raw model
Gets the model being built. The precise state of this model depends on the event being fired. Gets the container used to collect problems that were encountered while processing the event. Gets the model building request being processed.
Assists in firing events from a generic method by abstracting from the actual callback method to be called on the listener. Notifies the specified listener of the given event.
Gets the model that could not be built properly. Gets the identifier of the POM whose effective model could not be built. The general format of the identifier is {@code <groupId>:<artifactId>:<version>} but some of these coordinates may still be unknown at the point the exception is thrown so this information is merely meant to assist the user. Gets the problems that caused this exception. Gets the interim result of the model building up to the point where it failed.
Notifies the listener that the model has been constructed to the extent where build extensions can be processed.
Gets the identifiers of those profiles that should be activated by explicit demand. Gets the start time of the build. Gets the identifiers of those profiles that should be deactivated by explicit demand. Gets the model building listener to notify during the build process. Gets the model cache to use for reuse of previously built models. Gets the model resolver to use for resolution of mixins or parents that are not locally reachable from the project directory. Gets the source of the POM to process. Gets the POM file of the project to build. Gets the external profiles that should be considered for model building. Gets the raw model to build. If not set, model source will be used to load raw model. Gets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Gets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Gets the level of validation to perform on processed models. Indicates whether the model should track the line/column number of the model source from which it was parsed. Indicates whether plugin executions and configurations should be processed. If enabled, lifecycle-induced plugin executions will be injected into the model and common plugin configuration will be propagated to individual executions. Indicates whether the model building should happen in two phases. If enabled, the initial invocation of the model builder will only produce an interim result which may be used to analyze inter-model dependencies before the final invocation of the model builder is performed. Sets the identifiers of those profiles that should be activated by explicit demand. Sets the start time of the build. Sets the identifiers of those profiles that should be deactivated by explicit demand. Enables/disables the tracking of line/column numbers for the model source being parsed. By default, input locations are not tracked. Sets the model building listener to notify during the build process. Sets the model cache to use for reuse of previously built models. This is an optional component that serves performance optimizations. Sets the model resolver to use for resolution of mixins or parents that are not locally reachable from the project directory. Sets the source of the POM to process. Eventually, either {@link #setModelSource(ModelSource)} or {@link #setPomFile(File)} must be set. Sets the POM file of the project to build. Note that providing the path to a POM file via this method will make the model builder operate in project mode. This mode is meant for effective models that are employed during the build process of a local project. Hence the effective model will support the notion of a project directory. To build the model for a POM from the repository, use {@link #setModelSource(ModelSource)} in combination with a {@link FileModelSource} instead. Controls the processing of plugin executions and configurations. Sets the external profiles that should be considered for model building. Set raw model. Sets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Enables/disables two-phase building. If enabled, the initial invocation of the model builder will only produce an interim result which may be used to analyze inter-model dependencies before the final invocation of the model builder is performed. Sets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Sets the level of validation to perform on processed models. For building of projects, {@link #VALIDATION_LEVEL_STRICT} should be used to ensure proper building. For the mere retrieval of dependencies during artifact resolution, {@link #VALIDATION_LEVEL_MINIMAL} should be used to account for models of poor quality. By default, models are validated in strict mode.
Gets the external profiles that were active during model building. External profiles are those that were contributed by {@link ModelBuildingRequest#getProfiles()}. Gets the profiles from the specified model that were active during model building. The model identifier should be from the collection obtained by {@link #getModelIds()}. As a special case, an empty string can be used as the identifier for the super POM. Gets the assembled model. Gets the sequence of model identifiers that denote the lineage of models from which the effective model was constructed. Model identifiers have the form {@code <groupId>:<artifactId>:<version>}. The first identifier from the list denotes the model on which the model builder was originally invoked. The last identifier will always be an empty string that by definition denotes the super POM. Gets the problems that were encountered during the model building. Note that only problems of severity {@link ModelProblem.Severity#WARNING} and below are reported here. Problems with a higher severity level cause the model builder to fail with a {@link ModelBuildingException}. Gets the raw model as it was read from the input model source. Apart from basic validation, the raw model has not undergone any updates by the model builder, e.g. reflects neither inheritance nor interpolation. Gets the specified raw model as it was read from a model source. Apart from basic validation, a raw model has not undergone any updates by the model builder, e.g. reflects neither inheritance nor interpolation. The model identifier should be from the collection obtained by {@link #getModelIds()}. As a special case, an empty string can be used as the identifier for the super POM.
Gets the specified data from the cache. Puts the specified data into the cache.
Creates a copy of the data suitable for retrieval from the cache. The retrieved data can be mutated after the cache is queried but the state of the cache must not change so we need to make a copy. Gets the name of the tag. Gets the type of data associated with this tag. Creates a copy of the data suitable for storage in the cache. The original data to store can be mutated after the cache is populated but the state of the cache must not change so we need to make a copy.
Gets the active profiles from the model. Gets the effective artifact identifier of the model. Gets the effective group identifier of the model. Gets the effective identifier of the model in the form {@code <groupId>:<artifactId>:<version>}. Gets the model being wrapped. Gets the raw model being wrapped. Gets the effective version of the model. Sets the active profiles from the model. Sets the effective artifact identifier of the model. Sets the effective group identifier of the model. Sets the model being wrapped. Sets the raw model being wrapped. Sets the effective version of the model.


Interpolates expressions in the specified model. Note that implementations are free to either interpolate the provided model directly or to create a clone of the model and interpolate the clone. Callers should always use the returned model and must not rely on the input model being updated.
Locates the POM file within the specified project directory. In case the given project directory does not exist or does not contain a POM file, the return value indicates the expected path to the POM file. Sub directories of the project directory will not be considered when locating the POM file. The return value will be an absolute path if the project directory is given as an absolute path.
Merges the specified source object into the given target object.
Sets default values in the specified model that for technical reasons cannot be set directly in the Modello definition. Merges duplicate elements like multiple declarations of the same build plugin in the specified model.
Gets the one-based index of the column containing the error. Gets the one-based index of the line containing the error.
Resolves the well-known paths of the specified model against the given base directory. Paths within plugin configuration are not processed.
Gets the one-based index of the column containing the problem. The column number should refer to some text file that is given by {@link #getSource()}. Gets the exception that caused this problem (if any). Gets the one-based index of the line containing the problem. The line number should refer to some text file that is given by {@link #getSource()}. Gets the message that describes this problem. Gets the identifier of the model from which the problem originated. While the general form of this identifier is <code>groupId:artifactId:version</code> the returned identifier need not be complete. The identifier is derived from the information that is available at the point the problem occurs and as such merely serves as a best effort to provide information to the user to track the problem back to its origin. Gets the severity level of this problem. Gets the hint about the source of the problem. While the syntax of this hint is unspecified and depends on the creator of the problem, the general expectation is that the hint provides sufficient information to the user to track the problem back to its origin. A concrete example for such a source hint can be the file path or URL from which a POM was read. Gets the applicable maven version/validation level of this problem
Adds the specified problem.
The collected problems.

Creates a string with all location details for the specified model problem. If the project identifier is provided, the generated location will omit the model id and source information and only give line/column information for problems originating directly from this POM. Creates a user-friendly artifact id from the specified coordinates. Creates a user-friendly source hint for the specified model.

Reads the model from the specified file. Reads the model from the specified byte stream. The stream will be automatically closed before the method returns. Reads the model from the specified character reader. The reader will be automatically closed before the method returns.
Adds a repository to use for subsequent resolution requests. The order in which repositories are added matters, repositories that were added first should also be searched first. When multiple repositories with the same identifier are added, only the first repository being added will be used. Adds a repository to use for subsequent resolution requests. The order in which repositories are added matters, repositories that were added first should also be searched first. When multiple repositories with the same identifier are added, then the value of the replace argument is determines the behaviour. If replace is false than any existing repository with the same Id will remain in use. If replace is true the new repository replaces the original. Clones this resolver for usage in a forked resolution process. In general, implementors need not provide a deep clone. The only requirement is that invocations of {@link #addRepository(Repository)} on the clone do not affect the state of the original resolver and vice versa. Tries to resolve the POM for the specified coordinates. Tries to resolve the POM for the specified dependency coordinates possibly updating {@code dependency}. <p> Unlike the {@link #resolveModel(java.lang.String, java.lang.String, java.lang.String)} method, this method supports version ranges and updates the given {@code dependency} instance to match the returned {@code ModelSource}. If {@code dependency} declares a version range, the version corresponding to the returned {@code ModelSource} will be set on the given {@code dependency}. </p> Tries to resolve the POM for the specified parent coordinates possibly updating {@code parent}. <p> Unlike the {@link #resolveModel(java.lang.String, java.lang.String, java.lang.String)} method, this method supports version ranges and updates the given {@code parent} instance to match the returned {@code ModelSource}. If {@code parent} declares a version range, the version corresponding to the returned {@code ModelSource} will be set on the given {@code parent}. </p>

Returns location of the POM, never <code>null</code>. Returns model source identified by a path relative to this model source POM. Implementation <strong>MUST</strong> be able to accept <code>relPath</code> parameter values that <ul> <li>use either / or \ file path separator</li> <li>have .. parent directory references</li> <li>point either at file or directory, in the latter case POM file name 'pom.xml' needs to be used by the requested model source.</li> </ul>
Normalizes the well-known URLs of the specified model.
This should be the resulting ordering of plugins after merging: <p> Given: <pre> parent: X -&gt; A -&gt; B -&gt; D -&gt; E child: Y -&gt; A -&gt; C -&gt; D -&gt; F </pre> Result: <pre> X -&gt; Y -&gt; A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F </pre>

Checks the specified (effective) model for missing or invalid values. The effective model is fully assembled and has undergone inheritance, interpolation and other model operations. Checks the specified (raw) model for missing or invalid values. The raw model is directly created from the POM file and has not been subjected to inheritance, interpolation or profile/default injection.
Writes the supplied model to the specified file. Any non-existing parent directories of the output file will be created automatically. Writes the supplied model to the specified byte stream. The stream will be automatically closed before the method returns. Writes the supplied model to the specified character writer. The writer will be automatically closed before the method returns.
Perform whatever build-process behavior this <code>Mojo</code> implements.<br> This is the main trigger for the <code>Mojo</code> inside the <code>Maven</code> system, and allows the <code>Mojo</code> to communicate errors. Furnish access to the standard Maven logging mechanism which is managed in this base class. Inject a standard <code>Maven</code> logging mechanism to allow this <code>Mojo</code> to communicate events and feedback to the user. TODO not sure about this here, and may want a getLog on here as well/instead
Creates a shallow copy of this mojo descriptor. {@inheritDoc } {@inheritDoc } Gets the scope of (transitive) dependencies that should be collected. Dependency collection refers to the process of calculating the complete dependency tree in terms of artifact coordinates. In contrast to dependency resolution, this does not include the download of the files for the dependency artifacts. It is meant for mojos that only want to analyze the set of transitive dependencies, in particular during early lifecycle phases where full dependency resolution might fail due to projects which haven't been built yet.         ----------------------------------------------------------------------  ----------------------------------------------------------------------       {@inheritDoc } {@inheritDoc }  {@inheritDoc }       blech! this isn't even intelligible as a method name. provided for consistency...     more english-friendly method...keep the code clean! :)   ---------------------------------------------------------------------- Dependency requirement ----------------------------------------------------------------------            ---------------------------------------------------------------------- Online vs. Offline requirement ----------------------------------------------------------------------     ---------------------------------------------------------------------- Project requirement ----------------------------------------------------------------------
TODO take repo mans into account as one may be aggregating prefixes of many TODO collect at the root of the repository, read the one at the root, and fetch remote if something is missing or the user forces the issue org.apache.maven.plugins:maven-remote-resources-plugin:1.0:process@executionId
Gets the source of this execution.
Create the MojoExecution configuration based on configuration for a Mojo in the MavenProject and the default configuration for the Mojo from the containing plugin's plugin.xml descriptor.













artifacts that could NOT be resolved artifacts that could be resolved
ConflictResolver methods ----------------------------------------------- @see org.apache.maven.artifact.resolver.conflict.ConflictResolver#resolveConflict(org.apache.maven.artifact.resolver.ResolutionNode, org.apache.maven.artifact.resolver.ResolutionNode)
ConflictResolver methods ----------------------------------------------- @see org.apache.maven.artifact.resolver.conflict.ConflictResolver#resolveConflict(org.apache.maven.artifact.resolver.ResolutionNode, org.apache.maven.artifact.resolver.ResolutionNode)


-----------/ - Methods -/ -----------/ Method addConfiguration. -- void addConfiguration( String, String ) Method clone. -- Notifier clone() Get <b>Deprecated</b>. Where to send the notification to - eg email address. -- String getAddress() Method getConfiguration. -- java.util.Properties getConfiguration()  -- InputLocation getLocation( Object ) Get the mechanism used to deliver notifications. -- String getType() Get whether to send notifications on error. -- boolean isSendOnError() Get whether to send notifications on failure. -- boolean isSendOnFailure() Get whether to send notifications on success. -- boolean isSendOnSuccess() Get whether to send notifications on warning. -- boolean isSendOnWarning() Set <b>Deprecated</b>. Where to send the notification to - eg email address. -- void setAddress( String ) Set extended configuration specific to this notifier goes here. -- void setConfiguration( java.util.Properties )  -- void setLocation( Object, InputLocation ) Set whether to send notifications on error. -- void setSendOnError( boolean ) Set whether to send notifications on failure. -- void setSendOnFailure( boolean ) Set whether to send notifications on success. -- void setSendOnSuccess( boolean ) Set whether to send notifications on warning. -- void setSendOnWarning( boolean ) Set the mechanism used to deliver notifications. -- void setType( String )
ConflictResolver methods ----------------------------------------------- @see org.apache.maven.artifact.resolver.conflict.ConflictResolver#resolveConflict(org.apache.maven.artifact.resolver.ResolutionNode, org.apache.maven.artifact.resolver.ResolutionNode)


-----------/ - Methods -/ -----------/ Method clone. -- Organization clone()  -- InputLocation getLocation( Object ) Get the full name of the organization. -- String getName() Get the URL to the organization's home page. -- String getUrl()  -- void setLocation( Object, InputLocation ) Set the full name of the organization. -- void setName( String ) Set the URL to the organization's home page. -- void setUrl( String )

-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseExpression. -- Expression parseExpression( XmlPullParser, boolean ) Method parseExpressionDocumentation. -- ExpressionDocumentation parseExpressionDocumentation( XmlPullParser, boolean ) Method read. -- ExpressionDocumentation read( InputStream ) Method read. -- ExpressionDocumentation read( InputStream, boolean )  -- ExpressionDocumentation read( Reader )  -- ExpressionDocumentation read( Reader, boolean ) Method read. -- ExpressionDocumentation read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, ExpressionDocumentation ) Method write. -- void write( Writer, ExpressionDocumentation ) Method writeExpression. -- void writeExpression( Expression, String, XmlSerializer ) Method writeExpressionDocumentation. -- void writeExpressionDocumentation( ExpressionDocumentation, String, XmlSerializer )
Creates a shallow copy of this parameter. ----------------------------------------------------------------------  ----------------------------------------------------------------------
-----------/ - Methods -/ -----------/ Method clone. -- Parent clone() Get the artifact id of the parent project to inherit from. -- String getArtifactId() Get the group id of the parent project to inherit from. -- String getGroupId()   -- InputLocation getLocation( Object ) Get the relative path of the parent <code>pom.xml</code> file within the check out. If not specified, it defaults to <code>../pom.xml</code>. Maven looks for the parent POM first in this location on the filesystem, then the local repository, and lastly in the remote repo. <code>relativePath</code> allows you to select a different location, for example when your structure is flat, or deeper without an intermediate parent POM. However, the group ID, artifact ID and version are still required, and must match the file in the location given or it will revert to the repository for the POM. This feature is only for enhancing the development in a local checkout of that project. Set the value to an empty string in case you want to disable the feature and always resolve the parent POM from the repositories. -- String getRelativePath() Get the version of the parent project to inherit. -- String getVersion() Set the artifact id of the parent project to inherit from. -- void setArtifactId( String ) Set the group id of the parent project to inherit from. -- void setGroupId( String )  -- void setLocation( Object, InputLocation ) Set the relative path of the parent <code>pom.xml</code> file within the check out. If not specified, it defaults to <code>../pom.xml</code>. Maven looks for the parent POM first in this location on the filesystem, then the local repository, and lastly in the remote repo. <code>relativePath</code> allows you to select a different location, for example when your structure is flat, or deeper without an intermediate parent POM. However, the group ID, artifact ID and version are still required, and must match the file in the location given or it will revert to the repository for the POM. This feature is only for enhancing the development in a local checkout of that project. Set the value to an empty string in case you want to disable the feature and always resolve the parent POM from the repositories. -- void setRelativePath( String ) Set the version of the parent project to inherit. -- void setVersion( String )


-----------/ - Methods -/ -----------/ Method addExclude. -- void addExclude( String ) Method addInclude. -- void addInclude( String ) Method clone. -- PatternSet clone() Method getExcludes. -- java.util.List<String> getExcludes() Method getIncludes. -- java.util.List<String> getIncludes()  -- InputLocation getLocation( Object ) Method removeExclude. -- void removeExclude( String ) Method removeInclude. -- void removeInclude( String ) Set a list of patterns to exclude, e.g. <code>**&#47;*.xml</code> -- void setExcludes( java.util.List ) Set a list of patterns to include, e.g. <code>**&#47;*.xml</code>. -- void setIncludes( java.util.List )  -- void setLocation( Object, InputLocation )

-----------/ - Methods -/ -----------/ Method addToolchain. -- void addToolchain( ToolchainModel ) Method clone. -- PersistedToolchains clone() Get the modelEncoding field. -- String getModelEncoding() Method getToolchains. -- java.util.List<ToolchainModel> getToolchains() Method removeToolchain. -- void removeToolchain( ToolchainModel ) Set the modelEncoding field. -- void setModelEncoding( String ) Set the toolchain instance definition. -- void setToolchains( java.util.List )
-----------/ - Methods -/ -----------/ Method addExecution. -- void addExecution( Execution ) Get configuration to pass to all goals run in this phase. -- Object getConfiguration() Method getExecutions. -- java.util.List<Execution> getExecutions() Get the ID of this phase, e.g., <code>generate-sources</code>. -- String getId() Method removeExecution. -- void removeExecution( Execution ) Set configuration to pass to all goals run in this phase. -- void setConfiguration( Object ) Set the goals to execute within the phase. -- void setExecutions( java.util.List ) Set the ID of this phase, e.g., <code>generate-sources</code>. -- void setId( String )


-----------/ - Methods -/ -----------/ Method clone. -- Plugin clone() Get the plugin artifactId. -- String getArtifactId() Get display name for the plugin. -- String getName() Get the plugin invocation prefix (i.e. eclipse for eclipse:eclipse). -- String getPrefix() Set the plugin artifactId. -- void setArtifactId( String ) Set display name for the plugin. -- void setName( String ) Set the plugin invocation prefix (i.e. eclipse for eclipse:eclipse). -- void setPrefix( String )

Registers the specified cache record for usage with the given project. Integrators can use the information collected from this method in combination with a custom cache implementation to dispose unused records from the cache.
-----------/ - Methods -/ -----------/ Method clone. -- PluginConfiguration clone() Get default plugin information to be made available for reference by projects derived from this one. This plugin configuration will not be resolved or bound to the lifecycle unless referenced. Any local configuration for a given plugin will override the plugin's entire definition here. -- PluginManagement getPluginManagement() Set default plugin information to be made available for reference by projects derived from this one. This plugin configuration will not be resolved or bound to the lifecycle unless referenced. Any local configuration for a given plugin will override the plugin's entire definition here. -- void setPluginManagement( PluginManagement )

Merges values from general build plugin configuration into the individual plugin executions of the given model.
-----------/ - Methods -/ -----------/ Method addPlugin. -- void addPlugin( Plugin ) Method clone. -- PluginContainer clone() Reset the <code>pluginsMap</code> field to <code>null</code>  -- InputLocation getLocation( Object ) Method getPlugins. -- java.util.List<Plugin> getPlugins()  Method removePlugin. -- void removePlugin( Plugin )  -- void setLocation( Object, InputLocation ) Set the list of plugins to use. -- void setPlugins( java.util.List )

Resolves the main artifact of the specified plugin. Resolves the runtime dependencies of the specified plugin.

Creates a shallow copy of this plugin descriptor. ---------------------------------------------------------------------- Dependencies ---------------------------------------------------------------------- The map of artifacts accessible by the versionlessKey, i.e. groupId:artifactId Gets the artifacts that make up the plugin's class realm, excluding artifacts shadowed by the Maven core realm like {@code maven-project}. Parse maven-...-plugin. TODO move to plugin-tools-api as a default only ----------------------------------------------------------------------  ----------------------------------------------------------------------
----------------------------------------------------------------------  ----------------------------------------------------------------------


-----------/ - Methods -/ -----------/ Method addGoal. -- void addGoal( String ) Method clone. -- PluginExecution clone() Method getGoals. -- java.util.List<String> getGoals() Get the identifier of this execution for labelling the goals during the build, and for matching executions to merge during inheritance and profile injection. -- String getId() Get the build lifecycle phase to bind the goals in this execution to. If omitted, the goals will be bound to the default phase specified by the plugin. -- String getPhase() Get the priority of this execution compared to other executions which are bound to the same phase. <strong>Warning:</strong> This is an internal utility property that is only public for technical reasons, it is not part of the public API. In particular, this property can be changed or deleted without prior notice. -- int getPriority() Method removeGoal. -- void removeGoal( String ) Set the goals to execute with the given configuration. -- void setGoals( java.util.List ) Set the identifier of this execution for labelling the goals during the build, and for matching executions to merge during inheritance and profile injection. -- void setId( String ) Set the build lifecycle phase to bind the goals in this execution to. If omitted, the goals will be bound to the default phase specified by the plugin. -- void setPhase( String ) Set the priority of this execution compared to other executions which are bound to the same phase. <strong>Warning:</strong> This is an internal utility property that is only public for technical reasons, it is not part of the public API. In particular, this property can be changed or deleted without prior notice. -- void setPriority( int )



-----------/ - Methods -/ -----------/ Method clone. -- PluginManagement clone()
Merges default values from the plugin management section of the given model into itself.





Gets the list of group ids to scan for the plugin prefix. Gets the POM whose build plugins are to be scanned for the prefix. Gets the prefix of the plugin. Gets the remote repositories to use. Gets the session to use for repository access. Sets the list of group ids to scan for the plugin prefix. Sets the POM whose build plugins are to be scanned for the prefix. Sets the prefix of the plugin. Sets the remote repositories to use. <em>Note:</em> When creating a request from a project, be sure to use the plugin repositories and not the regular project repositories. Sets the session to use for repository access.
Resolves the plugin prefix for the specified request.

The resolved artifact id for the plugin. The resolved group id for the plugin. The repository from which the plugin prefix was resolved.
Registers the specified cache record for usage with the given project. Integrators can use the information collected from this method in combination with a custom cache implementation to dispose unused records from the cache.


Gets the artifact id of the plugin. Gets the group id of the plugin. Gets the POM whose build plugins are to be scanned for the version. Gets the remote repositories to use. Gets the session to use for repository access. Sets the artifact id of the plugin. Sets the group id of the plugin. Sets the POM whose build plugins are to be scanned for the version. Sets the remote repositories to use. <em>Note:</em> When creating a request from a project, be sure to use the plugin repositories and not the regular project repositories. Sets the session to use for repository access.

Resolves the version for the specified request.

The repository from which the plugin version was resolved. The resolved plugin version.
-----------/ - Methods -/ -----------/ Method clone. -- Prerequisites clone()  -- InputLocation getLocation( Object ) Get for a plugin project (packaging is <code>maven-plugin</code>), the minimum version of Maven required to use the resulting plugin.<br> In Maven 2, this was also specifying the minimum version of Maven required to build a project, but this usage is <b>deprecated</b> in Maven 3 and not checked any more: use the <a href="https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html">Maven Enforcer Plugin's <code>requireMavenVersion</code> rule</a> instead. -- String getMaven()  -- void setLocation( Object, InputLocation ) Set for a plugin project (packaging is <code>maven-plugin</code>), the minimum version of Maven required to use the resulting plugin.<br> In Maven 2, this was also specifying the minimum version of Maven required to build a project, but this usage is <b>deprecated</b> in Maven 3 and not checked any more: use the <a href="https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html">Maven Enforcer Plugin's <code>requireMavenVersion</code> rule</a> instead. -- void setMaven( String )
Gets the one-based index of the column containing the problem. The column number should refer to some text file that is given by {@link #getSource()}. Gets the exception that caused this problem (if any). Gets the one-based index of the line containing the problem. The line number should refer to some text file that is given by {@link #getSource()}. Gets the location of the problem. The location is a user-friendly combination of the values from {@link #getSource()}, {@link #getLineNumber()} and {@link #getColumnNumber()}. The exact syntax of the returned value is undefined. Gets the message that describes this problem. Gets the severity level of this problem. Gets the hint about the source of the problem. While the syntax of this hint is unspecified and depends on the creator of the problem, the general expectation is that the hint provides sufficient information to the user to track the problem back to its origin. A concrete example for such a source hint can be the file path or URL from which the settings were read.
Adds the specified problem. Either message or exception is required  The next messages will be bound to this source. When calling this method again, previous messages keep their source, but the next messages will use the new source.
The default implementation is not visible, create it with this factory

-----------/ - Methods -/ -----------/ Method addPluginRepository. -- void addPluginRepository( Repository ) Method addProperty. -- void addProperty( String, String ) Method addRepository. -- void addRepository( Repository ) Method clone. -- Profile clone() Get the conditional logic which will automatically trigger the inclusion of this profile. -- Activation getActivation() Method getPluginRepositories. -- java.util.List<Repository> getPluginRepositories() Method getProperties. -- java.util.Properties getProperties() Method getRepositories. -- java.util.List<Repository> getRepositories() Method removePluginRepository. -- void removePluginRepository( Repository ) Method removeRepository. -- void removeRepository( Repository ) Set the conditional logic which will automatically trigger the inclusion of this profile. -- void setActivation( Activation ) Set the lists of the remote repositories for discovering plugins. -- void setPluginRepositories( java.util.List ) Set extended configuration specific to this profile goes here. Contents take the form of <code>&lt;property.name&gt;property.value&lt;/property.name&gt;</code> -- void setProperties( java.util.Properties ) Set the lists of the remote repositories. -- void setRepositories( java.util.List )
Gets the identifiers of those profiles that should be activated by explicit demand. Gets the identifiers of those profiles that should be deactivated by explicit demand. Gets the base directory of the current project (if any). Gets current calculated project properties Gets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Gets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line.

Determines whether the specified profile is active in the given activator context. Determines whether specified activation method is present in configuration or not. It should help to have AND between activation conditions Need for solving https://issues.apache.org/jira/browse/MNG-4565
Merges values from the specified profile into the given model. Implementations are expected to keep the profile and model completely decoupled by injecting deep copies rather than the original objects from the profile.

Determines the profiles which are active in the specified activation context. Active profiles will eventually be injected into the model.

-----------/ - Methods -/ -----------/ Method addActiveProfile. -- void addActiveProfile( String ) Method addProfile. -- void addProfile( Profile ) Method getActiveProfiles. -- java.util.List<String> getActiveProfiles() Get the modelEncoding field. -- String getModelEncoding() Method getProfiles. -- java.util.List<Profile> getProfiles() Method removeActiveProfile. -- void removeActiveProfile( String ) Method removeProfile. -- void removeProfile( Profile ) Set list of manually-activated build profiles, specified in the order in which they should be applied. -- void setActiveProfiles( java.util.List ) Set the modelEncoding field. -- void setModelEncoding( String ) Set configuration of build profiles for adjusting the build according to environmental parameters. -- void setProfiles( java.util.List )
-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseActivation. -- Activation parseActivation( XmlPullParser, boolean ) Method parseActivationFile. -- ActivationFile parseActivationFile( XmlPullParser, boolean ) Method parseActivationOS. -- ActivationOS parseActivationOS( XmlPullParser, boolean ) Method parseActivationProperty. -- ActivationProperty parseActivationProperty( XmlPullParser, boolean ) Method parseProfile. -- Profile parseProfile( XmlPullParser, boolean ) Method parseProfilesRoot. -- ProfilesRoot parseProfilesRoot( XmlPullParser, boolean ) Method parseRepository. -- Repository parseRepository( XmlPullParser, boolean ) Method parseRepositoryBase. -- RepositoryBase parseRepositoryBase( XmlPullParser, boolean ) Method parseRepositoryPolicy. -- RepositoryPolicy parseRepositoryPolicy( XmlPullParser, boolean ) Method read. -- ProfilesRoot read( InputStream ) Method read. -- ProfilesRoot read( InputStream, boolean )  -- ProfilesRoot read( Reader )  -- ProfilesRoot read( Reader, boolean ) Method read. -- ProfilesRoot read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, ProfilesRoot ) Method write. -- void write( Writer, ProfilesRoot ) Method writeActivation. -- void writeActivation( Activation, String, XmlSerializer ) Method writeActivationFile. -- void writeActivationFile( ActivationFile, String, XmlSerializer ) Method writeActivationOS. -- void writeActivationOS( ActivationOS, String, XmlSerializer ) Method writeActivationProperty. -- void writeActivationProperty( ActivationProperty, String, XmlSerializer ) Method writeProfile. -- void writeProfile( Profile, String, XmlSerializer ) Method writeProfilesRoot. -- void writeProfilesRoot( ProfilesRoot, String, XmlSerializer ) Method writeRepository. -- void writeRepository( Repository, String, XmlSerializer ) Method writeRepositoryBase. -- void writeRepositoryBase( RepositoryBase, String, XmlSerializer ) Method writeRepositoryPolicy. -- void writeRepositoryPolicy( RepositoryPolicy, String, XmlSerializer )



Registers the specified cache record for usage with the given project. Integrators can use the information collected from this method in combination with a custom cache implementation to dispose unused records from the cache.

Finds the first ProjectSegment matching the supplied project TODO Optimize; or maybe just rewrite the whole way aggregating mojos are being run. Returns aProjectBuildList that contains only items for the specified taskSegment
Builds a project descriptor from the specified POM file. Builds the projects for the specified POM files and optionally their children. Builds a project descriptor for the specified artifact. Builds a project descriptor for the specified artifact. Builds a project descriptor for the specified model source.


Creates the effective artifact repositories from the specified POM repositories. Creates the project realm that hosts the build extensions of the specified model. Updates the context class loader such that the container will search the project realm when the model builder injects the lifecycle bindings from the packaging in the next step. The context class loader is to be reset by the project builder when the project is fully assembled.
Add a {@link org.apache.maven.model.Profile} that has come from an external source. This may be from a custom configuration like the MavenCLI settings.xml file, or from a custom dialog in an IDE integration like M2Eclipse. Gets the start time of the build. Gets the merge mode used to combine repositories declared in the POM with the repositories specified in this request Gets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Gets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Gets the level of validation to perform on processed models.  Profiles Set any active profiles that the {@link ProjectBuilder} should consider while constructing a {@link MavenProject}. Sets the start time of the build. Sets the merge mode used to combine repositories declared in the POM with the repositories specified in this request.  Sets the system properties to use for interpolation and profile activation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Sets the user properties to use for interpolation and profile activation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Controls the level of validation to perform on processed models. By default, models are validated in strict mode.
Gets the result of the dependency resolution for the project. Gets the POM file from which the project was built. Gets the problems that were encountered during the project building. Gets the project that was built. Gets the identifier of the project that could not be built. The general format of the identifier is {@code <groupId>:<artifactId>:<version>} but some of these coordinates may still be unknown at the point the exception is thrown so this information is merely meant to assist the user.

Resolves the transitive dependencies of a project.

Gets all collected projects. Gets the downstream projects of the specified project. A downstream project is a project that directly or indirectly depends on the given project. Gets all projects in their intended build order, i.e. after topologically sorting the projects according to their inter-dependencies. Gets the upstream projects of the specified project. An upstream project is a project that directly or indirectly is a prerequisite of the given project.
This should probably be moved to a separate stub




Registers the specified cache record for usage with the given project. Integrators can use the information collected from this method in combination with a custom cache implementation to dispose unused records from the cache.

TODO !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.


-----------/ - Methods -/ -----------/ Method clone. -- Proxy clone() Get the proxy host. -- String getHost() Get the list of non-proxied hosts (delimited by |). -- String getNonProxyHosts() Get the proxy password. -- String getPassword() Get the proxy port. -- int getPort() Get the proxy protocol. -- String getProtocol() Get the proxy user. -- String getUsername() Get whether this proxy configuration is the active one. -- boolean isActive() Set whether this proxy configuration is the active one. -- void setActive( boolean ) Set the proxy host. -- void setHost( String ) Set the list of non-proxied hosts (delimited by |). -- void setNonProxyHosts( String ) Set the proxy password. -- void setPassword( String ) Set the proxy port. -- void setPort( int ) Set the proxy protocol. -- void setProtocol( String ) Set the proxy user. -- void setUsername( String )






Implementation  Tries to resolve the specified artifact from the artifacts of the given project.  Public API  Determines whether the specified artifact refers to test classes.



-----------/ - Methods -/ -----------/ Method clone. -- Relocation clone() Get the new artifact ID of the artifact. -- String getArtifactId() Get the group ID the artifact has moved to. -- String getGroupId()  -- InputLocation getLocation( Object ) Get an additional message to show the user about the move, such as the reason. -- String getMessage() Get the new version of the artifact. -- String getVersion() Set the new artifact ID of the artifact. -- void setArtifactId( String ) Set the group ID the artifact has moved to. -- void setGroupId( String )  -- void setLocation( Object, InputLocation ) Set an additional message to show the user about the move, such as the reason. -- void setMessage( String ) Set the new version of the artifact. -- void setVersion( String )


Merges values from general report plugin configuration into the individual reports sets of the given model.
-----------/ - Methods -/ -----------/ Method addReportSet. -- void addReportSet( ReportSet ) Method clone. -- ReportPlugin clone()  Reset the <code>reportSetMap</code> field to <code>null</code> Get the artifact ID of the reporting plugin in the repository. -- String getArtifactId() Get the group ID of the reporting plugin in the repository. -- String getGroupId()  Method getReportSets. -- java.util.List<ReportSet> getReportSets()  Get the version of the reporting plugin to be used. -- String getVersion() Method removeReportSet. -- void removeReportSet( ReportSet ) Set the artifact ID of the reporting plugin in the repository. -- void setArtifactId( String ) Set the group ID of the reporting plugin in the repository. -- void setGroupId( String ) Set multiple specifications of a set of reports, each having (possibly) different configuration. This is the reporting parallel to an <code>execution</code> in the build. -- void setReportSets( java.util.List ) Set the version of the reporting plugin to be used. -- void setVersion( String )
-----------/ - Methods -/ -----------/ Method addReport. -- void addReport( String ) Method clone. -- ReportSet clone() Get the unique id for this report set, to be used during POM inheritance and profile injection for merging of report sets. -- String getId() Method getReports. -- java.util.List<String> getReports() Method removeReport. -- void removeReport( String ) Set the unique id for this report set, to be used during POM inheritance and profile injection for merging of report sets. -- void setId( String ) Set the list of reports from this plugin which should be generated from this set. -- void setReports( java.util.List )
-----------/ - Methods -/ -----------/ Method addPlugin. -- void addPlugin( ReportPlugin ) Method clone. -- Reporting clone() Reset the <code>reportPluginMap</code> field to <code>null</code> Get if true, then the default reports are not included in the site generation. This includes the reports in the "Project Info" menu. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>false</code>. -- String getExcludeDefaults()  -- InputLocation getLocation( Object ) Get where to store all of the generated reports. The default is <code>${project.build.directory}/site</code>. -- String getOutputDirectory() Method getPlugins. -- java.util.List<ReportPlugin> getPlugins()  Method removePlugin. -- void removePlugin( ReportPlugin ) Set if true, then the default reports are not included in the site generation. This includes the reports in the "Project Info" menu. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>false</code>. -- void setExcludeDefaults( String )  -- void setLocation( Object, InputLocation ) Set where to store all of the generated reports. The default is <code>${project.build.directory}/site</code>. -- void setOutputDirectory( String ) Set the reporting plugins to use and their configuration. -- void setPlugins( java.util.List )
Converts values from model's reporting section into the configuration for Maven Site Plugin 3.x.
-----------/ - Methods -/ -----------/ Method clone. -- Repository clone()  Get how to handle downloading of releases from this repository. -- RepositoryPolicy getReleases() Get how to handle downloading of snapshots from this repository. -- RepositoryPolicy getSnapshots() Set how to handle downloading of releases from this repository. -- void setReleases( RepositoryPolicy ) Set how to handle downloading of snapshots from this repository. -- void setSnapshots( RepositoryPolicy )
-----------/ - Methods -/ -----------/ Method clone. -- RepositoryBase clone()  Get a unique identifier for a repository. -- String getId() Get the type of layout this repository uses for locating and storing artifacts - can be "legacy" or "default". -- String getLayout() Get human readable name of the repository. -- String getName() Get the url of the repository. -- String getUrl() Set a unique identifier for a repository. -- void setId( String ) Set the type of layout this repository uses for locating and storing artifacts - can be "legacy" or "default". -- void setLayout( String ) Set human readable name of the repository. -- void setName( String ) Set the url of the repository. -- void setUrl( String )
Gets the specified data from the cache. <strong>Warning:</strong> The cache will directly return the saved reference. If the cached data is to be modified after its retrieval, the caller is responsible to create a copy of the returned data and use this instead of the cache record. Puts the specified data into the cache. <strong>Warning:</strong> The cache will directly save the provided reference. If the cached data is mutable, i.e. could be modified after being put into the cache, the caller is responsible for creating a copy of the original data and store the copy in the cache.
Get the repository metadata associated with this marker. Gets the artifact quality this metadata refers to. One of {@link #RELEASE}, {@link #SNAPSHOT} or {@link #RELEASE_OR_SNAPSHOT}. Gets the policy that applies to this metadata regarding the specified repository. Get the repository the metadata was located in. Whether this represents a snapshot. Set the metadata contents. Set the repository the metadata was located in.


Deploy metadata to the remote repository. Install the metadata in the local repository.



-----------/ - Methods -/ -----------/ Method clone. -- RepositoryPolicy clone() Get what to do when verification of an artifact checksum fails - warn, fail, etc. Valid values are "fail" or "warn". -- String getChecksumPolicy() Get the frequency for downloading updates - can be "always", "daily" (default), "interval:XXX" (in minutes) or "never" (only if it doesn't exist locally). -- String getUpdatePolicy() Get whether to use this repository for downloading this type of artifact. -- boolean isEnabled() Set what to do when verification of an artifact checksum fails - warn, fail, etc. Valid values are "fail" or "warn". -- void setChecksumPolicy( String ) Set whether to use this repository for downloading this type of artifact. -- void setEnabled( boolean ) Set the frequency for downloading updates - can be "always", "daily" (default), "interval:XXX" (in minutes) or "never" (only if it doesn't exist locally). -- void setUpdatePolicy( String )
Gets the local repository to use. Gets the remote repositories to use. Indicates whether remote repositories should be re-checked for updated artifacts/metadata regardless of their configured update policy. Indicates whether network access to remote repositories has been disabled. Enables/disabled forced checks for updated artifacts/metadata on remote repositories. Sets the local repository to use. Enables/disables network access to remote repositories. Sets the remote repositories to use.
Returns possibly {@code null} Aether repository system session to be used to resolve project dependencies.
Calculates the effective repositories for the given input repositories which are assumed to be already mirrored (if applicable). This process will essentially remove duplicate repositories by merging them into one equivalent repository. It is worth to point out that merging does not simply choose one of the input repositories and discards the others but actually combines their possibly different policies. Determines the mirror for the specified repository. Injects the authentication information into the specified repositories. For each repository that is matched by a server, its credentials will be updated to match the values from the server specification. Repositories without a matching server will have their credentials cleared. <em>Note:</em> This method must be called after {@link #injectMirror(List, List)} or the repositories will end up with the wrong credentials. Injects the mirroring information into the specified repositories. For each repository that is matched by a mirror, its URL and ID will be updated to match the values from the mirror specification. Repositories without a matching mirror will pass through unchanged. <em>Note:</em> This method must be called before {@link #injectAuthentication(List, List)} or the repositories will end up with the wrong credentials. Injects the proxy information into the specified repositories. For each repository that is matched by a proxy, its proxy data will be set accordingly. Repositories without a matching proxy will have their proxy cleared. <em>Note:</em> This method must be called after {@link #injectMirror(List, List)} or the repositories will end up with the wrong proxies. Install Deploy Map types of artifacts  Raw file transfers

Creates a shallow copy of this requirement.




TODO Use the following two instead of manageArtifact TODO Remove ResolutionListenerDM interface void manageArtifactVersion( Artifact artifact, Artifact replacement ); void manageArtifactScope( Artifact artifact, Artifact replacement ); This event means that the artifactScope has NOT been updated to a farther node artifactScope because current node is in the first level pom

Test whether the node is direct or transitive dependency.
-----------/ - Methods -/ -----------/ Method clone. -- Resource clone() Get whether resources are filtered to replace tokens with parameterised values or not. The values are taken from the <code>properties</code> element and from the properties in the files listed in the <code>filters</code> element. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>false</code>. -- String getFiltering() Get fOR INTERNAL USE ONLY. This is a unique identifier assigned to each resource to allow Maven to merge changes to this resource that take place during the execution of a plugin. This field must be managed by the generated parser and formatter classes in order to allow it to survive model interpolation. -- String getMergeId() Get describe the resource target path. The path is relative to the target/classes directory (i.e. <code>${project.build.outputDirectory}</code>). For example, if you want that resource to appear in a specific package (<code>org.apache.maven.messages</code>), you must specify this element with this value: <code>org/apache/maven/messages</code>. This is not required if you simply put the resources in that directory structure at the source, however. -- String getTargetPath() Set whether resources are filtered to replace tokens with parameterised values or not. The values are taken from the <code>properties</code> element and from the properties in the files listed in the <code>filters</code> element. Note: While the type of this field is <code>String</code> for technical reasons, the semantic type is actually <code>Boolean</code>. Default value is <code>false</code>. -- void setFiltering( String ) Set fOR INTERNAL USE ONLY. This is a unique identifier assigned to each resource to allow Maven to merge changes to this resource that take place during the execution of a plugin. This field must be managed by the generated parser and formatter classes in order to allow it to survive model interpolation. -- void setMergeId( String ) Set describe the resource target path. The path is relative to the target/classes directory (i.e. <code>${project.build.outputDirectory}</code>). For example, if you want that resource to appear in a specific package (<code>org.apache.maven.messages</code>), you must specify this element with this value: <code>org/apache/maven/messages</code>. This is not required if you simply put the resources in that directory structure at the source, however. -- void setTargetPath( String )

New result consisting of given result and new problem. Convenience for newResult(result.get(), concat(result.getProblems(),problems)). New result that includes the given Error with problems describing the cause Error with partial result and problems describing the cause helper to determine if problems contain error New result - determine whether error or success by checking problems for errors Turns the given results into a single result by combining problems and models into single collection. Success without warnings Success with warnings Success with warnings

Retrieves the current Maven version, for example "3.0.2". Checks whether the current Maven runtime matches the specified version range. A version range can either use the usual mathematical syntax "[2.0.10,2.1.0),[3.0,)" or use a single version "2.2.1". The latter is a short form for "[2.2.1,)", i.e. denotes the minimum version required.
-----------/ - Methods -/ -----------/ Method clone. -- Scm clone() Get the source control management system URL that describes the repository and how to connect to the repository. For more information, see the <a href="https://maven.apache.org/scm/scm-url-format.html">URL format</a> and <a href="https://maven.apache.org/scm/scms-overview.html">list of supported SCMs</a>. This connection is read-only. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- String getConnection() Get just like <code>connection</code>, but for developers, i.e. this scm connection will not be read only. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- String getDeveloperConnection()  -- InputLocation getLocation( Object ) Get the tag of current code. By default, it's set to HEAD during development. -- String getTag() Get the URL to the project's browsable SCM repository, such as ViewVC or Fisheye. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- String getUrl() Set the source control management system URL that describes the repository and how to connect to the repository. For more information, see the <a href="https://maven.apache.org/scm/scm-url-format.html">URL format</a> and <a href="https://maven.apache.org/scm/scms-overview.html">list of supported SCMs</a>. This connection is read-only. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- void setConnection( String ) Set just like <code>connection</code>, but for developers, i.e. this scm connection will not be read only. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- void setDeveloperConnection( String )  -- void setLocation( Object, InputLocation ) Set the tag of current code. By default, it's set to HEAD during development. -- void setTag( String ) Set the URL to the project's browsable SCM repository, such as ViewVC or Fisheye. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- void setUrl( String )

-----------/ - Methods -/ -----------/ Method clone. -- Server clone() Get extra configuration for the transport layer. -- Object getConfiguration() Get the permissions for directories when they are created. -- String getDirectoryPermissions() Get the permissions for files when they are created. -- String getFilePermissions() Get the passphrase used in conjunction with the privateKey to authenticate. -- String getPassphrase() Get the password used in conjunction with the username to authenticate. -- String getPassword() Get the private key location used to authenticate. -- String getPrivateKey() Get the username used to authenticate. -- String getUsername() Set extra configuration for the transport layer. -- void setConfiguration( Object ) Set the permissions for directories when they are created. -- void setDirectoryPermissions( String ) Set the permissions for files when they are created. -- void setFilePermissions( String ) Set the passphrase used in conjunction with the privateKey to authenticate. -- void setPassphrase( String ) Set the password used in conjunction with the username to authenticate. -- void setPassword( String ) Set the private key location used to authenticate. -- void setPrivateKey( String ) Set the username used to authenticate. -- void setUsername( String )



-----------/ - Methods -/ -----------/ Method addActiveProfile. -- void addActiveProfile( String ) Method addMirror. -- void addMirror( Mirror ) Method addPluginGroup. -- void addPluginGroup( String ) Method addProfile. -- void addProfile( Profile ) Method addProxy. -- void addProxy( Proxy ) Method addServer. -- void addServer( Server ) Method clone. -- Settings clone() Reset the <code>activeProxy</code> field to <code>null</code> Reset the <code>profileMap</code> field to <code>null</code> Method getActiveProfiles. -- java.util.List<String> getActiveProfiles()  Get the local repository.<br><b>Default value is:</b> <tt>${user.home}/.m2/repository</tt> -- String getLocalRepository() Method getMirrors. -- java.util.List<Mirror> getMirrors() Get the modelEncoding field. -- String getModelEncoding() Method getPluginGroups. -- java.util.List<String> getPluginGroups() Method getProfiles. -- java.util.List<Profile> getProfiles()  Method getProxies. -- java.util.List<Proxy> getProxies() Method getServers. -- java.util.List<Server> getServers() Get whether Maven should attempt to interact with the user for input. -- boolean isInteractiveMode() Get indicate whether maven should operate in offline mode full-time. -- boolean isOffline() Get whether Maven should use the plugin-registry.xml file to manage plugin versions. -- boolean isUsePluginRegistry() Method removeActiveProfile. -- void removeActiveProfile( String ) Method removeMirror. -- void removeMirror( Mirror ) Method removePluginGroup. -- void removePluginGroup( String ) Method removeProfile. -- void removeProfile( Profile ) Method removeProxy. -- void removeProxy( Proxy ) Method removeServer. -- void removeServer( Server ) Set list of manually-activated build profiles, specified in the order in which they should be applied. -- void setActiveProfiles( java.util.List ) Set whether Maven should attempt to interact with the user for input. -- void setInteractiveMode( boolean ) Set the local repository.<br><b>Default value is:</b> <tt>${user.home}/.m2/repository</tt> -- void setLocalRepository( String ) Set configuration of download mirrors for repositories. -- void setMirrors( java.util.List ) Set the modelEncoding field. -- void setModelEncoding( String ) Set indicate whether maven should operate in offline mode full-time. -- void setOffline( boolean ) Set list of groupIds to search for a plugin when that plugin groupId is not explicitly provided. -- void setPluginGroups( java.util.List ) Set configuration of build profiles for adjusting the build according to environmental parameters. -- void setProfiles( java.util.List ) Set configuration for different proxy profiles. Multiple proxy profiles might come in handy for anyone working from a notebook or other mobile platform, to enable easy switching of entire proxy configurations by simply specifying the profile id, again either from the command line or from the defaults section below. -- void setProxies( java.util.List ) Set configuration of server-specific settings, mainly authentication method. This allows configuration of authentication on a per-server basis. -- void setServers( java.util.List ) Set whether Maven should use the plugin-registry.xml file to manage plugin versions. -- void setUsePluginRegistry( boolean )

Builds the effective settings of the specified settings files.
Gets the problems that caused this exception.
Gets the global settings file. Gets the global settings source. Gets the system properties to use for interpolation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Gets the user properties to use for interpolation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Gets the user settings file. Gets the user settings source. Sets the global settings file. A non-existent settings file is equivalent to empty settings. If both user settings and global settings are given, the user settings take precedence. Sets the global settings source. If both user settings and a global settings are given, the user settings take precedence. Sets the system properties to use for interpolation. The system properties are collected from the runtime environment like {@link System#getProperties()} and environment variables. Sets the user properties to use for interpolation. The user properties have been configured directly by the user on his discretion, e.g. via the {@code -Dkey=value} parameter on the command line. Sets the user settings file. A non-existent settings file is equivalent to empty settings. If both a user settings file and a global settings file are given, the user settings take precedence. Sets the user settings source. If both user settings and a global settings are given, the user settings take precedence.
Gets the assembled settings. Gets the problems that were encountered during the settings building. Note that only problems of severity {@link SettingsProblem.Severity#WARNING} and below are reported here. Problems with a higher severity level cause the settings builder to fail with a {@link SettingsBuildingException}.

Decrypts passwords in the settings.
Gets the proxies whose passwords should be decrypted. Gets the servers whose passwords should be decrypted. Sets the proxies whose passwords should be decrypted. Sets the servers whose passwords should be decrypted.
Gets the problems that were encountered during the settings decryption. Gets the decrypted proxies. Gets the decrypted proxy. This is a convenience method to retrieve the first element from {@link #getProxies()}. Gets the decrypted server. This is a convenience method to retrieve the first element from {@link #getServers()}. Gets the decrypted servers.
Gets the one-based index of the column containing the error. Gets the one-based index of the line containing the error.
Gets the one-based index of the column containing the problem. The column number should refer to some text file that is given by {@link #getSource()}. Gets the exception that caused this problem (if any). Gets the one-based index of the line containing the problem. The line number should refer to some text file that is given by {@link #getSource()}. Gets the location of the problem. The location is a user-friendly combination of the values from {@link #getSource()}, {@link #getLineNumber()} and {@link #getColumnNumber()}. The exact syntax of the returned value is undefined. Gets the message that describes this problem. Gets the severity level of this problem. Gets the hint about the source of the problem. While the syntax of this hint is unspecified and depends on the creator of the problem, the general expectation is that the hint provides sufficient information to the user to track the problem back to its origin. A concrete example for such a source hint can be the file path or URL from which the settings were read.
Adds the specified problem.
Reads the settings from the specified file. Reads the settings from the specified byte stream. The stream will be automatically closed before the method returns. Reads the settings from the specified character reader. The reader will be automatically closed before the method returns.


Validate the specified settings.
Writes the supplied settings to the specified file. Any non-existing parent directories of the output file will be created automatically. Writes the supplied settings to the specified byte stream. The stream will be automatically closed before the method returns. Writes the supplied settings to the specified character writer. The writer will be automatically closed before the method returns.

-----------/ - Methods -/ -----------/ Method checkFieldWithDuplicate. -- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set ) Method checkUnknownAttribute. -- void checkUnknownAttribute( XmlPullParser, String, String, boolean ) Method checkUnknownElement. -- void checkUnknownElement( XmlPullParser, boolean ) Returns the state of the "add default entities" flag. -- boolean getAddDefaultEntities() Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser ) Method getBooleanValue. -- boolean getBooleanValue( String, String, XmlPullParser, String ) Method getByteValue. -- byte getByteValue( String, String, XmlPullParser, boolean ) Method getCharacterValue. -- char getCharacterValue( String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, String, XmlPullParser ) Method getDateValue. -- java.util.Date getDateValue( String, String, XmlPullParser ) Method getDoubleValue. -- double getDoubleValue( String, String, XmlPullParser, boolean ) Method getFloatValue. -- float getFloatValue( String, String, XmlPullParser, boolean ) Method getIntegerValue. -- int getIntegerValue( String, String, XmlPullParser, boolean ) Method getLongValue. -- long getLongValue( String, String, XmlPullParser, boolean ) Method getRequiredAttributeValue. -- String getRequiredAttributeValue( String, String, XmlPullParser, boolean ) Method getShortValue. -- short getShortValue( String, String, XmlPullParser, boolean ) Method getTrimmedValue. -- String getTrimmedValue( String ) Method interpolatedTrimmed. -- String interpolatedTrimmed( String, String ) Method nextTag. -- int nextTag( XmlPullParser ) Method parseActivation. -- Activation parseActivation( XmlPullParser, boolean ) Method parseActivationFile. -- ActivationFile parseActivationFile( XmlPullParser, boolean ) Method parseActivationOS. -- ActivationOS parseActivationOS( XmlPullParser, boolean ) Method parseActivationProperty. -- ActivationProperty parseActivationProperty( XmlPullParser, boolean ) Method parseIdentifiableBase. -- IdentifiableBase parseIdentifiableBase( XmlPullParser, boolean ) Method parseMirror. -- Mirror parseMirror( XmlPullParser, boolean ) Method parseProfile. -- Profile parseProfile( XmlPullParser, boolean ) Method parseProxy. -- Proxy parseProxy( XmlPullParser, boolean ) Method parseRepository. -- Repository parseRepository( XmlPullParser, boolean ) Method parseRepositoryBase. -- RepositoryBase parseRepositoryBase( XmlPullParser, boolean ) Method parseRepositoryPolicy. -- RepositoryPolicy parseRepositoryPolicy( XmlPullParser, boolean ) Method parseServer. -- Server parseServer( XmlPullParser, boolean ) Method parseSettings. -- Settings parseSettings( XmlPullParser, boolean ) Method parseTrackableBase. -- TrackableBase parseTrackableBase( XmlPullParser, boolean ) Method read. -- Settings read( InputStream ) Method read. -- Settings read( InputStream, boolean )  -- Settings read( Reader )  -- Settings read( Reader, boolean ) Method read. -- Settings read( XmlPullParser, boolean ) Sets the state of the "add default entities" flag. -- void setAddDefaultEntities( boolean )
-----------/ - Methods -/ -----------/ Method setFileComment. -- void setFileComment( String ) Method write. -- void write( OutputStream, Settings ) Method write. -- void write( Writer, Settings ) Method writeActivation. -- void writeActivation( Activation, String, XmlSerializer ) Method writeActivationFile. -- void writeActivationFile( ActivationFile, String, XmlSerializer ) Method writeActivationOS. -- void writeActivationOS( ActivationOS, String, XmlSerializer ) Method writeActivationProperty. -- void writeActivationProperty( ActivationProperty, String, XmlSerializer ) Method writeIdentifiableBase. -- void writeIdentifiableBase( IdentifiableBase, String, XmlSerializer ) Method writeMirror. -- void writeMirror( Mirror, String, XmlSerializer ) Method writeProfile. -- void writeProfile( Profile, String, XmlSerializer ) Method writeProxy. -- void writeProxy( Proxy, String, XmlSerializer ) Method writeRepository. -- void writeRepository( Repository, String, XmlSerializer ) Method writeRepositoryBase. -- void writeRepositoryBase( RepositoryBase, String, XmlSerializer ) Method writeRepositoryPolicy. -- void writeRepositoryPolicy( RepositoryPolicy, String, XmlSerializer ) Method writeServer. -- void writeServer( Server, String, XmlSerializer ) Method writeSettings. -- void writeSettings( Settings, String, XmlSerializer ) Method writeTrackableBase. -- void writeTrackableBase( TrackableBase, String, XmlSerializer )

A simple implementation which logs messages of level DEBUG according to the format outlined above. Perform single parameter substitution before logging the message of level DEBUG according to the format outlined above. Perform double parameter substitution before logging the message of level DEBUG according to the format outlined above. Perform double parameter substitution before logging the message of level DEBUG according to the format outlined above. Log a message of level DEBUG, including an exception. A simple implementation which always logs messages of level ERROR according to the format outlined above. Perform single parameter substitution before logging the message of level ERROR according to the format outlined above. Perform double parameter substitution before logging the message of level ERROR according to the format outlined above. Perform double parameter substitution before logging the message of level ERROR according to the format outlined above. Log a message of level ERROR, including an exception. For formatted messages, first substitute arguments and then log. For formatted messages, first substitute arguments and then log. A simple implementation which logs messages of level INFO according to the format outlined above. Perform single parameter substitution before logging the message of level INFO according to the format outlined above. Perform double parameter substitution before logging the message of level INFO according to the format outlined above. Perform double parameter substitution before logging the message of level INFO according to the format outlined above. Log a message of level INFO, including an exception. Are {@code debug} messages currently enabled? Are {@code error} messages currently enabled? Are {@code info} messages currently enabled? Is the given log level currently enabled? Are {@code trace} messages currently enabled? Are {@code warn} messages currently enabled? This is our internal implementation for logging regular (non-parameterized) log messages. A simple implementation which logs messages of level TRACE according to the format outlined above. Perform single parameter substitution before logging the message of level TRACE according to the format outlined above. Perform double parameter substitution before logging the message of level TRACE according to the format outlined above. Perform double parameter substitution before logging the message of level TRACE according to the format outlined above. Log a message of level TRACE, including an exception. A simple implementation which always logs messages of level WARN according to the format outlined above. Perform single parameter substitution before logging the message of level WARN according to the format outlined above. Perform double parameter substitution before logging the message of level WARN according to the format outlined above. Perform double parameter substitution before logging the message of level WARN according to the format outlined above. Log a message of level WARN, including an exception.
Return an appropriate {@link SimpleLogger} instance by name. Clear the internal logger cache. This method is intended to be called by classes (in the same package) for testing purposes. This method is internal. It can be modified, renamed or removed at any time without notice. You are strongly discouraged from calling this method in production code.


-----------/ - Methods -/ -----------/ Method clone. -- Site clone() Get a unique identifier for a deployment location. This is used to match the site to configuration in the <code>settings.xml</code> file, for example. -- String getId()  -- InputLocation getLocation( Object ) Get human readable name of the deployment location. -- String getName() Get the url of the location where website is deployed, in the form <code>protocol://hostname/path</code>. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- String getUrl() Set a unique identifier for a deployment location. This is used to match the site to configuration in the <code>settings.xml</code> file, for example. -- void setId( String )  -- void setLocation( Object, InputLocation ) Set human readable name of the deployment location. -- void setName( String ) Set the url of the location where website is deployed, in the form <code>protocol://hostname/path</code>. <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or <code>project.directory</code> property). -- void setUrl( String )
Activate logging implementation configuration (if necessary). Set root logging level.

<b>Warning</b>: ignored (always return <code>null</code>). <b>Warning</b>: ignored (always return <code>0 == Logger.LEVEL_DEBUG</code>). <b>Warning</b>: ignored.
<b>Warning</b>: ignored (always return <code>0</code>). The logger name for a component with a non-null hint is <code>role.hint</code>. <b>Warning</b>: this does not conform to logger name as class name convention. (and what about <code>null</code> and <code>default</code> hint equivalence?) <b>Warning</b>: ignored (always return <code>0</code>).  Trying to give loggers back is a bad idea. Ceki said so :-) notice to self: what was this method supposed to do?  <b>Warning</b>: ignored. <b>Warning</b>: ignored. <b>Warning</b>: ignored. <b>Warning</b>: ignored.


These are the only methods we need in our primordial logger   Don't need any of this
-----------/ - Methods -/ -----------/ Method clone. -- Snapshot clone() Get the incremental build number. -- int getBuildNumber() Get the time it was deployed. -- String getTimestamp() Get whether to use a local copy instead (with filename that includes the base version). -- boolean isLocalCopy() Set the incremental build number. -- void setBuildNumber( int ) Set whether to use a local copy instead (with filename that includes the base version). -- void setLocalCopy( boolean ) Set the time it was deployed. -- void setTimestamp( String )



-----------/ - Methods -/ -----------/ Method clone. -- SnapshotVersion clone() Get the classifier of the sub-artifact. -- String getClassifier() Get the file extension of thesub-artifact. -- String getExtension() Get the timestamp when this version information was last updated. The timestamp is expressed using UTC in the format yyyyMMddHHmmss. -- String getUpdated() Get the resolved snapshot version of the sub-artifact. -- String getVersion() Set the classifier of the sub-artifact. -- void setClassifier( String ) Set the file extension of thesub-artifact. -- void setExtension( String ) Set the timestamp when this version information was last updated. The timestamp is expressed using UTC in the format yyyyMMddHHmmss. -- void setUpdated( String ) Set the resolved snapshot version of the sub-artifact. -- void setVersion( String )
Gets a byte stream to the source contents. Closing the returned stream is the responsibility of the caller. Provides a user-friendly hint about the location of the source. This could be a local file path, a URI or just an empty string. The intention is to assist users during error reporting.
Return the singleton of this class.
Currently this method always returns an instance of {@link StaticMDCBinder}. Return the singleton of this class.
Currently this method always returns an instance of {@link BasicMarkerFactory}. Currently, this method returns the class name of {@link BasicMarkerFactory}. Return the singleton of this class.

Empirical data from 3.x, actual =40
Gets the character sequence of this settings source.
Gets the content of this source.

Gets the super POM for the specified model version. The returned model is supposed to be read-only, i.e. if the caller intends to make updates to the model the return value must be cloned before updating to ensure the modifications don't affect future retrievals of the super POM.
Thread-safe System.properties copy implementation. Copies the given {@link Properties} object into a new {@link Properties} object, in a thread-safe manner. Returns a copy of {@link System#getProperties()} in a thread-safe manner.




Gets the platform tool executable. get the type of toolchain.
Returns the default instance of the particular type of toolchain, can return <code>null</code> if not applicable. TODO keep around?? Create instance of toolchain.
Retrieve toolchain of specified type from build context. It is expected that <code>maven-toolchains-plugin</code> contains the configuration to select the appropriate toolchain and is executed at the beginning of the build. Select all toolchains available in user settings matching the type and requirements, independently from <code>maven-toolchains-plugin</code>.
Retrieves every toolchains of given type available in user settings. Stores the toolchain into build context for later use by toolchain-aware plugins.
-----------/ - Methods -/ -----------/ Method addProvide. -- void addProvide( String, String ) Method clone. -- ToolchainModel clone() Method equals. -- boolean equals( Object ) Get <p>Toolchain configuration information, like location or any information that is to be retrieved.</p> <p>Actual content structure is completely open: each toolchain type will define its own format and semantics.</p> <p>In general, this is a properties format: <code>&lt;name&gt;value&lt;/name&gt;</code> with per-toolchain defined properties names.</p> -- Object getConfiguration() Method getProvides. -- java.util.Properties getProvides() Get type of toolchain:<ul> <li><code>jdk</code> for <a href="https://maven.apache.org/plugins/maven-toolchains-plugin/toolchains/jdk.html">JDK Standard Toolchain</a>,</li> <li>other value for <a href="https://maven.apache.org/plugins/maven-toolchains-plugin/toolchains/custom.html">Custom Toolchain</a></li> </ul> -- String getType() Method hashCode. -- int hashCode() Set <p>Toolchain configuration information, like location or any information that is to be retrieved.</p> <p>Actual content structure is completely open: each toolchain type will define its own format and semantics.</p> <p>In general, this is a properties format: <code>&lt;name&gt;value&lt;/name&gt;</code> with per-toolchain defined properties names.</p> -- void setConfiguration( Object ) Set <p>Toolchain identification information, which will be matched against project requirements.</p> <p>For Maven 2.0.9 to 3.2.3, the actual content structure was completely open: each toolchain type would define its own format and semantics. In general, this was a properties format.</p> <p>Since Maven 3.2.4, the type for this field has been changed to Properties to match the de-facto format.</p> <p>Each toolchain defines its own properties names and semantics.</p> -- void setProvides( java.util.Properties ) Set type of toolchain:<ul> <li><code>jdk</code> for <a href="https://maven.apache.org/plugins/maven-toolchains-plugin/toolchains/jdk.html">JDK Standard Toolchain</a>,</li> <li>other value for <a href="https://maven.apache.org/plugins/maven-toolchains-plugin/toolchains/custom.html">Custom Toolchain</a></li> </ul> -- void setType( String )
Let the toolchain decide if it matches requirements defined in the toolchain plugin configuration.
Builds the effective toolchains of the specified toolchains files.
Gets the problems that caused this exception.
Gets the global toolchains source. Gets the user toolchains source. Sets the global toolchains source. If both user toolchains and a global toolchains are given, the user toolchains take precedence. Sets the user toolchains source. If both user toolchains and a global toolchains are given, the user toolchains take precedence.
Gets the assembled toolchains. Return a list of problems, if any.
Gets the one-based index of the column containing the error. Gets the one-based index of the line containing the error.
Reads the toolchains from the specified file. Reads the toolchains from the specified byte stream. The stream will be automatically closed before the method returns. Reads the toolchains from the specified character reader. The reader will be automatically closed before the method returns.
-----------/ - Methods -/ -----------/ Method clone. -- TrackableBase clone()



Gets the artifact id of the unresolvable model. Gets the group id of the unresolvable model. Gets the version of the unresolvable model.




Normalizes the specified URL.

Gets the settings URL of this model source.
Gets the URL of this source.



<p> Create a version range from a string representation </p> Some spec examples are: <ul> <li><code>1.0</code> Version 1.0</li> <li><code>[1.0,2.0)</code> Versions 1.0 (included) to 2.0 (not included)</li> <li><code>[1.0,2.0]</code> Versions 1.0 to 2.0 (both included)</li> <li><code>[1.5,)</code> Versions 1.5 and higher</li> <li><code>(,1.0],[1.2,)</code> Versions up to 1.0 (included) and 1.2 or higher</li> </ul> Creates and returns a new <code>VersionRange</code> that is a restriction of this version range and the specified version range. <p> Note: Precedence is given to the recommended version from this version range over the recommended version from the specified version range. </p>
-----------/ - Methods -/ -----------/ Method addSnapshotVersion. -- void addSnapshotVersion( SnapshotVersion ) Method addVersion. -- void addVersion( String ) Method clone. -- Versioning clone() Get when the metadata was last updated. -- String getLastUpdated() Get what the latest version in the directory is, including snapshots. -- String getLatest() Get what the latest version in the directory is, of the releases only. -- String getRelease() Get the current snapshot data in use for this version (artifact snapshots only). -- Snapshot getSnapshot() Method getSnapshotVersions. -- java.util.List<SnapshotVersion> getSnapshotVersions() Method getVersions. -- java.util.List<String> getVersions() Method removeSnapshotVersion. -- void removeSnapshotVersion( SnapshotVersion ) Method removeVersion. -- void removeVersion( String ) Set when the metadata was last updated. -- void setLastUpdated( String ) Set what the latest version in the directory is, including snapshots. -- void setLatest( String ) Set what the latest version in the directory is, of the releases only. -- void setRelease( String ) Set the current snapshot data in use for this version (artifact snapshots only). -- void setSnapshot( Snapshot ) Set information for each sub-artifact available in this artifact snapshot. -- void setSnapshotVersions( java.util.List ) Set versions available of the artifact (both releases and snapshots). -- void setVersions( java.util.List )








this method is only here for backward compat (project-info-reports:dependencies) the default implementation will return an empty AuthenticationInfo










