
copi annot retent polici link retent polici runtim link retent polici cla p annot link gener closur member support
subclass implement method set condit interrupt statement subclass implement method provid good error resolut shortcut method avoid duplic code everi type loop actual wrap block differ type loop statement take statement wrap block statement first element interrupt check statement
return meta class adapt adapt set meta class adapt meta class
perform name resolut see give name type import alias newli creat class protect string type name string name boolean safe name null return null return new class name safe extract identifi antlr ast perform name resolut see give name type import alias newli creat class convert antlr ast groovi ast express helper method return true modifi flag contain visibl modifi extract identifi antlr ast comment due groovi g protect express method pointer express ast node ast node first child string name node string method pointer express pointer express new method pointer express name pointer express node return pointer express typic use map constructor think top level control structur final statement
class interfac ac super set see http oracl html flag allow depend fact write inner class tabl class class interfac ac super set see http oracl html flag allow depend fact write inner class tabl class rh instanc field move code bytecod helper load either object insid closur load top level owner gener annot attribut note ignor annot gener need current visitor return primit boolean valu boolean express implement method groovi class visitor interfac load class object stack gener byte code constant groovi code visitor interfac statement express visit bare unqualifi variabl express




compat method
list field properti name exclud must use use conveni string comma separ name use addit array use groovi liter list notat string valu code canon behavior customis use conjunct one specif relat annot e code string code equal hash code code tupl constructor valu attribut overrid within specif annot list field properti name includ must use use conveni string comma separ name use addit array use groovi liter list notat string valu code canon behavior customis use conjunct one specif relat annot e code string code equal hash code code tupl constructor valu attribut overrid within specif annot

invok closur without paramet return valu applic invok closur return valu applic javadoc see object support closur curri support closur curri p typic usag pre test case def multipli b b def doubler multipli curri assert doubl note special treatment give closur capabl curri vararg paramet consum entir vararg array instead first paramet vararg array follow exampl show pre test case def one two object other one two other sum assert type object object ljava object assert def b curri assert type object ljava object assert b def c b curri assert type ljava object assert c def c curri assert type ljava object assert def e curri assert type ljava object assert e assert e return copi closur owner deleg object field null allow proper serial one serializ get strategi closur user resolv method properti support closur revers composit p typic usag pre def twice def thrice def thrice twice equival thrice twice assert alia call closur argument p typic usag pre def twice def thrice assert thrice twice param arg argument call closur return result call closur creat cach variant closur whenev closur call map paramet return valu preserv cach make subsequ call argument fast variant keep cach valu forev e till closur get return function safe use concurr multipl thread howev implement valu high perform concurr call memoiz function ident argument valu may necessarili abl benefit cach return valu mention perform still make concurr use memoiz function safe highli recommend cach get togeth memoiz closur creat cach variant closur automat cach size adjust low limit cach size whenev closur call map paramet return valu preserv cach make subsequ call argument fast variant allow garbag collector releas entri cach time allow user specifi mani entri protect eventu evict cach entri exceed specifi preserv threshold make avail evict base lru last recent use strategi give natur garbag collector actual cach size may grow well beyond limit set user memori plenti return function safe use concurr multipl thread howev implement valu high perform concurr call memoiz function ident argument valu may necessarili abl benefit cach return valu also cach size paramet might respect accur scenario period time mention perform still make concurr use memoiz function safe highli recommend cach get togeth memoiz closur creat cach variant closur upper limit cach size whenev closur call map paramet return valu preserv cach make subsequ call argument fast variant keep valu upper size limit reach valu cach start rotat use lru last recent use strategi return function safe use concurr multipl thread howev implement valu high perform concurr call memoiz function ident argument valu may necessarili abl benefit cach return valu mention perform still make concurr use memoiz function safe highli recommend cach get togeth memoiz closur creat cach variant closur automat cach size adjust low upper limit cach size whenev closur call map paramet return valu preserv cach make subsequ call argument fast variant allow garbag collector releas entri cach time allow user specifi mani entri protect eventu evict cach entri exceed specifi preserv threshold make avail evict base lru last recent use strategi give natur garbag collector actual cach size may grow well beyond protect size limit set user memori plenti also variant never exceed size upper size limit upper size limit reach valu cach start rotat use lru last recent use strategi return function safe use concurr multipl thread howev implement valu high perform concurr call memoiz function ident argument valu may necessarili abl benefit cach return valu also cach size paramet might respect accur scenario period time mention perform still make concurr use memoiz function safe highli recommend cach get togeth memoiz closur support closur curri give index support closur curri give index paramet suppli index posit n typic usag pre def insensit b low case low case compar def sensit b b compar def def cat curri middl param util method collect search list list object key compar c def searcher collect search cat insensit sensit c def idx searcher c print string right idx println find would belong posit els println find index idx ant dog find would belong posit ant cat dog find index ant dog find would belong posit cat ant dog find would belong posit support closur right curri support closur right curri paramet suppli right rather left per normal curri method typic usag pre def divid b b def halver divid rcurri assert halver return copi closur deleg owner object replac suppli paramet use want rehydr closur make serializ thank link dehydr method support closur forward composit p typic usag pre def twice def thrice def twice thrice equival thrice twice assert javadoc see runnabl allow deleg chang perform markup build set strategi closur use resolv properti refer method default closur own first build trampolin variant current closur prevent stack overflow due deep recurs function instead leverag trampolin mechan avoid recurs call altogeth trampolin function suppos perform one step calcul instead recurs call anoth function return back new closur execut trampolin next step valu return trampolin stop return valu final result build trampolin variant current closur prevent stack overflow due deep recurs function instead leverag trampolin mechan avoid recurs call altogeth trampolin function suppos perform one step calcul instead recurs call anoth function return back new closur execut trampolin next step valu return trampolin stop return valu final result exampl pre def fact fact n total n total fact trampolin n n total trampolin def factori n fact n println factori

get code statement closur read method find action closur go perform set code statement closur use method order add action closur execut

add class node directli unit ie without sourc warnin sourc need error report use method without set sourc unit caus null pinter except add sourc unit unit add sourc file unit add input stream sourc unit add sourc file unit add set sourc file unit sourc creation add set file path unit loop driver appli oper primari class node automat skip unit alreadi process current phase loop driver appli oper sourc unit automat skip unit alreadi process current phase action synonym phase al compil compil unit sourc configur debug mode classload classpath give compil configur do due limit link url class loader url class loader dequeu sourc unit add sourc reset compil phase initi p note mean file recompil sourc unit alreadi pass phase skip high phase reach return compil unit root conveni routin get name class node get groovi class gener compil conveni routin get first class node sure one get sourc summari return class loader load ast transform return iter unit sourc unit phase handl updat phase marker sourc set classgen callback one set null remov exist set set progress callback one set null remov exist set



clear time portion date instanc use util make sens compar portion date clear time portion calendar instanc use util make sens compar portion calendar clear time portion date instanc use util make sens compar portion date common code link time calendar link time date link time date support creat new date similar properti exist date remain unalt field updat accord map chang p exampl usag pre import static calendar year def calendar def year yea def year year println time println year support creat new date similar properti exist date remain unalt field updat accord map chang p exampl usag pre import static calendar year def today new date def year yea def year year println today println year iter date repres calendar date repres give calendar inclus increment one day time iter date give date inclus decrement one day time shortcut link simpl date format output string represent calendar instanc method respect calendar assign link time zone wherea call h would use system timezon note calendar equival date string variant exist method local although calendar may assign link local inform lose therefor use control default format provid method instead system local would alway use altern simpli call link date format date instanc local pass local use calendar creat string represent date accord give format pattern p exampl system timezon gm code new date would return string code see document link simpl date format format pattern use p note new date format instanc creat everi invoc method thread safeti creat string represent date accord give format pattern timezon p exampl code def new date def tz time zone time zone gm println mm tz would return string jan see document link simpl date format format pattern use p note new date format instanc creat everi invoc method thread safeti support subscript oper calendar support subscript oper date return string represent portion date accord link date format shor default format u system local would p note new date format instanc creat everi invoc method thread safeti return string represent date time time portion date instanc accord format use link date format method use link date format shor preset day portion link date format mediu time portion output string p note new date format instanc creat everi invoc method thread safeti return string represent time portion date accord link date format mediu default format u system local would h p note new date format instanc creat everi invoc method thread safeti subtract number day date return new date subtract number day timestamp return new timestamp object subtract anoth date one return number day differ p date self date date self date p io self result neg valu subtract number day date return new date subtract anoth date one return number day differ p date self date date self date p io self result neg valu increment date one day increment calendar one day increment date one day add number day date return new date add number day timestamp return new timestamp object add number day date return new date decrement date one day decrement calendar one day decrement date one day support subscript oper mutat calendar exampl usag pre import static calendar def cal calendar da wee monday mont march println cal time monday march support subscript oper mutat date support mutat calendar map p map valu normal valu provid second paramet calendar int key either normal field valu provid first paramet method one follow string tabl calendar index valu calendar yea calendar mont calendar that month calendar that day calendar hou da calendar minut calendar secon exampl usag pre import static calendar def cal calendar def yea mont decemb that cal set println cal time christma cal set decemb println cal time christma support mutat date map p map valu normal valu provid second paramet calendar int key either normal field valu provid first paramet method one follow string tabl calendar index valu calendar yea calendar mont calendar that month calendar that day calendar hou da calendar minut calendar secon exampl usag pre import static calendar year def date new date def year yea date set year year println date convert date calendar legaci alia deprec remov futur version groovi legaci alia deprec remov futur version groovi iter date repres calendar date repres give calendar inclus increment one day time iter date give date inclus increment one day time
get absolut valu get absolut valu get absolut valu get absolut valu note method call number big integ big decim class implement method well exact match add item iter collect modifi collect add element specifi array collect behavior oper undefin specifi array modifi oper progress see also code plu oper want produc new collect contain addit item leav origin collect unchang add item iter collect modifi list insert element specifi array list specifi posit shift element current posit subsequ element right increas index new element appear list order occur array behavior oper undefin specifi array modifi oper progress see also code plu similar function copi semant e produc new list add addit item specifi posit leav origin list unchang allow usag shutdown hook without get runtim first boolean base method logic conjunct two boolean oper bitwis togeth two number bitwis togeth two bit set iter content iter check whether predic valid least one element iter element collect check whether least one element true accord groovi truth equival self element element iter content object collect check whether predic valid least one element iter content iter check whether predic valid least one element iter entri map check whether predic valid least one entri closur take one paramet pass map entri otherwis closur take two paramet pass key valu pre test case assert key valu key valu assert entri entri key entri valu coerc boolean array boolean valu boolean array fals array length true otherwis coerc byte array boolean valu byte array fals array length true otherwis coerc char array boolean valu char array fals array length true otherwis coerc doubl array boolean valu doubl array fals array length true otherwis coerc float array boolean valu float array fals array length true otherwis coerc int array boolean valu int array fals array length true otherwis coerc boolean instanc boolean valu coerc charact boolean valu charact coerc fals charact valu equal true otherwis coerc number boolean valu number coerc fals doubl valu equal true otherwis true otherwis coerc object instanc boolean valu object coerc true null fals null coerc object array boolean valu object array fals array length true otherwis coerc collect instanc boolean valu collect coerc fals empti true otherwis pre test case boolean true pre test case boolean fals coerc enumer instanc boolean valu enumer coerc fals element enumer true otherwis coerc iter instanc boolean valu iter coerc fals element iter true otherwis coerc map instanc boolean valu map coerc fals empti true otherwis pre test case boolean fals assert boolean true coerc long array boolean valu long array fals array length true otherwis coerc short array boolean valu short array fals array length true otherwis convert iter collect return origin iter alreadi collect p exampl usag pre test case assert new hash set collect instanceof collect conveni method creat immut collect pre test case mutabl def immut immut mutabl lt lt tri immut lt lt assert fals catch unsupport oper except assert true conveni method creat immut list conveni method creat immut map conveni method creat immut list conveni method creat immut sort map conveni method creat immut sort set convert iter list return origin iter alreadi list p exampl usag pre test case assert new hash set list instanceof list conveni method creat synchron collect conveni method creat synchron list conveni method creat synchron map conveni method creat synchron set conveni method creat synchron sort map conveni method creat synchron sort set coerc closur implement give class class assum interfac class singl method definit closur use implement singl method transform number give type use oper follow type support addit default link type object class ul big decim big integ doubl float convert give object type method use oper overload oper convert give array either list set sort set give class someth els call defer link type object class convert give collect anoth type default concret type use list set sort set give type constructor take collect use otherwis call defer link type object class collect alreadi give type instanc return coerc map give type use map key public method name valu implement typic valu would closur behav like method implement bitwis negat number bitwis negat bit set intern helper method intern helper method intern helper method collat iter length code size exampl pre test case list def coll list collat assert coll collat iter length code size remain element iter subdivis drop remaind fals exampl pre test case list def coll list collat fals assert coll collat iter length code size step code code step element list exampl pre test case list def coll list collat assert coll collat iter length code size step code code step element remain element iter subdivis drop remaind fals exampl pre test case def list assert list collat true assert list collat true assert list collat fals iter aggreg object transform item new valu use closur ident transform basic return list item copi origin object pre test case iter collect iter aggreg object transform item new valu use code transform closur return list transform valu exampl pre test case list true def type list collect class assert type integ string big decim boolean iter aggreg object transform item new valu use code transform closur add suppli code collector iter collect transform entri new valu use closur ident transform basic return list item copi origin collect pre test case collect iter collect transform entri new valu use code transform closur return list transform valu pre test case collect iter collect transform valu new valu use code transform closur add suppli code collector pre test case hash set collect new hash set int iter map transform map entri new valu use code transform closur return list transform valu pre test case collect key valu key valu bb assert collect entri entri key entri valu iter map transform map entri new valu use code transform closur return code collector transform valu add pre test case collect hash set key valu key valu bb set assert collect hash set entri entri key entri valu set deprec alia nest deprec alia nest variant entri iter object use ident closur transform sourc iter contain list code key valu tupl map entri object pre test case def num def tupl num collect string assert tupl def map entri assert map iter iter transform item use code transform closur return map result transform entri pre test case def letter abc collect letter index use list style assert entri index index letter index b c collect letter index use map style assert entri index index letter index b c note use result behavior code def key valu result closur strongli discourag use list size groovi normal semant appli case throw away element second one use null key valu case shorten list variant entri iter use ident closur transform suppli map destin transform entri iter iter transform item use closur transform map entri return suppli map transform entri add pre test case def letter abc collect letter index assert entri index index letter index b c assert entri index letter index b c note use result behavior code def key valu result closur strongli discourag use list size groovi normal semant appli case throw away element second one use null key valu case shorten list collector map support null key valu might get runtim error e g null pointer except illeg argument except variant entri use ident closur transform iter array transform item use code transform closur return map result transform entri pre test case def letter abc def num integ collect letter index use list style assert entri index index letter index b c collect letter index use map style assert entri index index letter index b c note use result behavior code def key valu result closur strongli discourag use list size groovi normal semant appli case throw away element second one use null key valu case shorten list variant entri use ident closur transform iter array transform item use code transform closur return map result transform entri pre test case def letter abc def num integ collect letter index assert entri index index letter index b c assert entri index letter index b c note use result behavior code def key valu result closur strongli discourag use list size groovi normal semant appli case throw away element second one use null key valu case shorten list collector map support null key valu might get runtim error e g null pointer except illeg argument except variant entri iter use ident closur transform variant entri iter variant entri iter use ident closur transform suppli map destin transform entri variant entri iter use suppli map destin transform entri iter map transform entri use code transform closur return map transform entri pre test case assert entri key valu valu key b assert entri key valu valu upper case b note use result behavior code def key valu result closur strongli discourag use list size groovi normal semant appli case throw away element second one use null key valu case shorten list map support null key valu might get runtim error e g null pointer except illeg argument except iter map transform map entri use code transform closur return map transform entri pre test case assert entri k v v k b assert entri c key valu valu upper case b c note use result behavior code def key valu result closur strongli discourag use list size groovi normal semant appli case throw away element second one use null key valu case shorten list collector map support null key valu might get runtim error e g null pointer except illeg argument except project item sourc iter collect concaten flatten result collect singl list p pre test case def num def cube even mani assert cube even def anim can elephan set def anim mani size low case assert anim def orig num set def plu increment mani assert plu increment orig size assert plu increment orig size project item sourc collect result collect concaten flatten result collect add code collector p pre test case def anim can elephan set def anim mani size low case assert anim def num def plu increment mani set assert plu increment num size project item sourc array collect concaten flatten result collect singl list p pre test case def num object def cube even mani assert cube even project item sourc iter collect concaten flatten result collect singl list p pre test case def it iter def cube even iter mani assert cube even project item sourc map result collect concaten flatten result collect add collect p pre test case def map def result mani k v list assert result b r e b u e r project item sourc map result collect concaten flatten result collect add code collector p pre test case def map def result mani k v list assert result x b r e b u e r recurs iter iter transform collect valu new valu use closur transform return potenti nest list transform valu pre test case assert nest recurs iter iter transform collect valu new valu use code transform closur return potenti nest collect transform valu pre test case def x nest vector assert x assert x instanceof vector recurs iter collect transform collect valu new valu use closur transform return potenti nest list transform valu pre test case assert nest add groovi collect iter method iter p exampl usag pre test case assert b combin b b b add groovi collect iter closur method collect p exampl usag pre test case combin x x compar two charact ordin valu charact compar ordin valu unicod valu simpl charact set ascii valu compar charact number ordin valu charact use comparison ordin valu unicod valu simpl charact set ascii valu compar number charact ordin valu charact use comparison ordin valu unicod valu simpl charact set ascii valu compar two number equal number dispatch check whether array contain give valu check whether array contain give valu check whether array contain give valu check whether array contain give valu check whether array contain give valu check whether array contain give valu return tt true iter contain item check whether array contain give valu check whether array contain give valu check whether array contain give valu return tt true iter contain element specifi array count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr satisfi give closur insid iter p exampl usag pre test case count count number occurr give valu insid iter comparison do use groovi oper use code equal valu p exampl usag pre test case count count number occurr satisfi give closur insid array count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr satisfi give closur item within iter iter becom exhaust element determin count valu p exampl usag pre test case set count number occurr give valu item within iter comparison do use groovi oper use code equal valu iter becom exhaust element determin count valu count number occurr satisfi give closur insid map closur take one paramet pass map entri otherwis closur take two paramet pass key valu p exampl usag pre test case count k v k v count number occurr give valu insid array comparison do use groovi oper use code equal valu count number occurr give valu insid array comparison do use groovi oper use code equal valu sort collect member group determin suppli map closur count group size closur return key item group return map entri distinct key return closur valu frequenc item occur group p exampl usag pre test case sort array member group determin suppli map closur count group size closur return key item group return map entri distinct key return closur valu frequenc item occur group p exampl usag pre test case object sort iter item group determin suppli map closur count group size closur return key item group return map entri distinct key return closur valu frequenc item occur group p exampl usag pre test case set group member map group determin suppli map closur count frequenc creat group closur pass map entri key valu depend number paramet closur accept return key item group result map entri key return closur valu frequenc count p pre test case result valu assert result return code true intersect two iter empti pre test case disjoint fals pre test case disjoint true divid one charact anoth ordin valu charact use divis ordin valu unicod valu simpl charact set ascii valu divid charact number ordin valu charact use divis ordin valu unicod valu simpl charact set ascii valu divid number charact ordin valu charact use divis ordin valu unicod valu simpl charact set ascii valu iter number give number inclus decrement one time iter number give number inclus decrement one time iter number give number inclus decrement one time iter number give number inclus decrement one time iter number give number inclus decrement one time iter number give number inclus decrement one time iter number give number inclus decrement one time number pass closur exampl pre downto println print number iter number give number inclus decrement one time iter number give number inclus decrement one time drop give number element head iter pre test case def string b c assert string drop b c assert string drop c assert string drop class abc iter implement iter string iter string iter abc iter def abc new abc iter assert abc drop b c assert abc drop b c assert abc drop assert abc drop drop give number element head array avail pre test case string string b c assert string drop b c string assert string drop c string assert string drop string drop give number element head iter avail origin iter step along code num element pre test case def compar iter list b collect b def it iter assert compar it drop iter iter assert compar it drop iter iter assert compar it drop drop give number element head list pre test case def string b c assert string drop b c assert string drop c assert string drop drop give number pair head map avail pre test case def string assert string drop assert string drop assert string drop map instanc order key function could drop random code num entri groovi default use link hash map issu main drop give number element head list pre test case def string b c sort set assert string drop b c sort set assert string drop c sort set assert string drop sort set drop give number element tail iter pre test case def string b c assert right b c assert right assert right class abc iter implement iter string iter string iter abc iter def abc new abc iter assert right b c assert right b assert right assert right drop give number element tail array avail pre test case string string b c assert right b c string assert right string assert right string drop give number element tail iter pre test case def obliter iter assert right b l e r assert right b l e r assert right b l e r assert right b l assert right assert right assert right drop give number element tail list pre test case def string b c assert right b c assert right assert right drop give number element tail sort set pre test case def string b c sort set assert right b c sort set assert right sort set assert right sort set return suffix iter element drop front give closur evalu true pre test case class hors iter implement iter string iter string iter hors iter def hors new hors iter assert r be e assert r e creat suffix give array drop mani element possibl front origin array call give closur condit evalu true pass drop element pre test case def num integ assert integ assert integ assert integ assert integ creat iter return suffix element origin iter mani element possibl drop front origin iter call give closur condit evalu true pass drop element pre test case def def iter next next iter assert list assert list assert list return suffix list element drop front give closur evalu true similar link iter closur except attempt preserv type origin list pre test case def num assert assert assert assert creat suffix give map drop mani entri possibl front origin map call give closur condit evalu true pass drop entri pair pre test case def shop assert key size assert valu assert k v k size v map instanc order key function could appear drop random entri groovi default use link hash map issu main return suffix sort set element drop front give closur evalu true similar link iter closur except attempt preserv type origin sort set pre test case def num sort set assert sort set assert sort set assert sort set assert sort set gener detail dump string object show class code field iter iter pass item give closur iter aggreg type datum structur pass item give closur custom type may util method simpli provid iter method item return result iter pass closur iter collect pass item give closur iter iter pass item give closur iter list pass item give closur allow map iter use closur closur take one paramet pass map entri otherwis closur take two paramet pass key valu pre test case result key valu result key valu assert result pre test case result entri result entri assert result gener order map content process guarante practis special form map e g tree map content process accord natur order map iter set pass item give closur iter sort set pass item give closur travers byte byte array alia travers byte byte array alia appli function combin input list p exampl usag pre test case combin println find iter permut collect run closur iter p exampl usag pre test case permut permut permut lt lt assert permut iter iter type pass item item index counter start zero give closur iter aggreg type datum structur pass item item index counter start zero give closur iter collect pass item item index counter start zero give closur iter iter type pass item item index counter start zero give closur iter list pass item item index counter start zero give closur allow map iter use closur closur take two paramet pass map entri item index counter start zero otherwis closur take three paramet pass key valu index pre test case result index key valu index result index key valu assert result pre test case result index entri index result index entri assert result iter set pass item item index counter start zero give closur iter sort set pass item item index counter start zero give closur compar content array content give array determin content array equal content give list order return code fals either collect code null determin content list equal content give array order return code fals either collect code null pre test case equal object compar content two list order matter number exist list compar number exampl list code null result true otherwis either list code null result code fals pre test case equal assert equal assert equal number comparison work compar two map treat coerc numer valu ident p exampl usag pre test case compar content two set equal use groovi coercion rule p return tt true two set size everi member specifi set contain set equival everi member set contain specifi set number exist set compar number exampl set code null result true otherwis either set code null result code fals exampl usag pre test case set def set set def set def set assert equal assert equal assert equal assert equal use determin give predic closur valid e nsbp return code true item iter simpl exampl list pre def list def two list everi iter everi element collect check whether element code true accord groovi truth equival code self everi element element use determin give predic closur valid e nsbp return code true item datum structur simpl exampl list pre def list def two list everi use determin give predic closur valid e nsbp return code true item iter simpl exampl list pre def list def two list iter everi iter entri map check whether predic valid entri closur take one paramet pass map entri otherwis closur take two paramet pass key valu pre test case map assert map everi key valu valu instanceof integ assert map everi entri entri valu instanceof number find first item match ident closur e match groovi truth p exampl pre test case def item null fals assert item find find first valu match closur condit find first element array match give closur condit exampl pre test case def list integ assert list find assert null list find find first item match ident closur e match groovi truth p exampl pre test case def item null fals assert item find find first valu match closur condit exampl pre test case list assert list find find first entri match closur condit closur take two paramet entri key valu pass closur take one paramet map entri object pass pre test case find valu key b find item match ident closur e match groovi truth p exampl pre test case def item fals true null assert true find item match closur condit find element array match ident closur e match groovi truth p exampl pre test case def item fals true null object assert true find element array match give closur condit pre test case def item integ assert find item match ident closur e match groovi truth p exampl pre test case def item fals true null assert true find valu match closur condit pre test case find item match ident closur e match groovi truth p exampl pre test case def item fals true null assert true find valu match closur condit pre test case find entri match closur condit closur take one paramet pass map entri otherwis closur take two paramet key valu p code self map one tree map link hash map hashtabl properti return map preserv type otherwis hash map return p exampl usag pre test case def result valu assert result everi instanceof map entri assert result key b c assert result valu find item match ident closur e match groovi truth p exampl pre test case def item fals true null set assert true set find valu match closur condit pre test case set set iter element iter collect item return index first item match condit specifi closur iter element iter collect item start specifi index return index first item match condit specifi closur iter element iter collect item return index valu item match condit specifi closur iter element iter collect item start specifi index return index valu item match condit specifi closur iter element iter collect item return index last item match condit specifi closur iter element iter collect item start specifi index return index last item match condit specifi closur treat object iter iter valu repres return first result obtain call closur otherwis return null treat object iter iter valu repres return first result obtain call closur otherwis return result iter collect call give closur item stop first result find return result result null null return p exampl pre test case def list assert find result find null iter collect call give closur item stop first result find return result null result return p exampl pre test case def list assert find result find null assert default result find null return first closur result find pass map entri closur otherwis null return closur take two paramet entri key valu pass closur take one paramet map entri object pass pre test case assert find result valu return find key valu assert null result valu return find key valu assert find result k v k size v return find k v return first closur result find pass map entri closur otherwis result return closur take two paramet entri key valu pass closur take one paramet map entri object pass pre test case assert find result valu return find key valu assert default result valu return find key valu assert find result k v k size v return find k v iter iter transform item use suppli closur collect result p exampl pre test case def list def result result find null assert result find find iter map transform item use suppli closur collect result closur take two paramet entri key valu pass closur take one paramet map entri object pass p exampl pre test case def map def result result k v k size v find k v null assert result find find find return first item iter pre test case def set link hash set assert set first check origin unalt assert set set first element return iter iter return iter guarante defin order may appear like random element return return first item array pre test case def array array assert array first return first item list pre test case def list assert list first check origin unalt assert list flatten array array nest array collect content recurs add new collect flatten array array nest array collect content recurs add new collect flatten array array nest array collect content recurs add new collect flatten array array nest array collect content recurs add new collect flatten array array nest array collect content recurs add new collect flatten array array nest array collect content recurs add new collect flatten iter iter nest array collect content recurs add new collect pre test case flatten flatten iter iter nest array collect content recurs add new collect array collect object repres sort collect type suppli closur yield contain item otherwis closur return element correspond leaf flatten array array nest array collect content recurs add new collect flatten collect collect nest array collect content recurs add new collect pre test case flatten flatten list list nest array collect content recurs add new list pre test case flatten flatten set set nest array collect content recurs add new set pre test case set set flatten sort set sort set nest array collect content recurs add new sort set pre test case sort set sort set flatten array array nest array collect content recurs add new collect flatten array array nest array collect content recurs add new collect look item map give key return valu unless entri give key case add default valu map return pre test case map get lt lt assert map support rang subscript oper eager lazi list pre test case list true default assert list support rang subscript oper eager lazi list pre test case list default assert list null select list item eager lazi list use collect identifi index select pre test case list default assert list support subscript oper int rang boolean array support subscript oper object rang byte array support subscript oper rang boolean array support subscript oper collect boolean array support subscript oper int rang byte array support subscript oper object rang byte array primit type array method support subscript oper rang byte array support subscript oper collect byte array support subscript oper int rang char array support subscript oper object rang char array support subscript oper rang char array support subscript oper collect char array support subscript oper int rang doubl array support subscript oper object rang doubl array support subscript oper rang doubl array support subscript oper collect doubl array support subscript oper int rang float array support subscript oper object rang float array support subscript oper rang float array support subscript oper collect float array support subscript oper int rang int array support subscript oper object rang int array support subscript oper rang int array support subscript oper collect int array support subscript oper iter typic usag pre test case custom iter exampl class iter implement iter iter iter iter def iter new iter assert iter set exampl def set link hash set assert set allow subscript oper use lookup dynam properti valu properti name express normal properti notat groovi neat concis work know properti name support rang subscript oper array select list item array use collect identifi index select support retriev subset bit set use rang support subscript oper bitset support subscript oper collect pre test case assert string long integ class support subscript oper iter iter partial exhaust idx entri return idx use fulli exhaust idx use correspond entri find typic usag pre test case def it iter assert iter elabor exampl pre test case def item def iter item iter assert iter iter exhaust reset iter item iter assert iter iter partial exhaust idx start assert iter support rang subscript oper list pre test case list true assert list support rang subscript oper list pre test case list true assert list support subscript oper list pre test case list assert list select list item list use collect identifi index select pre test case list true fals assert list true support subscript oper map pre test case map assert map support subscript oper int rang long array support subscript oper object rang long array support subscript oper rang long array support subscript oper collect long array support subscript oper int rang short array support subscript oper object rang short array support subscript oper rang short array support subscript oper collect short array return index array p exampl pre test case string letter b c assert letter index return index collect p exampl pre test case assert index obtain meta class object either registri case groovi object object add class properti class object use syntax string class method println foo obtain meta class object either registri case groovi object object retriev list link meta properti object wrap list link properti valu object addit provid valu properti conveni method call link meta properti valu object provid datum form simpl pair e nsbp without type inform iter classload parent find loader class name root loader class code null return name use comparison direct comparison use may fail class may load differ classload todo remov splice get delet iter collect item object repres return item match use ident closur filter effect return element satisfi groovi truth p exampl pre test case def item fals true null assert item grep true iter collect item object repres return item match give filter call code link case object object method use switch statement method use differ kind filter like regular express class rang etc exampl pre test case def list b assert list grep assert list grep assert list grep number assert list grep string b iter array return element match use ident closur filter effect return element satisfi groovi truth p exampl pre test case def item fals true null object assert item grep true iter array item return collect item match give filter call code link case object object method use switch statement method use differ kind filter like regular express class rang etc exampl pre test case def item b object assert item grep assert item grep assert item grep number assert item grep string b iter collect return element match use ident closur filter effect return element satisfi groovi truth p exampl pre test case def item fals true null assert item grep true iter collect item return item match give filter call code link case object object method use switch statement method use differ kind filter like regular express class rang etc exampl pre test case def list b assert list grep assert list grep assert list grep number assert list grep string b iter collect return element match use ident closur filter effect return element satisfi groovi truth p exampl pre test case def item fals true null assert item grep true iter collect item return item match give filter call code link case object object method use switch statement method use differ kind filter like regular express class rang etc exampl pre test case def list b assert list grep assert list grep assert list grep number assert list grep string b iter collect return element match use ident closur filter effect return element satisfi groovi truth p exampl pre test case def item fals true null set assert item grep true set iter collect item return item match give filter call code link case object object method use switch statement method use differ kind filter like regular express class rang etc exampl pre test case def set b set assert set grep set assert set grep set assert set grep number set assert set grep string b set group current element accord valu sort iter member group determin suppli map closur closur return key item group return link hash map entri distinct key return closur valu list item group p exampl usag pre test case assert sort iter member sub group determin suppli map closur closur return key item group return link hash map entri distinct path return closur valu list item path exampl usag pre test case result assert result true fals true fals anoth exampl pre def sql sql instanc ast def datum select datum exist record els record empti array closur suppli ident closur use sort iter member sub group determin suppli map closur closur return key item group return link hash map entri distinct path return closur valu list item path exampl usag pre test case def result assert result true fals true fals anoth exampl pre def sql sql instanc ast def datum select datum exist record els record empti list closur suppli ident closur use sort array member group determin suppli map closur closur return key item group return link hash map entri distinct key return closur valu list item group p exampl usag pre test case integ item assert sort array member sub group determin suppli map closur per iter variant method sort array member sub group determin suppli map closur per list variant method group member map sub map determin suppli map closur closur pass map entri key valu depend number paramet closur accept return key item group result map entri key return closur valu map member origin map belong group instead map want list map entri use entri p code self map one tree map hashtabl properti return map preserv type otherwis link hash map return pre test case result valu assert result group member map sub map determin suppli map closur closur pass map entri key valu depend number paramet closur accept return key item group result map entri path return closur valu map member origin map belong path code self map one tree map hashtabl properti return map preserv type otherwis link hash map return pre test case result valu key next assert result b f c e g empti array closur suppli ident closur use group member map sub map determin suppli map closur closur pass map entri key valu depend number paramet closur accept return key item group result map entri path return closur valu map member origin map belong path code self map one tree map hashtabl properti return map preserv type otherwis link hash map return pre test case result valu key next assert result b f c e g empti list closur suppli ident closur use group map entri group determin suppli map closur closur pass map entri key valu depend number paramet closur accept return key item group result map entri key return closur valu list map entri belong group instead list map entri want actual map use pre test case result entri valu assert result key b f assert result valu return true implement meta class properti give name note method return true realis properti take account implement properti miss return first item iter pre test case def set link hash set assert set head check origin unalt assert set set first element return iter iter return iter guarante defin order may appear like random element return return first item object array pre test case array array assert array head return first item list pre test case list assert list head assert list allow closur call object refer self synonym logic implic two boolean oper zip iter index index valu order exampl usag pre test case assert b b index assert b b index collect idx str idx str zip iter index index valu order exampl usag pre test case assert b b index assert b b index collect idx str idx str zip iter index index valu order exampl usag pre test case assert b b iter index collect e e key e valu assert b b iter index collect idx str idx str list zip iter index index valu order exampl usag pre test case assert b list assert b b iter index collect idx str str idx list return item iter exclud last item leav origin iter unchang pre test case def list assert list init assert list return item object array exclud last item pre test case string string b c def result string init assert result length assert type string return iter contain item iter except last one pre test case def iter iter def result iter init assert list return item list exclud last item leav origin list unchang pre test case def list assert list init assert list return item sort set exclud last item leav origin sort set unchang pre test case def set sort set assert set sort set assert set sort set iter give object pass first valu closur along first item result pass back inject closur along second item new result inject back closur along third item iter object possibl also know left function parlanc iter give object pass initi valu closur along first item result pass back inject closur along second item new result inject back closur along third item iter object possibl also know left function parlanc iter give array object valu use first element array valu iter remain element array iter give array pass initi valu closur along first item result pass back inject closur along second item new result inject back closur along third item element array use also know left function parlanc perform function version inject take initi valu use head collect initi valu iter tail pre test case assert inject acc val acc val assert b b b c b inject acc val acc intersect val link hash set set assert set inject b b iter give collect pass initi valu closur along first item result pass back inject closur along second item new result inject back closur along third item entir collect use also know left tt reduc function parlanc exampl pre test case assert inject acc val acc val assert inject acc val acc val assert quick brown fox acc val acc val assert inject min next next min next min def max b b max def anim assert anim inject max visual represent last exampl pre val anim v v max anim v v max anim v v max iter give iter pass initi valu closur along first item result pass back inject closur along second item new result inject back closur along third item iter expir valu also know left function parlanc iter give map pass initi valu closur along first item closur along first key valu result pass back inject closur along second item new result inject back closur along third item entir collect use also know left tt reduc function parlanc exampl pre test case def map assert map inject list k v list k v b b c c c inspect return string match would type termin creat object integ divid two charact ordin valu charact use divis ordin valu unicod valu simpl charact set ascii valu integ divid charact number ordin valu charact use divis ordin valu unicod valu simpl charact set ascii valu integ divid number charact ordin valu charact use divis ordin valu unicod valu simpl charact set ascii valu integ divid two number creat collect compos intersect iter element exist iter add result collect pre test case intersect creat collect compos intersect collect element exist collect add result collect pre test case intersect creat list compos intersect list iter element exist iter add result collect pre test case intersect creat map compos intersect map entri exist map add result map pre test case intersect pre test case intersect creat set compos intersect set iter element exist iter add result collect pre test case set set creat sort set compos intersect sort set iter element exist iter add result collect pre test case sort set sort set provid dynam method invoc method overload class implement dynam proxi easili ident check sinc overrid groovi mean equal need fallback check object ident invok use method like code def special case implement class allow test certain class switch statement exampl pre switch obj case list obj list break case set etc special implement number deleg method compar number differ type case method method overload behavior method switch statement default implement handl array type otherwis simpli deleg object may overrid type exampl pre switch case b code code call case return code true case implement collect test operand contain valu exampl pre test case case assert true break default assert fals case implement map test groovi truth valu obtain use operand key exampl pre test case case foo true bar fals assert true break default assert fals determin charact digit synonym charact digit determin charact letter synonym charact letter determin charact letter digit synonym charact letter digit determin charact lowercas synonym charact low case determin charact uppercas synonym charact upper case determin charact whitespac charact synonym charact whitespac attempt creat iter give object first convert collect attempt creat iter give object first convert collect allow enumer behav like iter note link iter remov method unsupport sinc underli enumer provid mechan remov item ident function iter support tri get iter object within collect may alreadi iter concaten string represent item array give string separ item concaten string represent item array give string separ item concaten string represent item array give string separ item concaten string representatio n item array give string separ item concaten string represent item array give string separ item concaten string represent item array give string separ item concaten string represent item iter give string separ item pre test case join concaten string represent item array give string separ item concaten string represent item iter give string separ item iter becom exhaust element determin result conjoin valu concaten string represent item array give string separ item concaten string represent item array give string separ item return last item iter pre test case def set link hash set assert set last check origin unalt assert set set first element return iter iter return iter guarante defin order may appear like random element return return last item array pre test case def array array assert array last return last item list pre test case def list assert list last check origin unalt assert list implement leav shift oper integr type non integr number type throw unsupport oper except overload leav shift oper provid easi way append object collect pre test case list list lt lt assert list overload leav shift oper provid easi way append object list pre test case list list lt lt assert list overload leav shift oper provid easi way append map entri valu map overload leav shift oper provid easi way put one map entri anoth map allow compact syntax code lt lt otherwis synonym though return origin map rather code void method exampl usag pre test case map map lt lt assert map overload leav shift oper provid easi way append object set pre test case set set set lt lt assert set set overload leav shift oper provid easi way append object sort set pre test case set sort set set lt lt assert set sort set overload leav shift oper provid easi way append object block queue case bound queue method block till space queue becom avail pre test case list new link block queue list lt lt lt lt lt lt assert list iter collect add max method iter object pre test case assert max select item iter pass paramet suppli closur return maximum valu null return valu repres least possibl return valu item suppli closur return null will select unless item return null one item maximum valu arbitrari choic make item maximum valu p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case hello hello hi hey max length pre test case hello hello hi hey max b length b length pre test case def pet def name pet max size one assert name select maximum valu find iter use give compar pre test case assert hello hello hi hey max b length b length compar add max method object array select maximum valu find object array use closur determin correct order p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison select maximum valu find object array use give compar add max method iter object iter becom exhaust element determin maximum valu select maximum valu find iter use closur determin correct order iter becom exhaust element oper p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison select maximum valu find iter use give compar select entri map maximum calcul valu determin suppli closur one entri maximum valu arbitrari choic make entri maximum valu p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison exampl pre test case def zoo def common entri zoo max valu assert common entri def common entri zoo max b b valu valu doubl neg assert common entri edg case multipl max valu pre test case def zoo def name plu number e e key size e valu def an name plu number one assert name plu number set metaclass give class closur set metaclass give object closur add min method collect object pre test case min select item iter pass paramet suppli closur return minimum valu null return valu repres least possibl return valu one item minimum valu arbitrari choic make item minimum valu p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case assert hi hello hi hey min length pre test case def digit b b assert digit pre test case def pet def name pet min size one assert name select minimum valu find iter use give compar pre test case hi hello hi hey min b length b length compar add min method object array select minimum valu find object array use closur determin correct order p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison select minimum valu find object array use give compar add min method iter object iter becom exhaust element determin minimum valu select minimum valu find iter use closur determin correct order iter becom exhaust element oper p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison select minimum valu find iter use give compar select entri map minimum calcul valu determin suppli closur one entri minimum valu arbitrari choic make entri minimum valu p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case def zoo def common entri zoo min valu assert common entri def common entri zoo min b b valu valu doubl neg assert common entri edg case multipl min valu pre test case def zoo def char name e e key def an char name random entri assert char name subtract one charact anoth ordin valu charact use comparison ordin valu unicod valu simpl charact set ascii valu subtract number charact ordin valu charact use subtract ordin valu unicod valu simpl charact set ascii valu creat new collect compos element first iter minu everi occurr element give iter pre test case assert true true fals true fals creat new collect compos element first iter minu everi occurr give element remov pre test case true true subtract charact number ordin valu charact use subtract ordin valu unicod valu simpl charact set ascii valu creat array compos element first array minu element give iter creat new object array compos element first array minu element remov creat array compos element first array minu element give array creat new collect compos element first collect minu everi occurr element give collect pre test case true true fals true fals creat new list compos element first list minu everi occurr element give iter pre test case true true fals true fals creat new list compos element first list minu everi occurr give element remov pre test case true true creat list compos element first list minu everi occurr element give collect pre test case true true fals true fals creat map compos entri first map minu entri give map creat set compos element first set minu element give iter creat set compos element first set minu give element creat set compos element first set minu element give collect creat sort set compos element first sort set minu element give iter creat sort set compos element first sort set minu give element creat sort set compos element first sort set minu element give collect extend class global categori method extend class global categori method extend object categori method method give class super class add object extend class global categori method extend class global categori method extend class global categori method method give class super class add class perform divis modulu oper call oper multipli two charact ordin valu charact use multipl ordin valu unicod valu simpl charact set ascii valu multipli charact number ordin valu charact use multipl ordin valu unicod valu simpl charact set ascii valu creat collect compos element iter repeat certain number time note element multipl refer instanc add pre test case note iter happen support duplic e g set method effect return collect singl copi iter item multipli number charact ordin valu charact use multipl ordin valu unicod valu simpl charact set ascii valu multipli big decim doubl note method add enforc groovi rule big decim doubl doubl without method big decim method big decim would respond return big decim instead sinc big decim prefer number number number method choos old version groovi multipli big decim big integ note method add enforc groovi rule big decim long without method big decim method big decim would respond return big decim instead sinc big decim prefer number number number method choos old version groovi big integ fallback integ type groovi creat list compos element iter repeat certain number time note element multipl refer instanc add pre test case note iter happen support duplic e g set method effect return collect singl copi iter item conveni method dynam creat new instanc class call default constructor helper construct new instanc give argument constructor call base number type arg array use instanc simpli instanc default constructor number base method increment charact one increment number one provid method compar two compar use groovi default number awar compar logic disjunct two boolean oper bitwis togeth two number bitwis togeth two bit set call oper use two bit set find permut iter p exampl usag pre test case result permut assert result set find permut iter appli function permut collect result list p exampl usag pre test case set result permut collect v v assert result set add one charact anoth ordin valu charact use addit ordin valu unicod valu simpl charact set ascii valu oper alway creat new object result operand remain unchang add charact number ordin valu charact use addit ordin valu unicod valu simpl charact set ascii valu oper alway creat new object result operand remain unchang creat collect union two iter leav iter set return collect set otherwis list oper alway creat new object result operand remain unchang pre test case creat collect union iter object iter set return collect set otherwis list oper alway creat new object result operand remain unchang pre test case add number charact ordin valu charact use addit ordin valu unicod valu simpl charact set ascii valu creat array contain element origin array plu iter pre test case class abc iter implement iter string iter string iter abc iter string letter x z def result letter new abc iter assert result x z b c string assert result class array creat array contain element origin array plu addit append element pre test case integ integ result assert result integ creat array union two array pre test case integ integ b assert b integ creat array contain element origin array plu collect pre test case integ def addit assert addit integ creat collect union collect iter leav collect set return collect set otherwis list oper alway creat new object result operand remain unchang creat collect union collect object collect set return collect set otherwis list oper alway creat new object result operand remain unchang pre test case creat collect union two collect leav collect set return collect set otherwis list oper alway creat new object result operand remain unchang pre test case creat new list insert element give iter element list specifi index creat new list insert element specifi array element origin list specifi index shift element current index subsequ element right increas index new element appear result list order occur origin array behavior oper undefin list array operand modifi oper progress origin list array operand remain unchang pre test case def item def item item plu c string assert item b c assert item see also similar function modifi semant e perform chang origin list creat new list insert element give addit list element origin list specifi index shift element current index subsequ element right increas index new element appear result list order occur origin list behavior oper undefin origin list modifi oper progress origin list remain unchang pre test case def item def item item plu c assert item b c assert item see also similar function modifi semant e perform chang origin list creat list union list iter oper alway creat new object result operand remain unchang creat list union list object oper alway creat new object result operand remain unchang pre test case creat list union list collect oper alway creat new object result operand remain unchang return new map contain entri code self code entri give preced code entri key appear map appear result map valu code entri operand code self map one tree map link hash map hashtabl properti return map preserv type otherwis hash map return return new map contain entri code leav code right give preced code right key appear map appear result map valu code right operand code leav map one tree map link hash map hashtabl properti return map preserv type otherwis hash map return p roughli equival map new hash map return addit logic preserv code leav map type common case describ pre test case assert creat set union set iter oper alway creat new object result operand remain unchang creat set union set object oper alway creat new object result operand remain unchang pre test case creat set union set collect oper alway creat new object result operand remain unchang creat sort set union sort set iter oper alway creat new object result operand remain unchang creat sort set union sort set object oper alway creat new object result operand remain unchang pre test case creat sort set union sort set collect oper alway creat new object result operand remain unchang remov last item list use add pop similar push pop stack pre test case list fals assert list pop assert list fals power integ integ certain expon expon posit convert big integ call big integ method maintain precis call oper power long integ certain expon expon posit convert big integ call big integ method maintain precis call oper power number certain expon call oper power big decim integ certain expon expon posit call big decim method maintain precis call oper power big integ integ certain expon expon posit call big integ method maintain precis call oper power big integ big integ certain expon call oper decrement charact one decrement number one implement rang method primit type array implement method primit type array implement collect method primit type array valu collect argument assum valid array index valu index add list return implement idx method primit type array print valu standard output stream method deleg owner execut method print valu format groovi style print stream print valu format groovi style print writer print consol interact format print valu format groovi style self writer otherwis standard output stream print format string use specifi format string argument p exampl pre printf hello world string printf hello groovi printf integ printf printf integ printf int printf char printf byte printf short printf long printf float printf doubl printf consol print linebreak standard output stream method deleg owner execut method print valu follow newlin standard output stream method deleg owner execut method print valu format groovi style follow newlin print stream print valu format groovi style follow newlin print writer print linebreak standard output stream print consol interact format print valu format groovi style follow newlin self writer otherwis standard output stream append item list synonym add pre test case list list push x assert list x provid easi way append multipl map entri valu map allow subscript oper use set dynam name properti valu properti name express foo normal properti notat groovi neat concis work properti name know compil time public static boolean array int idx boolean valu return boolean array put idx valu public static byte array int idx object valu valu instanceof byte number n number valu valu new byte valu return byte array put idx valu public static charact array int idx object valu valu instanceof string string string valu length throw new illeg argument except string length expect get big one char c valu new charact return charact array put idx valu public static short array int idx object valu valu instanceof short number n number valu valu new short valu return short array put idx valu public static integ array int idx object valu valu instanceof integ number n number valu valu integ valu array index integ valu valu return integ valu public static long array int idx object valu valu instanceof long number n number valu valu new long valu return long array put idx valu public static float array int idx object valu valu instanceof float number n number valu valu new float valu return float array put idx valu public static doubl array int idx object valu valu instanceof doubl number n number valu valu new doubl valu return doubl array put idx valu support assign rang valu singl assign statement support assign bit set helper method allow list work subscript oper pre test case list true list assert list true helper method allow list work subscript oper pre test case list true list assert list true list subscript assign oper give rang index exampl pre test case list list b assert list b item give rang replac operand code valu operand alway treat singl valu list subscript assign oper give rang index assign operand collect exampl pre test case list list true assert list true item give rang replac item collect helper method allow list work subscript oper pre test case list list assert list helper method allow list work subscript oper pre test case list true list assert list helper method allow list work subscript oper pre test case list true list x fals assert list x fals helper method allow map work subscript oper modifi collect remov element match accord specifi closur condit see also code grep want produc new list contain item match criterion leav origin collect unchang modifi collect remov element contain within specifi object array see also code grep want produc new list contain item match criterion leav origin collect unchang modifi list remov element specifi posit list return remov element essenti alia link list ambigu list integ exampl pre test case def list assert list modifi collect remov singl instanc specifi element collect present essenti alia link collect object ambigu collect integ exampl pre test case def list element assert list return object satisfi groovi truth implement meta class respond method give name regardless argument note method return valu base realis method take account object class implement method miss method safe alway return valu never throw except return object satisfi groovi truth implement meta class respond method give name argument type note method return valu base realis method take account object class implement method miss method safe alway return valu never throw except modifi collect retain element match accord specifi closur condit word remov collect element match see also code grep want produc new list contain item match criterion leav origin collect unchang modifi collect retain element contain specifi array word remov collect element contain specifi array see also code grep want produc new list contain item match specifi item leav origin collect unchang creat new array contain item array revers order revers item array mutat true origin array modifi place return otherwis new array contain revers item produc revers iter origin iter becom exhaust element determin revers valu new iter iter revers valu return creat new list ident content list revers order pre test case def list fals assert list revers fals assert list fals revers element list mutat true origin list modifi place return otherwis new list contain revers item produc pre test case def list fals assert list revers fals fals assert list fals assert list revers true fals assert list fals iter element array revers order iter element list revers order pre test case result result lt lt assert result allow map iter revers order use closur gener order map content process guarante practis special form map e g tree map content process accord revers natur order map implement right shift oper integr type non integr number type throw unsupport oper except implement right shift unsign oper integr type non integr number type throw unsupport oper except round valu round valu round valu round valu public static boolean boolean left return boolean valu allow simpl syntax use timer timer execut give closur give delay set metaclass groovi object set metaclass give class set metaclass object allow array behav similar collect allow array behav similar collect allow array behav similar collect allow array behav similar collect allow array behav similar collect allow array behav similar collect provid standard groovi code size method iter pre test case def item def iter next empti next item pop iter iter assert iter size provid standard groovi code size method array provid standard groovi code size method iter iter becom exhaust element determin size valu allow array behav similar collect allow array behav similar collect sort collect assum collect item compar use natur order determin result order collect list sort place return otherwis element first place new list sort return leav origin collect unchang pre test case sort sort iter use give closur determin correct order iter list sort place return otherwis element first place new list sort return leav origin iter unchang p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case hi hey hello hello hi hey sort length pre test case hi hey hello hello hi hey sort b length b length sort iter assum iter item compar use natur order determin result order iter list mutat true sort place return otherwis element first place new list sort return leav origin iter unchang pre test case sort pre test case def orig def sort orig sort fals assert orig assert sort sort iter use give closur determin correct order iter list mutat true sort place return otherwis element first place new list sort return leav origin iter unchang p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case hi hey hello hello hi hey sort length pre test case hi hey hello hello hi hey sort b length b length pre test case def orig hey def sort orig sort fals upper case assert orig hey assert sort hey sort iter use give compar iter list mutat true sort place return otherwis element first place new list sort return leav origin iter unchang pre test case assert hi hey hello hello hi hey sort b length b length compar pre test case def orig hey def sort orig sort fals string ca insensitiv ord assert orig hey assert sort hey modifi array element sort order array item assum compar sort element array newli creat array use closur determin correct order p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison sort give array sort order array item assum compar mutat true array sort place return otherwis new sort array return origin array remain unchang pre test case def orig hey string def sort orig sort fals assert orig hey string assert sort hey string orig sort true assert orig hey string modifi array element sort order use closur determin correct order mutat fals new array return origin array remain unchang otherwis origin array sort place return p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case def orig hey string def sort orig sort fals size assert orig hey string assert sort hey string orig sort true size assert orig hey string modifi array element sort order determin give compar mutat true array sort place return otherwis new sort array return origin array remain unchang pre test case def orig hey string def sort orig sort fals string ca insensitiv ord assert orig hey string assert sort hey string orig sort true string ca insensitiv ord assert orig hey string sort give array sort order use give compar sort give iter item sort iter item assum compar origin iter becom exhaust element complet method call new iter produc travers item sort order sort give iter item sort iter use closur determin correct order origin iter fulli process method call p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison sort give iter item sort iter use compar origin iter becom exhaust element complet method call new iter produc travers item sort order sort element give map new order map use natur order key determin order origin map unchang pre test case sort assert map valu sort element give map new order map use closur compar determin order origin map unchang pre test case map sort b valu b valu assert map sort element give map new order map use specifi key compar determin order origin map unchang pre test case map sort b b compar assert map valu avoid unnecessari work sort alreadi sort map e ident function alreadi sort map avoid unnecessari work sort alreadi sort set e ident function alreadi sort set split item two list base closur condit first list contain item match closur express second list split item two collect base closur condit first list contain item match closur express second list p exampl usag pre test case split split item two collect base closur condit first list contain item match closur express second list p exampl usag pre test case split split item two collect base closur condit first list contain item match closur express second list p exampl usag pre test case set set set synonym link spread map map return format string use specifi format string argument sprintf string iter number give number use step increment intermedi number pass give closur exampl pre step println print even number creat map contain give key method similar list list use key rather index rang origin map unalt pre test case def orig assert map int assert map integ assert orig size creat map contain give key method similar list list use key rather index rang pre test case map find subsequ list p exampl usag pre test case result subsequ assert result set sum item array pre test case byte byte sum sum item array add result initi valu pre test case byte byte sum sum item array pre test case char char sum sum item array add result initi valu pre test case char char sum sum item array pre test case doubl doubl sum sum item array add result initi valu pre test case doubl doubl sum sum item array pre test case float float sum sum item array add result initi valu pre test case float float sum sum item array pre test case int sum sum item array add result initi valu pre test case int sum sum item iter equival invok plu method item iter pre test case sum sum result appli closur item iter code coll sum closur equival code coll collect closur sum pre test case sum sum item iter add result initi valu pre test case assert sum sum result appli closur item iter initi valu val closur equival val pre test case sum sum item array equival invok plu method item array sum result appli closur item array code array sum closur equival code array collect closur sum sum item array add result initi valu sum result appli closur item array initi valu val closur equival val sum item iter equival invok plu method item iter iter becom exhaust element determin sum valu sum result appli closur item return iter code iter sum closur equival code iter collect closur sum iter becom exhaust element determin sum valu sum item iter add result initi valu equival invok plu method item iter iter becom exhaust element determin sum valu sum result appli closur item iter initi valu val closur equival val iter becom exhaust element determin sum valu sum item array pre test case long long sum sum item array add result initi valu pre test case long long sum sum item array pre test case short short sum sum item array add result initi valu pre test case short short sum swap two element specifi posit p exampl pre test case assert fals true fals true boolean fals fals true true boolean swap swap two element specifi posit p exampl pre test case assert byte byte swap swap two element specifi posit p exampl pre test case assert char char swap swap two element specifi posit p exampl pre test case assert doubl doubl swap swap two element specifi posit p exampl pre test case assert float float swap swap two element specifi posit p exampl pre test case assert int int swap swap two element specifi posit p exampl pre test case assert c b string b c string swap two element specifi posit p exampl pre test case assert swap swap two element specifi posit p exampl pre test case assert long long swap swap two element specifi posit p exampl pre test case assert short short swap return item iter exclud first item pre test case def list assert list tail assert list return item array exclud first item pre test case string string b c def result string tail assert type string string expect b c assert result expect return origin iter throw away first element return item list exclud first item pre test case def list assert list tail assert list return item sort set exclud first item pre test case def set sort set assert set sort set assert set sort set return first code num element head iter pre test case def string b c assert string take assert string take b assert string take b c class abc iter implement iter string iter string iter abc iter def abc new abc iter assert abc take assert abc take assert abc take b c assert abc take b c return first code num element head array pre test case string string b c assert string take string assert string take b string assert string take b c string return iter first code num element iter origin iter step along code num element pre test case def def iter next true next iter def compar iter list b collect b assert compar it take assert compar it take assert compar iter take return first code num element head list pre test case def string b c assert string take assert string take b assert string take b c return new map contain first code num element head map map instanc order key function could return random code num entri groovi default use link hash map issu main pre test case def string assert string take assert string take assert string take return first code num element head sort set pre test case def string b c sort set assert string take sort set assert string take b sort set assert string take b c sort set return last code num element tail iter pre test case def string b c assert right assert right b c assert right b c class abc iter implement iter string iter string iter abc iter def abc new abc iter assert right assert right c assert right b c assert right b c return last code num element tail array pre test case string string b c assert right string assert right b c string assert right b c string return last code num element tail list pre test case def string b c assert right assert right b c assert right b c return last code num element tail sort set pre test case def string b c sort set assert right sort set assert right b c sort set assert right b c sort set return collect contain long prefix element iter element pass give closur evalu true pre test case class abc iter implement iter string iter string iter abc iter def abc new abc iter assert b assert b b return long prefix array element pass give closur evalu true pre test case def num integ assert integ assert integ assert integ return long prefix element iter element pass give condit closur evalu true p pre test case def def iter next true next iter assert list assert list assert list return long prefix list element pass give closur condit evalu true similar link iter closur except attempt preserv type origin list pre test case def num assert assert assert return long prefix map entri pair pass give closur evalu true pre test case def shop assert key size assert valu assert k v k size v map instanc order key function could appear take random entri groovi default use link hash map issu main return long prefix sort set element pass give closur condit evalu true similar link iter closur except attempt preserv type origin sort set pre test case def num sort set assert sort set assert sort set assert sort set execut closur mani time start zero current index pass closur time exampl pre time println print number return string represent give array string display content array similar array liter e code transform number big decim transform number big integ ident convers return boolean true true boolean boolean fals fals boolean transform number doubl transform number float transform number integ convert array list size element add list convert array list size element add list convert array list size element add list convert array list size element add list convert array list size element add list convert array list size element add list convert iter list iter iter becom exhaust element make convers p exampl usag pre test case x hash set assert x class hash set assert list instanceof list allow convers array mutabl list convert enumer list convert iter list iter becom exhaust element make convers convert array list size element add list convert array list size element add list return string represent give list string display content list similar list liter e code return string represent give list string display content list similar list liter e code transform number long convert charact lowercas synonym charact low case return string represent map string display content map e code return string represent map string display content map e code convert array set uniqu element add set convert array set uniqu element add set convert array set uniqu element add set convert array set uniqu element add set convert array set uniqu element add set convert array set uniqu element add set convert iter set alway return new set even iter alreadi set p exampl usag pre test case def result set assert result instanceof set assert result set convert collect set alway return new set even collect alreadi set p exampl usag pre test case def result set assert result instanceof set assert result set convert enumer set convert iter set iter becom exhaust element make convers convert array set uniqu element add set convert array set uniqu element add set sort iter assum iter element compar use link number awar compar determin result order code number awar compar special treatment number otherwis use natur order iter element element first place new list sort return leav origin iter unchang pre test case def orig def sort sort assert orig assert sort sort iter use give closur determin correct order element first place new list sort return leav origin iter unchang p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison pre test case hi hey hello hello hi hey sort length pre test case hi hey hello hello hi hey sort b length b length sort iter use give compar element first place new list sort return leav origin iter unchang pre test case def orig hey def sort sort string ca insensitiv ord assert orig hey assert sort hey return sort version give array use suppli compar sort element array newli creat array use closur determin correct order p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison return sort version give array use suppli compar determin result order pre test case def digit compar compar string list integ string list integ compar integ num def result sort digit compar assert result instanceof integ assert result sort iter assum iter element compar use link number awar compar determin result order code number awar compar special treatment number otherwis use natur order iter element new iter produc travers item sort order sort give iter item sort iter use closur determin correct order origin iter fulli process method call p closur two paramet use like tradit compar e compar two paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl paramet return compar typic integ use comparison sort give iter item use compar origin iter becom exhaust element complet method call new iter produc travers item sort order sort element give map new order map use link number awar compar map entri valu determin result order code number awar compar special treatment number otherwis use natur order iter element origin map unchang pre test case def map sort assert string sort element give map new order map use suppli closur condit compar determin order origin map unchang p closur two paramet use like tradit compar e compar two entri paramet order return neg integ zero posit integ first paramet less equal great second respect otherwis closur assum take singl entri paramet return compar typic integ use comparison pre test case def map sort b valu b valu assert string sort element give map new order map use suppli compar determin order origin map unchang pre test case def compar compar key key compar def compar compar valu valu compar def sort compar assert string def sort compar assert string avoid unnecessari work sort alreadi sort map avoid unnecessari work sort alreadi sort set creat spreadabl map iter p creat spreadabl map array p creat spreadabl map list p return new spread map map p exampl show variou possibl use case pre test case def map return b c assert fn assert fn assert fn spread map assert fn b c object spread map assert fn b c spread map assert list spread map note spread map normal use explicitli cover groovi return string represent give array return string represent give array return string represent give array return string represent give array return string represent give array return string represent give array creat string represent object return string represent array content return string represent give collect string display content collect e code return string represent give map return string represent give array return string represent give array return collect contain item iter duplic remov use natur order item determin uniqu p pre test case string letter c h string expect c h assert uniqu expect return collect contain item iter duplic remov item iter compar give closur condit duplic first member return iter retain one remov p closur take singl paramet element iter pass closur closur return valu use comparison either use link compar object link object object closur take two paramet two item iter pass argument closur return int valu indic item uniqu p pre test case class person def fname lname string string return fname lname person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c def uniqu lname lname lname lt gt lname fname lt gt fname assert b c list b c def uniqu string assert b c list b c return collect contain item iter duplic remov item iter compar give compar duplic first member return iter retain one remov p pre test case class person def fname lname string string return fname lname class person compar implement compar int object object person person person person lname lname return els return boolean object obj return equal obj person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c list uniqu person compar assert list list b c return new array contain item origin array duplic remov use natur order item array p pre test case string letter c h string expect c h def result uniqu assert result expect assert type string return new array contain item origin array duplic remov suppli compar determin item uniqu p pre test case string letter c h string expect c h assert uniqu low case low case expect assert uniqu low case expect return new array contain item origin array duplic remov suppli compar determin item uniqu p pre test case string letter c h string low c h class low compar implement compar int compar low case low case assert uniqu low compar low return iter equival iter duplic item remov use natur order item return iter equival iter duplic item remov duplic equal item deduc call suppli closur condit p suppli closur take singl paramet argument pass element closur return valu use comparison either use link compar object link object object closur take two paramet two item iter pass argument closur return int valu indic item uniqu pre test case def item hello list null null list def low null null low case def dup uniqu low list assert dup h e l null r pre test case uniqu pre test case uniqu b b return iter equival iter duplic item remov use suppli compar return list contain item list duplic remov use natur order item determin uniqu p pre test case def letter c h def expect c h assert uniqu expect return list contain item list duplic remov item list compar give closur condit duplic first member return iter retain one remov p closur take singl paramet element iter pass closur closur return valu use comparison either use link compar object link object object closur take two paramet two item iter pass argument closur return int valu indic item uniqu p pre test case class person def fname lname string string return fname lname person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c def uniqu lname lname lname lt gt lname fname lt gt fname assert b c list b c def uniqu string assert b c list b c return list contain item list duplic remov item list compar give compar duplic first member return list retain one remov p pre test case class person def fname lname string string return fname lname class person compar implement compar int object object person person person person lname lname return els return boolean object obj return equal obj person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c list uniqu person compar assert list list b c convert charact uppercas synonym charact upper case add groovi collect list method list transpos function take collect column return collect row first row consist first element column success row construct similarli p exampl usag pre test case result b transpos assert result b pre test case result b transpos assert result b truncat valu truncat valu truncat valu truncat valu negat number equival oper prece singl operand e code return number effect noop number oper overload form oper prece singl operand e code modifi collect remov duplic item use default compar pre test case uniqu conveni method make collect uniqu use closur determin duplic equal item p closur take singl paramet argument pass element closur return valu use comparison either use link compar object link object object closur take two paramet two item collect pass argument closur return int valu indic item uniqu pre test case uniqu pre test case uniqu b b remov duplic give collect use default compar mutat true work modifi origin object also return mutat fals new collect return leav origin unchang pre test case assert uniqu pre test case def orig def uniq orig uniqu fals assert orig assert uniq conveni method make collect uniqu use closur determin duplic equal item mutat true work receiv object return mutat fals new collect return p closur take singl paramet element collect pass closur closur return valu use comparison either use link compar object link object object closur take two paramet two item collect pass argument closur return int valu indic item uniqu pre test case def orig def uniq orig uniqu fals assert orig assert uniq pre test case def orig def uniq orig uniqu fals b b assert orig assert uniq remov duplic give collect mutat true work origin object also return mutat fals new collect return order member collect compar give compar duplic first member return give collect iter retain one remov give collect origin order preserv p pre test case class person def fname lname string string return fname lname class person compar implement compar int object object person person person person lname lname return els return boolean object obj return equal obj person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c list list uniqu fals new person compar assert list b c remov duplic give collect work origin object also return order member collect compar give compar duplic first member return give collect iter retain one remov give collect origin order preserv p pre test case class person def fname lname string string return fname lname class person compar implement compar int object object person person person person lname lname return els return boolean object obj return equal obj person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c list list uniqu new person compar assert list list b c return iter equival iter duplic item remov use default compar origin iter becom exhaust element determin uniqu valu new iter uniqu valu return return iter equival iter duplic item remov use closur determin duplic equal item origin iter fulli process call p closur take singl paramet argument pass element closur return valu use comparison either use link compar object link object object closur take two paramet two item iter pass argument closur return int valu indic item uniqu return iter equival iter duplic item remov use suppli compar modifi list remov duplic item use default compar pre test case uniqu conveni method make list uniqu use closur determin duplic equal item p closur take singl paramet argument pass element closur return valu use comparison either use link compar object link object object closur take two paramet two item list pass argument closur return int valu indic item uniqu pre test case uniqu pre test case uniqu b b remov duplic give list use default compar mutat true work modifi origin object also return mutat fals new collect return leav origin unchang pre test case assert uniqu pre test case def orig def uniq orig uniqu fals assert orig assert uniq conveni method make list uniqu use closur determin duplic equal item mutat true work receiv object return mutat fals new collect return p closur take singl paramet element list pass closur closur return valu use comparison either use link compar object link object object closur take two paramet two item collect pass argument closur return int valu indic item uniqu pre test case def orig def uniq orig uniqu fals assert orig assert uniq pre test case def orig def uniq orig uniqu fals b b assert orig assert uniq remov duplic give list mutat true work origin object also return mutat fals new list return order member list compar give compar duplic first member return give list iter retain one remov give list origin order preserv p pre test case class person def fname lname string string return fname lname class person compar implement compar int object object person person person person lname lname return els return boolean object obj return equal obj person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c list list uniqu fals new person compar assert list b c remov duplic give list work origin object also return order member list compar give compar duplic first member return give list iter retain one remov give list origin order preserv p pre test case class person def fname lname string string return fname lname class person compar implement compar int object object person person person person lname lname return els return boolean object obj return equal obj person new person john taylor person b new person clark taylor person c new person tom cruz person new person clark taylor def list b c list list uniqu new person compar assert list list b c iter number give number inclus increment one time iter number give number inclus increment one time iter number give number inclus increment one time iter number give number inclus increment one time iter number give number inclus increment one time iter number give number inclus increment one time iter number give number inclus increment one time pre upto println print number iter number give number inclus increment one time exampl pre upto println print number iter number give number inclus increment one time scop use method allow use list categori specifi list vararg categori class categori class method save wrap categori class list scop use method list categori allow closur call object refer self p method invok insid closur first invok self refer instanc follow method call append method invok string builder instanc pre def b new string builder append append return assert string commonli use simplifi object creation exampl pre def p new person name john name doe return alia lazi default decor list allow grow call index valu outsid normal list bound wrap map use decor pattern wrapper intercept call code get key unknown key find default valu store map return default valu store result call suppli closur key paramet closur exampl usag pre test case def map default k charact low case def expect assert expect everi e e valu map e key def map default assert map assert map decor list allow grow call index valu call valu list grow size default valu place list call suppli code init closur null valu store list p work decor list intercept call code get index index great equal current code size use list grow automat specifi index gap fill call code init closur gener default valu costli oper consid use lazi default p exampl usag pre test case def list eager default assert list assert list assert list default valu assert list gap fill default valu illustr use index gener default valu def eager default index index index assert assert illustr happen null valu null assert null assert null zip iter index valu index order exampl usag pre test case assert b index assert b index str idx idx str zip iter index valu index order exampl usag pre test case assert b index assert b index str idx idx str zip iter index valu index order exampl usag pre test case assert b index list assert b index str idx idx str list zip iter index valu index order exampl usag pre test case assert b index list assert b index str idx idx str list decor list allow grow call index valu call valu list grow size default valu place list call suppli code init closur subsequ retriev oper find null valu list assum set null earli grow oper call code init closur popul retriev valu consequ list can use store null valu p work decor list intercept call code get index index great equal current code size use list grow automat specifi index gap fill code null default valu also use fill gap instead code null use eager default code get index call null valu find assum null valu consequ earli grow list oper code init closur call popul valu p exampl usag pre test case def list lazi default assert list assert list assert list default valu assert list null gap fill null illustr use index gener default valu def lazi default index index index assert assert null null assert assert null illustr happen null valu null assert dynam wrap instanc someth implement suppli trait class guarante return object implement trait interfac origin type object lose replac proxi exclus disjunct two boolean oper bitwis xor togeth two number call oper use bitwis xor togeth two bit set call oper use two bit set
close closeabl ignor problem might occur close closeabl log warn problem occur convert possibl neg index real index array determin item array type helper method helper method
get current time second work exactli like resourc bundl bundl string need java method depend particular stack configur guarante groovi call java method work exactli like resourc bundl bundl string local need java method depend particular stack configur guarante groovi call java method get last hidden matcher system use match pars string date instanc use give pattern conveni method act wrapper link simpl date format p note new simpl date format instanc creat everi invoc method thread safeti pars string date instanc use give pattern time zone conveni method act wrapper link simpl date format p note new simpl date format instanc creat everi invoc method thread safeti pars string match pattern eee mmm dd h zzz yyyi contain u e g sit saturday string gener string method link date p note new simpl date format instanc creat everi invoc method thread safeti sleep mani millisecond even interrupt sleep mani millisecond use give closur interrupt process method use sleep method implement sleep give time even interrupt start thread give closur runnabl instanc start thread give name give closur runnabl instanc start daemon thread give closur runnabl instanc start daemon thread give name give closur runnabl instanc
box method unbox method method use coerc object boolean valu thank boolean method add type compar two object handl null grace perform numer type coercion requir determin whether valu object class object repres subclass enum use class name check avoid break java jr es allow convers array mutabl list
decod string base byte array decod hex string byte array hex string contain either upper case low case letter produc writabl object write base encod byte array call string result return encod string inform base encod chunk see rfc produc writabl object write base encod byte array call string result return encod string inform base encod chunk see rfc produc writabl object write base encod byte array call string result return encod string inform base encod chunk see rfc produc writabl object write base encod byte array call string result return encod string inform base encod chunk see rfc produc writabl write hex encod byte call string writabl return hex encod string hex encod includ two charact byte letter low case produc writabl write hex encod byte call string writabl return hex encod string hex encod includ two charact byte letter low case

factori method creat new map use store expando properti map allow equal overridden closur field method attach expando object allow code overrid closur field method attach expando object allow string overrid closur field method attach expando object
call disabl global use expando meta class call enabl global use global use expando meta class within registri advantag inherit function correctli high memori usag jvm normal groovi return list expando meta method instanc add expando meta class return list meta bean properti instanc add expando meta class javadoc see groovi object meta class look exist meta properti name overrid behavior parent method method make meta class awar add expando method overrid default implement case properti method overrid expando meta class overrid default implement case properti method overrid expando meta class javadoc see groovi object properti string return properti name equival give getter name null getter return properti name equival give setter name null getter check whether meta method give name argument exist return true meta class give properti javadoc see meta class impl javadoc see meta class impl constructor object overrid default implement case method overrid expando meta class javadoc see groovi object method string object overrid default implement case static invok method set expando meta class return true name method specifi number argument make javabean properti check meta class initi determin method name suffix legitim bean properti name either first second letter must case true call expando meta class creation handl registri exist set inherit handl regist new bean properti regist new instanc method give method name closur meta class regist new static method give method name closur meta class javadoc see groovi object meta class meta class overrid default implement case properti method overrid expando meta class javadoc see groovi object properti string object
return copi express call transform nest express transform list express transform list express check transform express give type
main arg except except throw instead caus vm exit main arg except except throw instead caus vm exit lookup groovi file control primari entri point compil command line use groovyc script p call insid process want jvm exit error call line compil string method simpli wrap creat temporari directori default temporari directori specifi system properti java io tmpdir primari entri point compil command line use groovyc script p call insid process want jvm exit error call line compil string method simpli wrap
add annot intern target list match find
global flag ignor checksum default set fals static access auto download enabl set download valu pass argument map alreadi set download set valu adjust p appli grab resolv call p set fals previous download grape use may caus failur grape call librari yet download p set true jar alreadi download automat download also version express rang check new version download depend find p default set true static access static shortcut method class work properti set fals default set true set global flag ignor checksum default set fals static access auto download enabl set download valu pass argument map alreadi set download set valu adjust p appli grab resolv call p set fals previous download grape use may caus failur grape call librari yet download p set true jar alreadi download automat download also version express rang check new version download depend find default set true static access static shortcut method class work properti set fals default set true

method use pull new method local thread context particular name creat scope base give class invok closur within scope creat scope base give class invok closur within scope
add classpath classload add url classload remov class class cach creat class collector new compil creat new compil unit want add addit phase oper compil unit exampl inject addit method variabl field overwrit method method take file name tri decod url encod charact exampl file name contain space method call take result encod valu convert space p method add specif fix defect groovi defect involv situat two script sit directori space name code would fail class loader tri resolv file name would choke url encod space valu open super class defin take raw byte load give class node return implement class p warnin compil synchron get class class cach cach contain class load class loader inner loader instanc class store specif name method return null get current use classpath return groovi class load class loader get time stamp give class groovi gener class usual mean return valu static field stamp paramet field long valu return indic class recompil recompil mean classload tri locat groovi sourc file class compil add result class entri cach give null class like recompil method alway return true class implement groovi object compil timestamp class low long valu p first parent loader ask return class recompil happen recompil also happen sourc file new get current set recompil mode null mean compil configur use fals mean recompil true mean recompil do need decid give sourc new class implement check packag access prior return alreadi load class load class file parent classload method call class string boolean boolean boolean last paramet set fals load class file parent classload pars give code sourc java class class file give code sourc pars do instead cach class return pars give file java class capabl run pars give text java class capabl run pars give text java class capabl run compil give sourc method start compil give sourc sourc chang sinc class creat sourc new call remov class class cach set entri class cach set recompil enabl possibl valu valu differ null overrid valu compil configur true mean recompil need fals mean never recompil
find combin item give iter aggreg collect code combin true fals true fals code true true fals true true fals fals fals code combin b code b b b item give treat singleton collect e code combin x code x x find combin item give collect select maximum valu find iter select maximum valu find array item min object select minimum valu find iter item select minimum valu find array item min object find subsequ list e g code subsequ would sum give item sum item array item transpos array list transpos give list code transpos b code b code transpos b c code b c
build option parser synchron way option construct get new groovi code sourc script may give locat script true text script fals get text groovi script give locat locat file path exist give link groovi main script file string call tri groovi extens append method use process script retain backward compat want modifi groovi main process script use link groovi main script sourc string hunt script file call groovi script file string main cli interfac pars command line process user request visibl test purpos stage tod printstream pars except process singl input file process input file process standard singl script arg process script singl input file process socket run script search script file bother name precis tri order actual suppli name name groovi name gvi name gy name gsh groov

run server typic need call method object constructor creat new thread run object automat
code true add method code take map new properti valu return new instanc immut class valu set exampl pre code immut true class person string first last def tim new person def alic first assert tim first assert alic first unknown key map ignor valu would chang object origin object return method call code take singl paramet alreadi exist class set ignor method gener allow provid code immut list class deem immut suppli class list vouch immut code immut check exampl pre import groovi transform code immut immut class address class person string first last address address code tupl constructor class address final string street allow provid code immut list properti name deem immut suppli properti name list vouch immut code immut check exampl pre code immut immut class person string first last address address
method exist binari compat compil code

append object append use groovi default represent object convert give object array array cast otherwis wrap array find right hand regex within left hand string return matcher return method pointer give object name invok give method object find right hand regex within left hand string return matcher reorder stack call method point well name might order set properti give object reorder stack call method point well name might order reorder stack call method point well name might order helper method return string represent array object brace boundari helper method return string represent array object brace boundari helper method return string represent list bracket boundari helper method return string represent list bracket boundari helper method return string represent list bracket boundari helper method return string represent map bracket boundari helper method return string represent map bracket boundari helper method format argument type list write object writer use groovi default represent object
perform shallow clone make sure retriev object move head lru list eld entri remov reach maximum cach size touch method use renew element move lru queue
close stream releas system resourc associ stream close read readi mark reset skip invoc throw io except close previous close stream effect mark present posit stream subsequ call reset attempt reposit stream point read singl charact read charact array method block input avail error occur end stream reach read charact portion array implement read line text line consid termin one line feed carriag return carriag return follow immedi linefe reset stream recent mark skip charact


creat new closur deleg suppli one memoiz return valu argument suppli cach use store memoiz valu cach respons put limit cach size implement cach evict strategi lru cach exampl allow set maximum cach size constraint implement lru last recent use evict strategi creat new closur deleg suppli one memoiz return valu argument memoiz closur use soft refer rememb return valu allow garbag collector reclaim memori need suppli cach use store memoiz valu cach respons put limit cach size implement cach evict strategi lru cach exampl allow set maximum cach size constraint implement lru last recent use evict strategi cach size argument great option lru last recent use cach hard refer maintain protect recent touch memoiz valu evict garbag collector creat key use memoiz cach

retriev valu attribut field method support groovi runtim gener client api usag obtain refer origin ast meta class avail runtim retriev list meta method hold class retriev list method hold class retriev list meta properti instanc meta class retriev properti give receiv specifi argument sender class request properti object meta class attempt establish method invok base name argument provid call super insid class help groovi runtim perform optimis call go directli super class necessari complet initialis process method call method add meta class invoc method access forbid unless method call method contain initialis code take long time complet exampl creation reflector suggest synchron method invok method give receiv specifi argument sender class invok method object meta class attempt establish method invok base name argument provid call super insid class help groovi runtim perform optimis call go directli super class necessari attempt invok miss method otherwis throw miss method except invok miss method otherwis throw miss properti except select method name argument class method search exact match search compat method method select mechan use provid implement meta class method may may use method select process invok method warranti intern method support groovi runtim client usag set valu attribut field method support groovi runtim gener client api usag set properti give receiv specifi argument sender class set properti object meta class attempt establish method invok base name argument provid call super insid class help groovi runtim perform optimis call go directli super class necessari
add new meta bean properti meta class implement method add meta method class warnin method neccessari step multimethod logic use method mean method add replac anoth method parent class complet step usual do initi mean need step add method run initi first time add instanc method metaclass add static method metaclass check method method groovi object interfac properti properti method check initialis class id complet method call form assert way test still initialis work do logic must implement differ way choos correct method use list method match name remov method call cach entri do method add runtim use categori creat call site creat call site creat call site creat call site creat call site fill method index return null noth valid find meta method getter alway case null link list meta method multipl setter retriev list addit meta method hold class retriev valu attribut field method support groovi runtim gener client api usag retriev valu attribut field method support groovi runtim gener client api usag retriev valu attribut field method support groovi runtim gener client api usag return cla info contain class obtain refer origin ast meta class avail runtim return fals add method null ignor method true replac retriev list meta method hold class method call call site retriev list method hold class get instanc method avail class give name get properti defin type retriev properti give object specifi argument return registri metaclass return normal static method class give name return cach class metaclass return class object metaclass return version contain class indic meta class method invoc method do custom invok object indic meta class method invoc static method do custom invok object increment version contain class complet initialis process method call method add meta class invoc method access forbid unless method call method contain initialis code take long time complet exampl creation reflector suggest synchron method invok method give receiv specifi argument sender class invok method object meta class attempt establish method invok base name argument provid call super insid class help groovi runtim perform optimis call go directli super class necessari invok method give object give argument invok method give receiv specifi argument meta class attempt establish method invok base name argument provid invok miss method give object give argument invok miss properti give object give argument hook deal case miss properti static properti method look attempt look miss handler invok otherwis throw miss properti except return wether class repres metaclass instanc instanc groovi object class return wether metaclassimpl modifi sinc meta class impl design modificaiton method alway return fals select method name argument class method search exact match search compat method method select mechan use provid implement meta class method may may use method select process invok method warranti helper method add groovi use indi method intern use constructor select algorithm groovi select algorithm introduc workaround groov instead gener index n n number super constructor time class compil algorithm use hash constructor descriptor instead advantag let super class add new constructor binari compat still problem approach ul risk hash collis even low two constructor class must hash super class add new constructor take argument superclass exist constructor paramet new constructor select runtim would find hope last case error messag much nice sinc explain binari incompat chang set attribut give receiv specifi argument sender class set attribut object meta class attempt establish method invok base name argument provid call super insid class help groovi runtim perform optimis call go directli super class necessari set valu attribut field method support groovi runtim gener client api usag set number bean properti give map key string name properti valu valu properti set retriev properti give receiv specifi argument sender class request properti object meta class attempt establish method invok base name argument provid super insid class help groovi runtim perform optimis call go directli super class necessari set properti give object specifi argument build properti map map meta properti object key properti name return string represent metaclass
add meta class chang listen constant meta class add meta class chang listen constant meta class listen remov main function registri meta class exist return otherwis creat one put registri return retriev meta class creation handl respons construct meta class instanc return regist class chang listen constant meta class get snapshot current constant meta class return iter modif do use iter caus concurr modif except meta class remov use iter meta class remov meta class replac anoth meta class meantim meta class add use iter part iter meta class replac anoth constant meta class iter might show two meta class class p note iter may use multipl thread remov cach meta class registri remov meta class chang listen constant meta class add metaclass registeri give class set meta class creation handl instanc respons construct instanc
add listen constant meta class add listen constant meta class listen remov caus execut regist listen method use mostli intern kick listen notif also use subclass achiev singleton meta class registri get handl intern use creat meta class implement warnin experiment code like chang soon get array regist constant meta class listen instanc look class call custom meta class creation handl exist use meta class creation handl otherwis use default return iter iter constant meta class iter see make snapshot current state registri snapshot includ meta class use unless alreadi collect collect meta class skip automat expect element iter null call method thread safe usag iter remov constant meta class listen regist new meta class registri custom type mc null mc replac whatev meta class use mc null mc use store mc mc set handl intern use creat meta class implement replac handl custom version reus old handl keep custom logic use default logic fall back warnin experiment code like chang soon
c primit class method return box version otherwis c return java simplifi thank type class compar two charact whilst ignor case implement dl distanc two object array instead charact stream object compar use equal method object may null implement base cha emerick implement levenshtein distanc jakarta common slightli modifi version damerau levenshtein distanc algorithm addit test see charact switch case origin algorithm count substitut cost substitut give instead version enabl transposit case modif low cost substitut current lowercas version cach probabl speed could gain version base cha emerick implement levenshtein distanc jakarta common return string detail possibl solut miss constructor good solut find empti string return return string detail possibl solut miss method good solut find empti string return return string detail possibl solut miss field properti good solut find empti string return creat comma separ list class name return sort rank list select constructor among candid close resembl origin return sort rank list select method among candid close resembl origin




allow mode script pars complet point
append child current node creat new node child current node creat new node child current node creat new node child current node creat new node child current node provid lookup attribut key return map attribut node empti map node attribut provid collect node tree use travers return list node child creat new node name parent shallow clone attribut valu node list deep clone node provid collect node tree use depth first travers provid lookup element name provid lookup element q name provid lookup element name return iter child node return list direct string node node return object repres name node return parent node add sibl node defin use notat via closur current node write node specifi print writer remov child current node replac current node node defin use notat via closur replac current node suppli node extens point subclass overrid metaclass default one support properti attribut notat add replac parent node add replac valu node return textual represent current node child node return object repres valu node
creat new node list contain element origin clone case node provid lookup element q name provid lookup element name return text valu element collect
noth
lex support return true specifi charact digit return true specifi charact digit return true specifi charact valid type specifi numer valu return true specif charact digit build number give decim descriptor use big decim unless doubl float request build number give integ descriptor creat narrow type possibl specif type specifi
observ interfac
observ interfac map interfac
observ interfac


overload leav shift oper provid easi way append multipl object string represent string builder method call oper enum invok groovi default next behaviour enum next method append string string builder method call oper enum invok groovi default previou behaviour enum previou method support rang subscript oper string builder support rang subscript oper string builder index valu treat charact within builder standard groovi size method string builder
process mark current phase complet process error reconfigur process unit return class loader use process unit error find compil report error collector return current phase return descript current phase wrap pend oper current phase switch next phase synonym phase phase set class loader use process unit
intercept xxx call return result result replac real valu get return fals intercept xxx call
creat proxi deleg object instruct proxi gener dump gener groovi sourc code standard output construct use debug purpos turn product chang gener method empti implement p method gener aggreg suppli closur map base class give implement implement normal throw unsupport oper except set boolean leav empti
conveni factori method usual case interceptor call properti properti access interceptor avail call constructor adapte logic like meta class unless interceptor interceptor call nest invok invok method method call suppress interceptor invok return fals see interceptor detail call method adapte logic like meta class unless interceptor interceptor call nest invok invok method method call suppress interceptor invok return fals see interceptor detail call method adapte logic like meta class unless interceptor interceptor call nest invok invok method method call suppress interceptor invok return fals see interceptor detail call static method adapte logic like meta class unless interceptor interceptor call nest invok invok method method call suppress interceptor invok return fals see interceptor detail interceptor call properti setter properti access interceptor avail use proxi meta class give closur care balanc use proxi meta class give closur care balanc proxi meta class
test q name equal anoth object p give object q name string equival null method return tt fals p two q name consid equal requir part uri must equal method use string check equal part ur class extend q name requir satisfi equal contract suppli object string split two last colon first half compar prefix uri second half compar part e assert new q name part part intend usag gpath accessor e g root mynamespac node warn equival commut e qname equal string may string equal qname alway fals p method satisfi gener contract object method get local part q name get namespac uri q name get prefix q name return fulli qualifi name q name return hash code valu q name object hash code base part uri part q name method satisfi gener contract object code method test q name match anoth object p give object q name string equival null method return tt fals p two q name consid match requir part uri must equal one wildcard suppli object string split two last colon first half match prefix uri second half match part return string represent q name return q name hold valu specifi string p string must form return q name string method e ur part ur part option p method full valid result q name particular check result namespac uri legal uri per rfc rfc result local part legal nc name per xml namespac specif


doc doc doc

token type never visit annot definit usag direct field access move token way test need one band token actual replac typ upp bound e g class foo extend c big suffix token type bi suffix never nu bi nu bi decim instead block token type block never see closabl block etc note old closur syntax use bor deprec also never bor node closur op token type closabl bloc op never see closabl bloc colon token type colon never see label sta fo iterabl asser ca questio constructo label ar sprea arg comma token type comma never see typ argument annotatio mani other visit w use lexer digit never dollar token type dollar never see scop escap instead empti stat token type empt stat obsolet remov never eof token type eof never expon token type expon use lexer never float suffix never see nu doubl nu float instead claus fo eac claus obsolet remov never visit lbrack token type lbrack use insid parser never visit lcurli token type lcurli use insid parser never letter token type letter use lexer never liter class token type class use parser never directli liter def token type def use parser never directli liter els token type els use parser never directli liter enum token type enum use parser never directli liter extend token type extend use parser never directli liter implement token type implement use parser never directli liter import token type import use parser never directli liter interfac token type interfac use parser never directli liter packag token type packag use parser never directli deprec public void liter groovi sourc ast int visit updat tab level null note old closur syntax use lor deprec also never lor node ml comment comment creat ast current nl new line use parser creat impli sourc code inform null tree lookahead use explicitli parser one nl new line use parser creat impli sourc code inform visit rbrack token type rbrack use insid parser never visit rcurli token type rcurli use insid parser never visit regexp ctor end visit regexp liter visit regexp symbol token type regex cto en regex litera regex symbol use insid lexer visit rparen token type rparen use insid parser never visit semi semu use insid parser never see condit iter visit sh comment never parser visit sl comment never parser stringch string charact use lexer never directli visit tripl dot use ast visit unus const goto unsurprisingli unus k variabl ariti paramet jl visit vocab use lexer

method use add bridg method privat method class outer class capabl call basic job access like method java add special accessor privat constant inner class retriev constructor static compil class may happen init code object initi field properti add constructor code backend assum pure static contructor may fail encount dynam code thu make kind code fail
attempt make direct method call bridg method exist
check argument paramet type match check argument paramet type match expect number paramet strictli great number argument allow possibl inclus default paramet give paramet build new paramet know gener placehold resolv return true fals depend whether right classnod assign left classnod method add error let caller decid incompat assign find give list candid method return one good match argument type collect interfac class node includ defin super class collect interfac class node includ defin super class helper method use evalu express find annot paramet exampl evalu constant refer directli integ refer field method throw except express evalu check excess argument match vararg signatur paramet use suppli type make connect usag declar method oper two mode type instanceof target structur compar do exampl dummi list get type equal target structur match do well exampl colect collect get otherwis climb hierarchi find case type equal target execut structur match appli possibl exist gener context way exampl int rang collect get integ sinc int rang abstract list integ target gener method noth give variabl express return ultim access variabl give gener type repres class resolv placehold map return new gener type placehold resolv recurs return true express form x check class node assign anoth use exampl assign check want verifi assign valid return true class node repres class node class class parametr type neither placehold wildcard exampl class node class foo foo class would return true class node class would return fals return true oper class give common type class leav right oper leav op right result type class groovi number well variant equal return true class node make use gener type class node repres array type check compon type use gener return true provid class node consid receiv messag paramet use placehold gener type case face uncheck gener type check limit ex void set set tell class one accept class leav hand side assign call method call check order determin method call correspond idiomat structur check last argument match vararg type give receiv method node parameter method argument use avail gener type inform check parameter gener argument compat gener paramet
add variou method primit array special method handl trait call type checker know type signatur abl tell trait detect new class node creat repres list trait interfac method use filter search result null mean match filter illeg access instanc member static context return null give member static want access static way want access way alway return member sinc access static member member allow check constructor style express valid regard number argument argument type check constructor style express valid regard number argument argument type give field node check call privat field inner class give method node check call privat method inner class method convert closur type appropri sam type use infer return type gener give gener type instanc return class node use infer type give binari express correspond assign check type rh match one possibl setter throw type check error check whether properti exist receiv possibl receiv class find temporari type inform tabl give method name prefix return name properti look follow java bean rule exampl name would return name full name would return name prefix find return null instanceof check find code store temporari type inform datum link type check context branch type inform tabl method comput key must use store type info helper method determin receiv class use error messag field attribut find return type class depend whether temporari type inform availbl due instanceof check whether singl candid case method return list method name suppli paramet defin specifi receiv also add non exist method gener afterward compil exampl method use default valu specifi class node compil yet resolv field properti node gener use current class declar class extract right mean gener symbol return infer return type closur method store ast node method perform type infer case object call method suppos retriev infer closur return type overrid return list type check annot class node subclass may overrid method order provid addit class must look check method class node skip p default implement return link type check return current type check context context use intern type checker type check store variou state datum method respons perform type infer closur argument type whenev code like find code foo collect upper case case type checker tri find code collect method link closur argument annot link closur param ye addit type infer perform type code may infer give loop collect type return infer type loop element use exampl infer element type e list loop method call return parameter type perform addit infer return type type get actual type paramet exampl method array list generifi type deduc actual type argument method call return parameter type perform addit infer return type type get actual type paramet exampl method array list generifi type deduc actual type argument test node inner class node check enclos method skip give object express receiv express gener list potenti receiv type wrap type class class store inform type instanceof instanceof express visit visit method call target infer type report error right away do later method call store infer return type closur method use separ key store infer return type infer type closur link closur differ infer type code closur return wrap type provid class node primit type method differ link class helper wrapper class node return instanc provid type gener type



coerc string instanc char sequenc boolean valu string coerc fals length true otherwis coerc matcher instanc boolean valu convert g string file deleg default link default groovi method type object class provid method perform custom type convers give class use code oper provid method perform custom type convers give class use code oper exampl code doubl p default follow type support ul list big decim big integ long integ short byte charact doubl float file subclass enum java type give call deleg link default groovi method type object class turn char sequenc regular express pattern conveni method capit first letter char sequenc typic first letter word exampl usag pre test case assert capit h assert capit hello assert capit hello world assert hello world split collect capit join pad char sequenc minimum length specifi char add space charact around mani time need remain center string alreadi size big target char origin string return exampl pre b cc ddd println center produc output like pre bb ccc dddd pad char sequenc minimum length specifi char append suppli pad char sequenc around origin mani time need keep center string alreadi size big target char origin string return exampl pre b cc ddd println center produc output like pre b cc ddd iter string charact time collect either origin charact transform replac string code transform closur return code null indic transform requir give charact p pre test case assert groovi replac null gr assert replac amp null b amp w provid implement contain like link collect object make char sequenc polymorph count number occurr sub char sequenc return char sequenc line separ l c l c termin platform specif line separ g string variant equival char sequenc method drop give number char head char sequenc avail pre test case def text groovi assert text drop groovi assert text drop assert text drop g string variant equival char sequenc method creat suffix give char sequenc drop mani charact possibl front origin char sequenc call give closur condit evalu true pass drop charact p pre test case def text groovi assert fals groovi assert true assert z assert v iter char sequenc line line line pass give arg closur arg closur find line count pass second argument iter char sequenc line line line pass give arg closur arg closur find line count pass second argument process regex group match substr give char sequenc closur paramet take one argument array match group pass closur take mani argument match group paramet one match group process regex group match substr give pattern closur paramet take one argument array match group pass closur take mani argument match group paramet one match group process regex group match substr give string closur paramet take one argument array match group pass closur take mani argument match group paramet one match group process regex group match substr give pattern closur paramet take one argument array match group pass closur take mani argument match group paramet one match group expand tab space stop size expand tab space char sequenc multipl line expand line restart tab stop start line expand tab space assum char sequenc repres singl line text find first occurr regular express string within string regex match null return p exampl regex match result null pre assert null new york n match get match string back pre assert new york ny find captur group express still get back full match pre assert new york ny find return result call closur first occurr regular express find within char sequenc regex match closur call find return null find first occurr compil regular express pattern within string pattern match null return p exampl pattern match result null pre assert null new york n match get match string back pre assert new york ny find captur group express group ignor get back full match pre assert new york ny find need work captur group use closur version method use groovi matcher oper use match return result call closur first occurr compil regular express find within string regex match closur call find return null p exampl pattern match result null pre assert null new york n match return match captur group regex singl paramet closur match get pass pre assert new york ny find match return captur group express closur one paramet match follow one captur group pre assert new york ny find match zip four assert match assert zip assert four return zip captur group express closur one paramet closur pass array first element correspond whole match follow element captur group pre assert new york ny find match zip four assert array assert array assert array return array captur group option match correspond valu captur group pass closur null illustr pre assert adsf adsf find match code exchang number assert match assert null code assert exchang assert number return number return possibl empti list occurr regular express provid char sequenc find within char sequenc p exampl regex match return empti list pre assert fish regular express match return list regex captur group ignor full match return pre def expect one fish two fish red fish blue fish assert expect one fish two fish red fish blue fish fish need work captur group use closur version method use groovi matcher oper use match find occurr regular express string within char sequenc match pass specifi closur closur expect full match first paramet captur group place subsequ paramet p match closur call empti list return p exampl regex match return empti list pre assert fish match word return word regular express match pass closur captur group one paramet match pre assert could would could would match match captur group first paramet match follow one paramet captur group pre def orig wocket pocket assert w wocket p pocket match letter letter match return possibl empti list occurr regular express pattern format find within char sequenc p exampl pattern match return empti list pre assert fish regular express match return list regex captur group ignor full match return pre def expect one fish two fish red fish blue fish assert expect one fish two fish red fish blue fish fish find occurr compil regular express pattern within char sequenc match pass specifi closur closur expect full match first paramet captur group place subsequ paramet p match closur call empti list return p exampl pattern match return empti list pre assert fish match word return word regular express match pass closur captur group one paramet match pre assert could would could would match match captur group first paramet match follow one paramet captur group pre def orig wocket pocket assert w wocket p pocket match letter letter match todo expos stream base scenario support rang subscript oper g string int rang support rang subscript oper g string support subscript oper g string support rang subscript oper char sequenc string buffer empti rang support rang subscript oper char sequenc int rang support rang subscript oper char sequenc support subscript oper char sequenc select list charact char sequenc use collect identifi index select support rang subscript oper string int rang support rang subscript oper string support subscript oper string support subscript oper e g matcher index regex matcher p exampl use group match pre def p def abcabdabeabf p assert count assert size synonym count assert group assert count def match abd abf lt count assert match p exampl use group match pre def p ab def abcabdabeabf p assert count assert group assert count def match abc c abd abe e abf f lt count assert match p anoth exampl use group match pre def abcabdabeabfabxyzabx ab assert count assert group assert count def match abd abxyz xyz abx x lt count assert match select list valu matcher use collect identifi index select convert give char sequenc array charact find number string match give matcher get replac correspond match pattern link string groovi method string pattern closur closur take paramet ul whole match pattern includ captur group object captur group closur take object paramet list captur group check whether matcher contain group true char sequenc contain whitespac charact determin char sequenc pars big decim determin char sequenc pars big integ case implement char sequenc use equal string valu valu allow char sequenc valu use switch statement exampl pre switch str case etc note return code true case operand code null case implement link pattern class allow test string number regular express exampl pre switch str case regex match valu str note return true case pattern valu code null determin char sequenc pars doubl determin char sequenc pars float determin char sequenc pars integ determin char sequenc pars long determin char sequenc pars number synonym big decim return link iter travers match overload leav shift oper provid easi way append multipl object string represent char sequenc overload leav shift oper provid easi way append multipl object string represent string overload leav shift oper provid easi way append multipl object string represent string buffer overload leav shift oper provid syntact sugar append string builder tell whether char sequenc match give compil regular express pattern give matcher match string pattern method return true string match pattern long string could match pattern exampl pre test case def pattern def matcher john doe pattern assert partial matcher john doe com pattern assert partial matcher john pattern assert partial remov part char sequenc replac first occurr target within self return result remov part char sequenc replac first occurr pattern within self return result repeat char sequenc certain number time method call oper class char sequenc increment last charact give char sequenc last charact char sequenc charact valu charact mi valu append empti char sequenc increment string consist charact charact mi valu return string linefe carriag return normal linefe pad char sequenc minimum length specifi char add space charact leav mani time need string alreadi size big target char origin string return exampl pre println number println string leav produc output like pre number pad char sequenc minimum length specifi char add suppli pad char sequenc mani time need leav char sequenc alreadi size big target char string origin char sequenc return exampl pre println number println string leav println string leav produc output like pre number pad char sequenc minimum length specifi char add space charact right mani time need char sequenc alreadi size big target char string origin char sequenc return exampl pre b cc ddd println right size produc output like pre bb ccc dddd pad char sequenc minimum length specifi char add suppli pad char sequenc mani time need right char sequenc alreadi size big target char string origin char sequenc return exampl pre b cc ddd println right size produc output like pre b cc ddd append string represent give operand char sequenc append string string represent number append string represent give operand string append string string buffer method call oper class char sequenc decrement last charact give char sequenc last charact char sequenc charact mi valu delet empti char sequenc can decrement support rang subscript oper string buffer support rang subscript oper string buffer index valu treat charact within buffer return line char sequenc list string replac occurr captur group result closur text p exampl pre assert orld hello upper case assert fooba fooba foo bar object upper case global string match group first string match group second string match group assert fo fo foo bar x z upper case x global string match group first string match group z second string match group note unlik string string regex string replac replac string treat special group substitut result closur convert string valu use liter replac replac substr char sequenc match give regular express give replac replac occurr captur group result closur call text p exampl pre assert orld hello upper case assert fooba fooba foo bar upper case global string match group first string match group second string match group assert fooba fooba foo bar object upper case global string match group first string match group second string match group assert fo fo foo bar x z upper case x global string match group first string match group z second string match group note unlik string string regex string replac replac string treat special group substitut result closur convert string valu use liter replac replac substr char sequenc match give compil regular express give replac p note backslash tt dollar sign tt replac string may caus result differ treat liter replac string see link matcher use link matcher replac suppress special mean charact desir p pre test case assert x x replac first occurr captur group result closur call text p exampl variant throw comparison purpos pre assert world hello first upper case first match assert orld hello upper case match assert fi two fish one fish two first upper case assert fi fi one fish two upper case replac first substr char sequenc match give regular express give replac replac first occurr captur group result closur call text p exampl variant throw comparison purpos pre assert world hello first upper case first match assert orld hello upper case match assert fi two fish one fish two first upper case assert fi fi one fish two upper case replac first substr char sequenc match give compil regular express give replac p note backslash tt dollar sign tt replac string may caus result differ treat liter replac string see link matcher first use link matcher replac suppress special mean charact desir p pre test case assert first x xo creat string revers backward char sequenc set posit give matcher give index provid standard groovi code size method char sequenc provid standard groovi code size method string provid standard groovi code size method string buffer provid standard groovi code size method matcher conveni method split char sequenc whitespac delimit similar token return array string instead list iter give char sequenc line line split line use give regex delimit list token line pass give closur iter give char sequenc line line split line use give separ pattern list token line pass give closur strip lead space everi line char sequenc line least number lead space determin number remov line contain whitespac ignor calcul number lead space strip pre test case assert indent strip char lead charact everi line char sequenc pre test case assert de abcd indent todo expos stream base strip strip lead charact follow everi line char sequenc pre test case assert ab abc margin strip lead charact follow char everi line char sequenc pre test case assert ab abc margin strip lead charact follow char everi line char sequenc todo expos usag scenario e g stream base strip g string variant equival char sequenc method return first code num element char sequenc pre test case def text groovi assert text take assert text take gr assert text take groovi g string variant equival g string method return long prefix char sequenc element pass give closur evalu true p pre test case def text groovi assert assert z g assert v groo assert z groovi pars char sequenc big decim pars char sequenc big integ convert give string boolean object trim string true ignor case result true otherwis fals convert give string charact object use first charact string pars char sequenc doubl pars char sequenc float pars char sequenc integ convert give char sequenc list string one charact pars char sequenc long convert give char sequenc set uniqu string one charact pars char sequenc short token char sequenc whitespac delimit token char sequenc base give char sequenc delimit token char sequenc base give charact delimit exampl pre test case char sep assert sep translat char sequenc replac charact set charact set first charact set appear char sequenc replac first charact set second charact set appear char sequenc replac second charact set provid replac charact p exampl convert vowel word low uppercas pre assert tr aeio ell charact rang use syntax also use e g exampl convert word low uppercas pre assert tr hell hyphen start end set set treat normal hyphen consid part rang specif similarli hyphen immedi earli rang treat normal hyphen rang rang plu charact plu e charact p unlik unix tr command groovi tr command support revers rang e g pre assert tr hell set small set last charact set use replac remain sourc charact show pre assert hello world haaaa waaa set contain repeat charact last specifi replac use show pre assert hello world function provid tr achiev use regular express tr provid much compact notat effici implement certain scenario replac sequenc whitespac tab use stop size replac sequenc whitespac tab replac sequenc whitespac tab within line

return underli syntax except write nice format summari syntax error

creat necessari super forward method stackabl trait creat method dispatch super trait stackabl fashion gener method look like p return type class clazz arg arg trait return trait trait helper super method give class node class node implement trait gener appropri code deleg call trait safe call method class node implement trait util method tri find method default implement java semant
collect interfac class node revers order declar direct interfac class node use make sure trait implement b b method take method b late align behavior categori collect self type type extend implement give trait implement collect interfac superclass collect self type type extend implement give trait implement return name method without super trait specif prefix method name correspond super trait method call result null convert class implement trait target class trait dynam proxi target class assign target object proxi target object return otherwis fall back link default groovi method type object class reflect apu find method correspond default implement trait give bridg method indic whether method trait interfac default implement indic whether method trait interfac default implement return true specifi class node annot link trait interfac reflect api indic whether method bridg method default implement trait return true specifi class trait return true specifi class node trait
start trampolin loop call wrap closur first step start trampolin loop call wrap closur first step start trampolin loop call wrap closur first step deleg wrap closur deleg wrap closur return sinc good enough trampolin variant current closur build trampolin variant current closur




