Returns the number of minutes it would take for a session to time out. This is done by effectively using the database table as a hash table. If a row in GlobalVariables does not exist, one is inserted with the default value '20'. Sets the number of minutes it would take for a session to timeout.
Adds the new user.   Event is logged.
Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Adds a patient's telemedicine data to the database. returns the patient name
Adds the new user.  Event is logged.
Adds a message to the database. Gets all the adverse event reports for a certain user MID.
Adds an allergy to this patient's list. Returns a list of patient's allergies.
Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP). Initially sets security question to a random set of characters, so that nobody should be able to guess its value. Check that a user actually exists. Return the number of failures from login failures a password, given an IP address. Return the number of failures from resetting a password, given an IP address. Return the security answer of a particular user Return the security question for a particular user. Returns the user name of a user from just the MID Returns the role of a particular MID Record a login failure, which blacklists the ipAddress. Uses the database table like a hash table where the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is added. Record a reset password failure, which blacklists the ipAddress. Uses the database table like a hash table where the key is the user's IP address. If the user's IP address is not in the table, a row with "1" is added. Change the password of a particular user Reset the security question and answer for a particular user
Adds a new CPT code, returns that it was added successfully Returns a list of all CPT codes. Returns a particular procedure description for a code. Returns a list of all immunization CPT codes. Returns a list of all non-immunization CPT codes. Change the procedure description for a particular CPT code
Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO, {@link AccessDAO} Returns the current session timeout in minutes, as reflected in the database
Returns the risks for which this patient is at risk for. All logic has been passed to {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}. Returns the ID of the patient to be checked. Gives the full name of the patient
Validate an HCP's MID and declare them, if possible Lists the declared HCPs for this current patient Validate an HCP's MID and undeclare them, if possible
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Method to delete an interaction Method to return a list of drug interactions for a given drug Method to report an interaction
Remove an interaction from the database Returns a list of all drug interactions for the input drug name Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an iTrustException is thrown.
Adds a health record for the given patient Returns a list of all HealthRecords for the given patient returns the patient name Moves the information from the form to a HealthRecord
Adds a patient to the current HCP's remote monitoring list returns the patient name Returns whether a patient is in an HCP's list already Removes a patient from the current HCP's remote monitoring list
Combines two lists of hospitals   This is a list of all hospitals, ordered by the office visit's hcp FIRST Returns the office visit bean for the office visit   Helper that logs an office visit event.  The associated patient id, HCP id, and office visit id are automatically included. Sends e-mail regarding the prescribed dangerous drug.   Used to update the sub actions once a office visit is saved.  Until this is called, attempting to save sub actions will raise an exception. Update the office visit with the given data.  If the office visit has not yet been saved, this will save it and reinitialize the sub actions. Updates the office visit with information from the form passed in.  If the office visit has not yet been saved, calling this method will save it as well as make the sub actions able to be saved. Updates the office visit.
Checks to see if a particular family member has cancer Checks to see if a particular family member has diabetes Checks to see if a particular family member has heart disease Checks to see if a particular family member has high blood pressure Checks to see if a particular family member has high cholesterol Returns a list of HealthRecords for the patient Returns a list of OfficeVisitBeans Returns a list of AllergyBeans for the patient Returns a complete OfficeVisitBean given a visitID Returns a list of diseases for which the patient is at risk Returns a list of FamilyMemberBeans for the patient Checks to see if the family member is dead and returns their cause of death if so Returns a PatientBean for the patient Checks to see if a particular family member smokes Creates a fake e-mail to notify the user that their records have been altered. Adds an allergy to the patient's records
Returns a PatientBean for the patient Creates and e-mail to inform the patient that their information has been updated. Takes the information out of the PatientBean param and updates the patient's information
Takes information from the personnelForm param and updates the patient
Makes the patient (pid) represent the input mid parameter Return a list of patients that pid represents Makes the patient (pid) no longer represent the input mid param
DO NOT SEND REAL EMAILS!!!!! Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious. If you want to know how to send emails from Java, just Google it on your own time.
Returns a list of allergies for the given patient Returns the patient's blood type Returns a list of prescriptions the patient is currently taking Returns a list of prescriptions the patient is currently taking Returns the patient's age Returns the patient's emergency contact Returns the patient's gender Returns the patient's name Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum Creates a fake e-mail to notify the user that an emergency report has been created and viewed.
Return a list of patients whose mother or father is this patient Private helper method (since all three are alike) Return the information of the mother and father of this patient Return a list of patients who share at least one parent (and that parent is not '0') with this patient
Returns the person's name that matches the inputMID param
Checks a patient to see what immunizations they need Gets a list of anyone who need immunizations Returns a list of VisitReminderReturnForms for the type passed in as a param Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization Checks to see if a patient needs the HPV immunization Checks to see if a patient needs the Haemophilus Infulenzae immunization Checks to see if a patient needs the Hepatits A immunization Checks to see if a patient needs the Hepatitis B immunization Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization Checks to see if a patient needs the Pneumococcal immunization Checks to see if a patient needs the Polio immunization Checks to see if a patient needs the Rotavirus immunization Checks to see if a patient needs the Varicella immunization
Adds a health record for a particular patient Returns a list of all health records for a particular patient

Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Adds a hospital Assign an HCP to a hospital. If they have already been assigned to that hospital, then an iTrustException is thrown. Checks to see if the LT has an assigned hospital Returns a list of all hospitals sorted alphabetically Returns a particular hospital given its ID Removes all hospital assignments for a particular HCP. Returns the number of rows affected. Unassigns an HCP to a hospital. Returns whether or not any changes were made Updates a particular hospital's description. Returns the number of rows affected (should be 1)
Adds an ICD9CM code. Returns whether or not the change was made. Returns all ICD9CM codes sorted by code Returns a particular description for a given code Changes a the description of a particular code.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Adds a LOINC Returns all LOINCs as a list. Returns all LOINCs associated with LaboratoryProcedureCode Updates the information in LOINC.
Changes the privacy settings Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit Returns a list of all the lab procedures for the next month This method sorts by LOINC and returns the list
Sends an e-mail informing the patient that their procedure has been updated Updates a lab procedure Returns a list of the lab procedures associated with both the HCP and the given patient. Returns a list of all the lab procedures for a particular patient.
Inserts a lab procedure into the database. Gets all lab procedures, period. Gets all procedures for Patient This gets all the procedures for a particular patient on a particular office visit This gets all the procedures for a particular patient on a particular office visit Gets all the lab procedures that correspond to a particular LOINC. Get all lab procedures associated with a particular HCP. Get a count of all pending lab procedures for a particular HCP. Gets an individual lab procedure. Get all lab procedures associated with a particular HCP and Patient. Gets the lab procedures for a given LHCP that occur within the next month. Get a list of the lab procedures associated with a given patient. Gets all the lab procedures for a given patient that occur within the next month. Get lab procedures for a specific office visit, but excluding lab procedures which a patient does not have access to. Get a list of the lab procedures in transit associated with a given Lab Tech. Get a list of the lab procedures received for a given Lab Tech. Get a list of the lab procedures testing for a given Lab Tech. Get the count of the In_Transit and Received lab procedures assigned to a specific lab tech. Get the count of the In_Transit and Received lab procedures assigned to a specific lab tech grouped by priority. Get the count of unviewed lab procedures for a particular patient. Marks a lab procedure as viewed by the patient Delete a given lab procedure form the database.    Updates an existing lab procedure. Updates the rights of a user on a given lab procedure.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Adds a message to the database. Gets all the messages for a certain user MID. Gets all the messages from a certain user MID. Gets all the messages for a certain user MID sorted by name ascending. Gets all the messages for a certain user MID sorted by name descending. Gets all the messages for a certain user MID sorted by ascending time. Gets all the messages for a certain user MID sorted by name ascending. Gets all the messages for a certain user MID sorted by name descending. Gets all the messages for a certain user MID sorted by ascending time.
Returns the patient's name Returns a list of reports between specified dates Method used to remove an adverse event report Sends an e-mail to a patient requesting more information
Returns a list of DiagnosisBeans for the patient Returns a list of all the HCPs who have a particular diagnosis Looks up all the prescriptions given by a certain HCP with the same ICD code.
Adds a new ND code, returns whether or not the change was made. If the code already exists, an iTrustException is thrown. Returns a list of all ND codes Returns a particular description for a given code. Removes a ND code, returns whether or not the change was made. Updates a particular code's description
Adds an visit and return its ID Returns whether or not an office visit actually exists Returns a list of all office visits for a given patient Gets all office visits corresponding to a particular ICD diagnosis. Returns a list of all office visits for a given patient Returns a particular office visit given an ID Returns a list of all office visits at a given hospital Returns a list of all office visits for a given patient Updates the information in a particular office visit.
Adds an empty patient to the table, returns the new MID Assign a representer to the representee Check if a patient has declared the given HCP Returns whether or not the patient exists Declares an HCP for a particular patient Updates a patient's information for the given MID Lists every patient in the database. Return a list of prescriptions which are currently prescribed for a patient Returns a list of HCPs who are declared by the given patient Return a list of all diagnoses for a given patient Return a list of prescriptions which are expired prescription for a patient Return a list of all immunization procedures for a given patient Returns the name for the given MID Returns the patient's information for a given ID Return a list of all prescriptions for a patient Return a list of all procedures for a given patient Return a list of patients with a special-diagnosis-history who have the logged in HCP as a DHCP and whose medications are going to expire within seven days. Return a list of patients that the given patient represents Return a list of patients that the given patient is represented by Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO Unassign the representation Check if the given representer represents the representee Returns all patients with names "LIKE" (as in SQL) the passed in parameters. Undeclare an HCP for a given patient
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Adds an empty personnel, and returns the MID. Indicates whether a certain personnel is in the database. Updates the demographics for a personnel. Returns all personnel in the database. Returns all of the hospitals this LHCP is associated with. Returns list of personnel who are Lab Techs. Returns the name for a given MID Retrieves a PersonnelBean with all of the specific information for a given employee. Given a prescription that has been given, this method returns all the information for the doctor who authorized that prescription. Returns a list of UAPs who work for this LHCP. Matches all personnel who have names LIKE (as in SQL) the first and last names passed in.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Adds a given referral to the database. Updates a given referral in the database. Get a referral query for a patient. Get a referral query for a receiving HCP. Get a specific referral. Gets a list of all referrals sent to a patient. Gets a list of all referrals sent to a patient Gets a list of all referrals a HCP has received Gets a list of all referrals sent to a patient Get all referrals associated with a particular office visit. Gets a list of all referrals sent from an HCP Gets a list of all referrals sent to an HCP Get a referral query for a sending HCP. Set referral message. Removes the given referral. Set referral message.
Add a patient to the list of HCPs' monitoring lists of Patients Show the list of HCPs monitoring this patient Private method to get the number of entries for a certain patientID for today. private int getNumberOfDailyEntries(long patientMID) throws DBException{ Connection conn = null; PreparedStatement ps = null; try { conn = factory.getConnection(); ps = conn.prepareStatement("SELECT * FROM RemoteMonitoringData WHERE PatientID=? AND DATE(timeLogged)=CURRENT_DATE"); ps.setLong(1, patientMID); ResultSet rs = ps.executeQuery(); List<RemoteMonitoringDataBean> patients = loader.loadList(rs); return patients.size(); } catch (SQLException e) { e.printStackTrace(); throw new DBException(e); } finally { DBUtil.closeConnection(conn, ps); } } Private method to get the number of entries for a certain patientID and a certain data type for today. Get the requested type of data for the specified patient. Returns patient data for a given HCP Return remote monitoring list data for a given patient. Remove a patient from the list of HCPs' monitoring lists of Patients Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Method used to add a report to the data base A method used to send a single e-mail. Used in immunizations. Method that sends exactly one e-mail to each MID in the list of Adverse Events
/** * Returns every report request in the database. * @return A java.util.List of report requests. * @throws DBException */ public List<ReportRequestBean> getAllReportRequests() throws DBException { Connection conn = null; PreparedStatement ps = null;  try { conn = factory.getConnection(); ps = conn.prepareStatement("SELECT * FROM ReportRequests"); ResultSet rs = ps.executeQuery(); return loader.loadList(rs); } catch (SQLException e) { e.printStackTrace(); throw new DBException(e); } finally { DBUtil.closeConnection(conn, ps); } } Adds a request for a report. Returns all of the report requests associated with a specific patient. Returns all report requests associated with a given requester. Returns a full bean describing a given report request. /** * Sets the status of a request to 'Approved' * * @param ID The unique ID of the report. * @param approverMID The MID of the person approving the request. * @param date The date the approval was made. * @throws DBException */ public void approveReportRequest(long ID, long approverMID, Date date) throws DBException { Connection conn = null; PreparedStatement ps = null; try { if (ID == 0L) throw new SQLException("ID cannot be null"); conn = factory.getConnection(); ps = conn.prepareStatement("UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Approved' where ID = ?"); ps.setLong(1, approverMID); ps.setTimestamp(2, new java.sql.Timestamp(date.getTime())); ps.setLong(3, ID); ps.executeUpdate(); } catch (SQLException e) { e.printStackTrace(); throw new DBException(e); } finally { DBUtil.closeConnection(conn, ps); } }  /** * Sets the status of a report request to 'Rejected' * * @param ID The unique ID of the request in question. * @param approverMID The MID of the rejecter in question. * @param date The date the rejection was made. * @param comment A comment describing why the request was rejected. * @throws DBException */ public void rejectReportRequest(long ID, long approverMID, Date date, String comment) throws DBException { Connection conn = null; PreparedStatement ps = null; try { if (ID == 0L) throw new SQLException("ID cannot be null"); conn = factory.getConnection(); ps = conn.prepareStatement("UPDATE ReportRequests set ApproverMID = ?, ApprovedDate = ?, Status = 'Rejected', comment = ? where ID = ?"); ps.setLong(1, approverMID); ps.setTimestamp(2, new java.sql.Timestamp(date.getTime())); ps.setString(3, comment); ps.setLong(4, ID); ps.executeUpdate(); } catch (SQLException e) { e.printStackTrace(); throw new DBException(e); } finally { DBUtil.closeConnection(conn, ps); } } Sets the status of a report request to 'Viewed'
Checks if the answer param is null Checks to see if a user exists with the given mid Checks if the given mid matches the given role Returns the security question for the mid param Checks to see if the number of reset password attempts has been exceeded for the given ipAddress Creates and sends an e-mail about the change Resets the password for the given mid Checks to make sure the password is correctly entered twice.
This method exists purely for performance - just stop once you hit the threshold. <br /> <br /> Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there should be no double-querying
Search for all patients with first name and last name given in parameters. Searches for all personnel with the first name and last name specified in the parameter list.
Performs the act of validating the bean in question, which varies depending on the type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
Returns the designated HCPs for the given patient. Returns the designated HCPs for the logged in patient. Returns a list of the patients that the logged in HCP represents Returns the patient's name Returns the personnel's name Sends a message
Called when the HttpSession is created, this method pulls the pre-specified limit from the database and sets it as a property of the HttpSession. Must be declared for compliance with the interface. Not implemented.
Checks to make sure the MID exists in iTrust Returns a SecurityQA bean holding the security info for the currently logged in user Updates information in the database from the information held in the SecurityQA bean passed as a param
Pass the OfficeVistBean along with SurveyBean
Insert survey data into database. Gets survey data from the database by the office visit id. Creates an instance of an SurveyBean with data and returns it. Has this survey been completed?
Returns all the survey data associated with a given hospital and a certain specialty. Returns all the survey results in the database that correspond to a particular zip code.
Return a list of all transactions in which an HCP accessed the given patient's record Returns the whole transaction log Returns the operation profile Return a list of all transactions in which an HCP accessed the given patient's record, within the dates The Most Thorough Fetch Log a transaction, just giving it the person who is logged in and the type Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on the transaction type.


Adds a new cpt code (med procedure) Updates the cpt code Updates a procedure with new information from the ProcedureBean
Adds a hosptial using the HospitalBean passed as a param Updates hospital Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a param
Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param Updates a diagnosis with new information from the DiagnosisBean passed as a param
Adds a new LOINC Updates a LOINC
Adds a new ND Code (prescription) to the list Removes a ND Code (prescription) from the list Medication information should already be validated Updates the ND Code with new information from the MedicationBean
Gets a PatientBean from an MID Returns the prescribing HCP for a prescription Returns all the prescriptions for a given patient Gets the logged in person's representees
Returns a list of TransactionBeans between the two dates passed as params Returns the date of the last Transaction in the list passed as a param if the list is not empty otherwise, returns today's date Returns the date of the first Transaction in the list passed as a param if the list is not empty otherwise, returns today's date Return a list of patients that pid represents
Gets a list of messages for a user based on their filter criteria. Gets all the messages for the logged in user Gets all the messages for the logged in user and sorts names in ascending order Gets all the messages for the logged in user and sorts name in descending order Gets all the messages for the logged in user and sorts by ascending time Gets all the sent messages for the logged in user Gets all the messages for the logged in user and sorts names in ascending order Gets all the messages for the logged in user and sorts name in descending order Gets all the messages for the logged in user and sorts by ascending time Gets a patient's name from their MID Gets a personnel's name from their MID Get the number of unread messages that the current user has. Set the state of the MessageBean to read, after it is read by a user.
Checks to see if family members have cancer Checks to see if family members have diabetes Checks to see if family members have heart disease Checks to see if family members have high blood pressure Checks to see if family members have high cholesterol Returns a list of HealthRecords for the currently logged in patient Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient Returns a list of AllergyBeans for the currently logged in patient Returns a complete OfficeVisitBean given a visitID Returns a PatientBean for the currently logged in patient Returns a list of Parents, Siblings, and Children of the currently logged in patient Returns a list of HealthRecords for the specified family member Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient Checks to see if family member is dead, and if so, what their cause of death was Returns a list of lab procedures Returns a PatientBean for the currently logged in patient Returns a PatientBean for the specified MID Returns a PersonnelBean for the requested MID Returns all the report requests for the logged in patient Returns a list of PatientBeans of all patients the currently logged in patient represents Returns a list of PatientBeans of all patients the currently logged in patient represents Checks to see if family members smoke Has a survey been created for this office visit Takes the patient's representee as a param and returns it as a long if the patient represents the input param
Useful to figure out who is monitoring a given patient Returns a list of RemoteMonitoringDataBeans for the logged in HCP Returns a list of RemoteMonitoringDataBeans for the logged in HCP based on a certain data type returns the patient name Returns a list of RemoteMonitoringDataBeans for the logged in HCP
/** * Returns a list of *all* reports * * @return list of all reports * @throws iTrustException */ public List<ReportRequestBean> getAllReportRequests() throws iTrustException { return reportRequestDAO.getAllReportRequests(); } Adds a report request to the list Returns all the reports for the currently logged in HCP /** * * Sends e-mail regarding the request to the patient. * * @param adminID admin who approved the request * @param hcpID HCP the request is for * @param pid ID of the patient the report is about * @return the sent e-mail * @throws DBException */ private Email makeEmailView(long adminID, long hcpID, long pid) throws DBException {  PatientBean p = new PatientDAO(factory).getPatient(pid);  Email email = new Email(); email.setFrom("no-reply@itrust.com"); email.setToList(Arrays.asList(p.getEmail())); email.setSubject("A Report has been generated in iTrust"); email .setBody(String .format( "Dear %s, \n The iTrust Health Care Provider (%s) has chosen to view your full medical report, which was approved by an iTrust administrator (%s).  This report was only viewable one time and is no longer available.", p.getFullName(), hcpID, adminID)); return email; } Gets the status of the request /** * Approves a report request from the list.  E-mail is sent when the request is approved. * * @param ID id of the request * @throws iTrustException */ public void approveReportRequest(long ID) throws iTrustException { ReportRequestBean rr = reportRequestDAO.getReportRequest(ID); reportRequestDAO.approveReportRequest(ID, loggedInMID, Calendar.getInstance().getTime()); new EmailUtil(factory).sendEmail(makeEmailApp(loggedInMID, rr.getRequesterMID(), rr.getPatientMID()));  } /** * * Sends e-mail regarding the approved request. * * @param adminID admin who approved the request * @param hcpID HCP the request is for * @param pid ID of the patient the report is about * @return the sent e-mail * @throws DBException */ private Email makeEmailApp(long adminID, long hcpID, long pid) throws DBException {  PatientBean p = new PatientDAO(factory).getPatient(pid);  Email email = new Email(); email.setFrom("no-reply@itrust.com"); email.setToList(Arrays.asList(p.getEmail())); email.setSubject("A Report has been generated in iTrust"); email .setBody(String .format( "Dear %s, \n The iTrust Health Care Provider (%s) submitted a request to view your full medical records.  The iTrust administrator (%s) approved a one-time viewing of this report.  You will be notified when the HCP chooses to view it.", p.getFullName(), hcpID, adminID)); return email; } /** * Rejects a request from the list. * * @param ID id of the rejected request * @param comment why the request was rejected * @throws iTrustException */ public void rejectReportRequest(long ID, String comment) throws iTrustException { reportRequestDAO.rejectReportRequest(ID, loggedInMID, Calendar.getInstance().getTime(), comment); } Returns the requested report Sets the viewed status of the report.  If the report is "viewed" the HCP must request a new one to see it again.
Checks to see if a patient is in the list of  visits Get the list of patients an HCP has had office visits with Returns a PersonnelBean for the logged in HCP Adds all the office visits for the logged in HCP to a list.
Gets a PatientBean from an MID Returns the prescribing HCP for a prescription Returns all the prescriptions for a given patient Gets the logged in person's representees
Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who have the logged in HCP as a DHCP and whose medications are going to expire within seven days.
Get declared HCPs list for the given patient Get diagnosis list for the given patient Returns a PaitentBean when given an MID Returns a PersonnelBean when given an MID Get prescription list for the given patient Get procedure list for the given patient
Retrieves survey results for a whole hospital. Retrieves survey results for a given zip code.
Check to see if a given HCP is declared Set a given HCP as declared Filter the list of HCPs by last name, specialty, or zip code. Get a list of all HCPs visited and/or designated by by the current user.  The list can optionally be filtered by the doctor's last name, specialty, or zip code. Given an HCP's name, return the corresponding HCPVisitBean. Returns a list of all the visited and/or designated HCPs. Create an HCPVisitBean from a given PersonnelBean and office visit date. Checks to see if a PersonnelBean matches against a given set of criteria. Set a given HCP as undeclared.
Returns a list of patients who need a visit for this HCP. This means: Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx - Circulatory-System Disease: [ 390.00 , 459.99 ] Returns a list of old people who need a flu shot CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if not in 09 - 12 Determines current date and calls one of two private methods these methods return different sets of people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last year's flu shot and need a check-up Returns a list of patients associated with a given HCP.
